{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"MkDocs \uf0c1 Project documentation with Markdown. MkDocs is a fast , simple and downright gorgeous static site generator that's geared towards building project documentation. Documentation source files are written in Markdown, and configured with a single YAML configuration file. Start by reading the introductory tutorial , then check the User Guide for more information. Getting Started User Guide Features Great themes available There's a stack of good looking themes available for MkDocs. Choose between the built in themes: mkdocs and readthedocs , select one of the third-party themes (on the MkDocs Themes wiki page as well as the MkDocs Catalog ), or build your own . Easy to customize Get your project documentation looking just the way you want it by customizing your theme and/or installing some plugins . Modify Markdown's behavior with Markdown extensions . Many configuration options are available. Preview your site as you work The built-in dev-server allows you to preview your documentation as you're writing it. It will even auto-reload and refresh your browser whenever you save your changes. Host anywhere MkDocs builds completely static HTML sites that you can host on GitHub Pages, Amazon S3, or anywhere else you choose.","title":"Home"},{"location":"#mkdocs","text":"Project documentation with Markdown. MkDocs is a fast , simple and downright gorgeous static site generator that's geared towards building project documentation. Documentation source files are written in Markdown, and configured with a single YAML configuration file. Start by reading the introductory tutorial , then check the User Guide for more information. Getting Started User Guide","title":"MkDocs"},{"location":"getting-started/","text":"Getting Started with MkDocs \uf0c1 An introductory tutorial! Installation \uf0c1 To install MkDocs, run the following command from the command line: pip install mkdocs For more details, see the Installation Guide . Creating a new project \uf0c1 Getting started is super easy. To create a new project, run the following command from the command line: mkdocs new my-project cd my-project Take a moment to review the initial project that has been created for you. There's a single configuration file named mkdocs.yml , and a folder named docs that will contain your documentation source files ( docs is the default value for the docs_dir configuration setting). Right now the docs folder just contains a single documentation page, named index.md . MkDocs comes with a built-in dev-server that lets you preview your documentation as you work on it. Make sure you're in the same directory as the mkdocs.yml configuration file, and then start the server by running the mkdocs serve command: $ mkdocs serve INFO - Building documentation... INFO - Cleaning site directory INFO - Documentation built in 0.22 seconds INFO - [15:50:43] Watching paths for changes: 'docs', 'mkdocs.yml' INFO - [15:50:43] Serving on http://127.0.0.1:8000/ Open up http://127.0.0.1:8000/ in your browser, and you'll see the default home page being displayed: The dev-server also supports auto-reloading, and will rebuild your documentation whenever anything in the configuration file, documentation directory, or theme directory changes. Open the docs/index.md document in your text editor of choice, change the initial heading to MkLorum , and save your changes. Your browser will auto-reload and you should see your updated documentation immediately. Now try editing the configuration file: mkdocs.yml . Change the site_name setting to MkLorum and save the file. site_name: MkLorum Your browser should immediately reload, and you'll see your new site name take effect. Note The site_name configuration option is the only required option in your configuration file. Adding pages \uf0c1 Now add a second page to your documentation: curl 'https://jaspervdj.be/lorem-markdownum/markdown.txt' > docs/about.md As our documentation site will include some navigation headers, you may want to edit the configuration file and add some information about the order, title, and nesting of each page in the navigation header by adding a nav setting: site_name: MkLorum nav: - Home: index.md - About: about.md Save your changes and you'll now see a navigation bar with Home and About items on the left as well as Search , Previous , and Next items on the right. Try the menu items and navigate back and forth between pages. Then click on Search . A search dialog will appear, allowing you to search for any text on any page. Notice that the search results include every occurrence of the search term on the site and links directly to the section of the page in which the search term appears. You get all of that with no effort or configuration on your part! Theming our documentation \uf0c1 Now change the configuration file to alter how the documentation is displayed by changing the theme. Edit the mkdocs.yml file and add a theme setting: site_name: MkLorum nav: - Home: index.md - About: about.md theme: readthedocs Save your changes, and you'll see the ReadTheDocs theme being used. Changing the Favicon Icon \uf0c1 By default, MkDocs uses the MkDocs favicon icon. To use a different icon, create an img subdirectory in the docs directory and copy your custom favicon.ico file to that directory. MkDocs will automatically detect and use that file as your favicon icon. Building the site \uf0c1 That's looking good. You're ready to deploy the first pass of your MkLorum documentation. First build the documentation: mkdocs build This will create a new directory, named site . Take a look inside the directory: $ ls site about fonts index.html license search.html css img js mkdocs sitemap.xml Notice that your source documentation has been output as two HTML files named index.html and about/index.html . You also have various other media that's been copied into the site directory as part of the documentation theme. You even have a sitemap.xml file and mkdocs/search_index.json . If you're using source code control such as git you probably don't want to check your documentation builds into the repository. Add a line containing site/ to your .gitignore file. echo \"site/\" >> .gitignore If you're using another source code control tool you'll want to check its documentation on how to ignore specific directories. Other Commands and Options \uf0c1 There are various other commands and options available. For a complete list of commands, use the --help flag: mkdocs --help To view a list of options available on a given command, use the --help flag with that command. For example, to get a list of all options available for the build command run the following: mkdocs build --help Deploying \uf0c1 The documentation site that you just built only uses static files so you'll be able to host it from pretty much anywhere. Simply upload the contents of the entire site directory to wherever you're hosting your website from and you're done. For specific instructions on a number of common hosts, see the Deploying your Docs page. Getting help \uf0c1 See the User Guide for more complete documentation of all of MkDocs' features. To get help with MkDocs, please use the GitHub discussions or GitHub issues .","title":"Getting Started"},{"location":"getting-started/#getting-started-with-mkdocs","text":"An introductory tutorial!","title":"Getting Started with MkDocs"},{"location":"getting-started/#installation","text":"To install MkDocs, run the following command from the command line: pip install mkdocs For more details, see the Installation Guide .","title":"Installation"},{"location":"getting-started/#creating-a-new-project","text":"Getting started is super easy. To create a new project, run the following command from the command line: mkdocs new my-project cd my-project Take a moment to review the initial project that has been created for you. There's a single configuration file named mkdocs.yml , and a folder named docs that will contain your documentation source files ( docs is the default value for the docs_dir configuration setting). Right now the docs folder just contains a single documentation page, named index.md . MkDocs comes with a built-in dev-server that lets you preview your documentation as you work on it. Make sure you're in the same directory as the mkdocs.yml configuration file, and then start the server by running the mkdocs serve command: $ mkdocs serve INFO - Building documentation... INFO - Cleaning site directory INFO - Documentation built in 0.22 seconds INFO - [15:50:43] Watching paths for changes: 'docs', 'mkdocs.yml' INFO - [15:50:43] Serving on http://127.0.0.1:8000/ Open up http://127.0.0.1:8000/ in your browser, and you'll see the default home page being displayed: The dev-server also supports auto-reloading, and will rebuild your documentation whenever anything in the configuration file, documentation directory, or theme directory changes. Open the docs/index.md document in your text editor of choice, change the initial heading to MkLorum , and save your changes. Your browser will auto-reload and you should see your updated documentation immediately. Now try editing the configuration file: mkdocs.yml . Change the site_name setting to MkLorum and save the file. site_name: MkLorum Your browser should immediately reload, and you'll see your new site name take effect. Note The site_name configuration option is the only required option in your configuration file.","title":"Creating a new project"},{"location":"getting-started/#adding-pages","text":"Now add a second page to your documentation: curl 'https://jaspervdj.be/lorem-markdownum/markdown.txt' > docs/about.md As our documentation site will include some navigation headers, you may want to edit the configuration file and add some information about the order, title, and nesting of each page in the navigation header by adding a nav setting: site_name: MkLorum nav: - Home: index.md - About: about.md Save your changes and you'll now see a navigation bar with Home and About items on the left as well as Search , Previous , and Next items on the right. Try the menu items and navigate back and forth between pages. Then click on Search . A search dialog will appear, allowing you to search for any text on any page. Notice that the search results include every occurrence of the search term on the site and links directly to the section of the page in which the search term appears. You get all of that with no effort or configuration on your part!","title":"Adding pages"},{"location":"getting-started/#theming-our-documentation","text":"Now change the configuration file to alter how the documentation is displayed by changing the theme. Edit the mkdocs.yml file and add a theme setting: site_name: MkLorum nav: - Home: index.md - About: about.md theme: readthedocs Save your changes, and you'll see the ReadTheDocs theme being used.","title":"Theming our documentation"},{"location":"getting-started/#changing-the-favicon-icon","text":"By default, MkDocs uses the MkDocs favicon icon. To use a different icon, create an img subdirectory in the docs directory and copy your custom favicon.ico file to that directory. MkDocs will automatically detect and use that file as your favicon icon.","title":"Changing the Favicon Icon"},{"location":"getting-started/#building-the-site","text":"That's looking good. You're ready to deploy the first pass of your MkLorum documentation. First build the documentation: mkdocs build This will create a new directory, named site . Take a look inside the directory: $ ls site about fonts index.html license search.html css img js mkdocs sitemap.xml Notice that your source documentation has been output as two HTML files named index.html and about/index.html . You also have various other media that's been copied into the site directory as part of the documentation theme. You even have a sitemap.xml file and mkdocs/search_index.json . If you're using source code control such as git you probably don't want to check your documentation builds into the repository. Add a line containing site/ to your .gitignore file. echo \"site/\" >> .gitignore If you're using another source code control tool you'll want to check its documentation on how to ignore specific directories.","title":"Building the site"},{"location":"getting-started/#other-commands-and-options","text":"There are various other commands and options available. For a complete list of commands, use the --help flag: mkdocs --help To view a list of options available on a given command, use the --help flag with that command. For example, to get a list of all options available for the build command run the following: mkdocs build --help","title":"Other Commands and Options"},{"location":"getting-started/#deploying","text":"The documentation site that you just built only uses static files so you'll be able to host it from pretty much anywhere. Simply upload the contents of the entire site directory to wherever you're hosting your website from and you're done. For specific instructions on a number of common hosts, see the Deploying your Docs page.","title":"Deploying"},{"location":"getting-started/#getting-help","text":"See the User Guide for more complete documentation of all of MkDocs' features. To get help with MkDocs, please use the GitHub discussions or GitHub issues .","title":"Getting help"},{"location":"about/contributing/","text":"Contributing to MkDocs \uf0c1 An introduction to contributing to the MkDocs project. The MkDocs project welcomes contributions from developers and users in the open source community. Contributions can be made in a number of ways, a few examples are: Code patches via pull requests Documentation improvements Bug reports and patch reviews For information about available communication channels please refer to the README file in our GitHub repository. Reporting an Issue \uf0c1 Please include as much detail as you can. Let us know your platform and MkDocs version. If the problem is visual (for example a theme or design issue), please add a screenshot. If you get an error, please include the full error message and traceback. It is particularly helpful if an issue report touches on all of these aspects: What are you trying to achieve? What is your mkdocs.yml configuration (+ other relevant files)? Preferably reduced to the minimal reproducible example. What did you expect to happen when applying this setup? What happened instead and how didn't it match your expectation? Trying out the Development Version \uf0c1 If you want to just install and try out the latest development version of MkDocs (in case it already contains a fix for your issue), you can do so with the following command. This can be useful if you want to provide feedback for a new feature or want to confirm if a bug you have encountered is fixed in the git master. It is strongly recommended that you do this within a virtualenv . pip install git+https://github.com/mkdocs/mkdocs.git Installing for Development \uf0c1 Note that for development you can just use Hatch directly as described below. If you wish to install a local clone of MkDocs anyway, you can run pip install --editable . . It is strongly recommended that you do this within a virtualenv . Installing Hatch \uf0c1 The main tool that is used for development is Hatch . It manages dependencies (in a virtualenv that is created on the fly) and is also the command runner. So first, install it . Ideally in an isolated way with pipx install hatch (after [installing pipx ]), or just pip install hatch as a more well-known way. Running all checks \uf0c1 To run all checks that are required for MkDocs, just run the following command in the cloned MkDocs repository: hatch run all This will encompass all of the checks mentioned below. All checks need to pass. Running tests \uf0c1 To run the test suite for MkDocs, run the following commands: hatch run test:test hatch run integration:test It will attempt to run the tests against all of the Python versions we support. So don't be concerned if you are missing some. The rest will be verified by GitHub Actions when you submit a pull request. Python code style \uf0c1 Python code within MkDocs' code base is formatted using Black and Isort and lint-checked using Ruff , all of which are configured in pyproject.toml . You can automatically check and format the code according to these tools with the following command: hatch run style:fix The code is also type-checked using mypy - also configured in pyproject.toml , it can be run like this: hatch run types:check Other style checks \uf0c1 There are several other checks, such as spelling and JS style. To run all of them, use this command: hatch run lint:check Documentation of MkDocs itself \uf0c1 After making edits to files under the docs/ dir, you can preview the site locally using the following command: hatch run docs:serve Note that any 'WARNING' should be resolved before submitting a contribution. Documentation files are also checked by markdownlint, so you should run this as well: hatch run lint:check If you add a new plugin to mkdocs.yml, you don't need to add it to any \"requirements\" file, because that is managed automatically. Info If you don't want to use Hatch, for documentation you can install requirements into a virtualenv, in one of these ways (with .venv being the virtualenv directory): .venv/bin/pip install -r requirements/requirements-docs.txt # Exact versions of dependencies. .venv/bin/pip install -r $(mkdocs get-deps) # Latest versions of all dependencies. Translating themes \uf0c1 To localize a theme to your favorite language, follow the guide on Translating Themes . We welcome translation pull requests! Submitting Pull Requests \uf0c1 If you're considering a large code contribution to MkDocs, please prefer to open an issue first to get early feedback on the idea. Once you think the code is ready to be reviewed, push it to your fork and send a pull request. For a change to be accepted it will most likely need to have tests and documentation if it is a new feature. When working with a pull request branch: Unless otherwise agreed, prefer commit over amend , and merge over rebase . Avoid force-pushes, otherwise review history is much harder to navigate. For the end result, the \"unclean\" history is fine because most pull requests are squash-merged on GitHub. Do not add to release-notes.md , this will be written later. Submitting changes to the builtin themes \uf0c1 When installed with i18n support ( pip install 'mkdocs[i18n]' ), MkDocs allows themes to support being translated into various languages (referred to as locales) if they respect Jinja's i18n extension by wrapping text placeholders with {% trans %} and {% endtrans %} tags. Each time a translatable text placeholder is added, removed or changed in a theme template, the theme's Portable Object Template ( pot ) file needs to be updated by running the extract_messages command. To update the pot file for both built-in themes, run these commands: pybabel extract --project=MkDocs --copyright-holder=MkDocs --msgid-bugs-address='https://github.com/mkdocs/mkdocs/issues' --no-wrap --version=\"$(hatch version)\" --mapping-file mkdocs/themes/babel.cfg --output-file mkdocs/themes/mkdocs/messages.pot mkdocs/themes/mkdocs pybabel extract --project=MkDocs --copyright-holder=MkDocs --msgid-bugs-address='https://github.com/mkdocs/mkdocs/issues' --no-wrap --version=\"$(hatch version)\" --mapping-file mkdocs/themes/babel.cfg --output-file mkdocs/themes/readthedocs/messages.pot mkdocs/themes/readthedocs The updated pot file should be included in a PR with the updated template. The updated pot file will allow translation contributors to propose the translations needed for their preferred language. See the guide on Translating Themes for details. Note Contributors are not expected to provide translations with their changes to a theme's templates. However, they are expected to include an updated pot file so that everything is ready for translators to do their job. Code of Conduct \uf0c1 Everyone interacting in the MkDocs project's codebases, issue trackers, chat rooms, and mailing lists is expected to follow the PyPA Code of Conduct .","title":"Contributing"},{"location":"about/contributing/#contributing-to-mkdocs","text":"An introduction to contributing to the MkDocs project. The MkDocs project welcomes contributions from developers and users in the open source community. Contributions can be made in a number of ways, a few examples are: Code patches via pull requests Documentation improvements Bug reports and patch reviews For information about available communication channels please refer to the README file in our GitHub repository.","title":"Contributing to MkDocs"},{"location":"about/contributing/#reporting-an-issue","text":"Please include as much detail as you can. Let us know your platform and MkDocs version. If the problem is visual (for example a theme or design issue), please add a screenshot. If you get an error, please include the full error message and traceback. It is particularly helpful if an issue report touches on all of these aspects: What are you trying to achieve? What is your mkdocs.yml configuration (+ other relevant files)? Preferably reduced to the minimal reproducible example. What did you expect to happen when applying this setup? What happened instead and how didn't it match your expectation?","title":"Reporting an Issue"},{"location":"about/contributing/#trying-out-the-development-version","text":"If you want to just install and try out the latest development version of MkDocs (in case it already contains a fix for your issue), you can do so with the following command. This can be useful if you want to provide feedback for a new feature or want to confirm if a bug you have encountered is fixed in the git master. It is strongly recommended that you do this within a virtualenv . pip install git+https://github.com/mkdocs/mkdocs.git","title":"Trying out the Development Version"},{"location":"about/contributing/#installing-for-development","text":"Note that for development you can just use Hatch directly as described below. If you wish to install a local clone of MkDocs anyway, you can run pip install --editable . . It is strongly recommended that you do this within a virtualenv .","title":"Installing for Development"},{"location":"about/contributing/#installing-hatch","text":"The main tool that is used for development is Hatch . It manages dependencies (in a virtualenv that is created on the fly) and is also the command runner. So first, install it . Ideally in an isolated way with pipx install hatch (after [installing pipx ]), or just pip install hatch as a more well-known way.","title":"Installing Hatch"},{"location":"about/contributing/#running-all-checks","text":"To run all checks that are required for MkDocs, just run the following command in the cloned MkDocs repository: hatch run all This will encompass all of the checks mentioned below. All checks need to pass.","title":"Running all checks"},{"location":"about/contributing/#running-tests","text":"To run the test suite for MkDocs, run the following commands: hatch run test:test hatch run integration:test It will attempt to run the tests against all of the Python versions we support. So don't be concerned if you are missing some. The rest will be verified by GitHub Actions when you submit a pull request.","title":"Running tests"},{"location":"about/contributing/#python-code-style","text":"Python code within MkDocs' code base is formatted using Black and Isort and lint-checked using Ruff , all of which are configured in pyproject.toml . You can automatically check and format the code according to these tools with the following command: hatch run style:fix The code is also type-checked using mypy - also configured in pyproject.toml , it can be run like this: hatch run types:check","title":"Python code style"},{"location":"about/contributing/#other-style-checks","text":"There are several other checks, such as spelling and JS style. To run all of them, use this command: hatch run lint:check","title":"Other style checks"},{"location":"about/contributing/#documentation-of-mkdocs-itself","text":"After making edits to files under the docs/ dir, you can preview the site locally using the following command: hatch run docs:serve Note that any 'WARNING' should be resolved before submitting a contribution. Documentation files are also checked by markdownlint, so you should run this as well: hatch run lint:check If you add a new plugin to mkdocs.yml, you don't need to add it to any \"requirements\" file, because that is managed automatically. Info If you don't want to use Hatch, for documentation you can install requirements into a virtualenv, in one of these ways (with .venv being the virtualenv directory): .venv/bin/pip install -r requirements/requirements-docs.txt # Exact versions of dependencies. .venv/bin/pip install -r $(mkdocs get-deps) # Latest versions of all dependencies.","title":"Documentation of MkDocs itself"},{"location":"about/contributing/#translating-themes","text":"To localize a theme to your favorite language, follow the guide on Translating Themes . We welcome translation pull requests!","title":"Translating themes"},{"location":"about/contributing/#submitting-pull-requests","text":"If you're considering a large code contribution to MkDocs, please prefer to open an issue first to get early feedback on the idea. Once you think the code is ready to be reviewed, push it to your fork and send a pull request. For a change to be accepted it will most likely need to have tests and documentation if it is a new feature. When working with a pull request branch: Unless otherwise agreed, prefer commit over amend , and merge over rebase . Avoid force-pushes, otherwise review history is much harder to navigate. For the end result, the \"unclean\" history is fine because most pull requests are squash-merged on GitHub. Do not add to release-notes.md , this will be written later.","title":"Submitting Pull Requests"},{"location":"about/contributing/#submitting-changes-to-the-builtin-themes","text":"When installed with i18n support ( pip install 'mkdocs[i18n]' ), MkDocs allows themes to support being translated into various languages (referred to as locales) if they respect Jinja's i18n extension by wrapping text placeholders with {% trans %} and {% endtrans %} tags. Each time a translatable text placeholder is added, removed or changed in a theme template, the theme's Portable Object Template ( pot ) file needs to be updated by running the extract_messages command. To update the pot file for both built-in themes, run these commands: pybabel extract --project=MkDocs --copyright-holder=MkDocs --msgid-bugs-address='https://github.com/mkdocs/mkdocs/issues' --no-wrap --version=\"$(hatch version)\" --mapping-file mkdocs/themes/babel.cfg --output-file mkdocs/themes/mkdocs/messages.pot mkdocs/themes/mkdocs pybabel extract --project=MkDocs --copyright-holder=MkDocs --msgid-bugs-address='https://github.com/mkdocs/mkdocs/issues' --no-wrap --version=\"$(hatch version)\" --mapping-file mkdocs/themes/babel.cfg --output-file mkdocs/themes/readthedocs/messages.pot mkdocs/themes/readthedocs The updated pot file should be included in a PR with the updated template. The updated pot file will allow translation contributors to propose the translations needed for their preferred language. See the guide on Translating Themes for details. Note Contributors are not expected to provide translations with their changes to a theme's templates. However, they are expected to include an updated pot file so that everything is ready for translators to do their job.","title":"Submitting changes to the builtin themes"},{"location":"about/contributing/#code-of-conduct","text":"Everyone interacting in the MkDocs project's codebases, issue trackers, chat rooms, and mailing lists is expected to follow the PyPA Code of Conduct .","title":"Code of Conduct"},{"location":"about/license/","text":"License \uf0c1 The legal stuff. Included projects \uf0c1 Themes used under license from the ReadTheDocs projects. ReadTheDocs theme - View license . Many thanks to the authors and contributors of those wonderful projects. MkDocs License (BSD) \uf0c1 Copyright \u00a9 2014, Tom Christie. All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.","title":"License"},{"location":"about/license/#license","text":"The legal stuff.","title":"License"},{"location":"about/license/#included-projects","text":"Themes used under license from the ReadTheDocs projects. ReadTheDocs theme - View license . Many thanks to the authors and contributors of those wonderful projects.","title":"Included projects"},{"location":"about/license/#mkdocs-license-bsd","text":"Copyright \u00a9 2014, Tom Christie. All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.","title":"MkDocs License (BSD)"},{"location":"about/release-notes/","text":"Release Notes \uf0c1 Upgrading \uf0c1 To upgrade MkDocs to the latest version, use pip: pip install -U mkdocs You can determine your currently installed version using mkdocs --version : $ mkdocs --version mkdocs, version 1.5.0 from /path/to/mkdocs (Python 3.10) Maintenance team \uf0c1 The current and past members of the MkDocs team. @tomchristie @d0ugal @waylan @oprypin @ultrabug Version 1.6.1 (2024-08-30) \uf0c1 Fixed \uf0c1 Fix build error when environment variable SOURCE_DATE_EPOCH=0 is set. #3795 Fix build error when mkdocs_theme.yml config is empty. #3700 Support python -W and PYTHONWARNINGS instead of overriding the configuration. #3809 Support running with Docker under strict mode, by removing 0.0.0.0 dev server warning. #3784 Drop unnecessary changefreq from sitemap.xml . #3629 Fix JavaScript console error when closing menu dropdown. #3774 Fix JavaScript console error that occur on repeated clicks. #3730 Fix JavaScript console error that can occur on dropdown selections. #3694 Added \uf0c1 Added translations for Dutch. #3804 Added and updated translations for Chinese (Simplified). #3684 Version 1.6.0 (2024-04-20) \uf0c1 Local preview \uf0c1 mkdocs serve no longer locks up the browser when more than 5 tabs are open. This is achieved by closing the polling connection whenever a tab becomes inactive. Background tabs will no longer auto-reload either - that will instead happen as soon the tab is opened again. Context: #3391 New flag serve --open to open the site in a browser. After the first build is finished, this flag will cause the default OS Web browser to be opened at the home page of the local site. Context: #3500 Drafts \uf0c1 Changed from version 1.5 The exclude_docs config was split up into two separate concepts. The exclude_docs config no longer has any special behavior for mkdocs serve - it now always completely excludes the listed documents from the site. If you wish to use the \"drafts\" functionality like the exclude_docs key used to do in MkDocs 1.5, please switch to the new config key draft_docs . See documentation . Other changes: Reduce warning levels when a \"draft\" page has a link to a non-existent file. Context: #3449 Update to deduction of page titles \uf0c1 MkDocs 1.5 had a change in behavior in deducing the page titles from the first heading. Unfortunately this could cause unescaped HTML tags or entities to appear in edge cases. Now tags are always fully sanitized from the title. Though it still remains the case that Page.title is expected to contain HTML entities and is passed directly to the themes. Images (notably, emojis in some extensions) get preserved in the title only through their alt attribute's value. Context: #3564 , #3578 Themes \uf0c1 Built-in themes now also support Polish language ( #3613 ) \"readthedocs\" theme \uf0c1 Fix: \"readthedocs\" theme can now correctly handle deeply nested nav configurations (over 2 levels deep), without confusedly expanding all sections and jumping around vertically. ( #3464 ) Fix: \"readthedocs\" theme now shows a link to the repository (with a generic logo) even when isn't one of the 3 known hosters. ( #3435 ) \"readthedocs\" theme now also has translation for the word \"theme\" in the footer that mistakenly always remained in English. ( #3613 , #3625 ) \"mkdocs\" theme \uf0c1 The \"mkdocs\" theme got a big update to a newer version of Bootstrap, meaning a slight overhaul of styles. Colors (most notably of admonitions) have much better contrast. The \"mkdocs\" theme now has support for dark mode - both automatic (based on the OS/browser setting) and with a manual toggle. Both of these options are not enabled by default and need to be configured explicitly. See color_mode , user_color_mode_toggle in documentation . Possible breaking change jQuery is no longer included into the \"mkdocs\" theme. If you were relying on it in your scripts, you will need to separately add it first (into mkdocs.yml) as an extra script: extra_javascript: - https://code.jquery.com/jquery-3.7.1.min.js Or even better if the script file is copied and included from your docs dir. Context: #3493 , #3649 Configuration \uf0c1 New \" enabled \" setting for all plugins \uf0c1 You may have seen some plugins take up the convention of having a setting enabled: false (or usually controlled through an environment variable) to make the plugin do nothing. Now every plugin has this setting. Plugins can still choose to implement this config themselves and decide how it behaves (and unless they drop older versions of MkDocs, they still should for now), but now there's always a fallback for every plugin. See documentation . Context: #3395 Validation \uf0c1 Validation of hyperlinks between pages \uf0c1 Absolute links \uf0c1 Historically, within Markdown, MkDocs only recognized relative links that lead to another physical *.md document (or media file). This is a good convention to follow because then the source pages are also freely browsable without MkDocs, for example on GitHub. Whereas absolute links were left unmodified (making them often not work as expected or, more recently, warned against). If you dislike having to always use relative links, now you can opt into absolute links and have them work correctly. If you set the setting validation.links.absolute_links to the new value relative_to_docs , all Markdown links starting with / will be understood as being relative to the docs_dir root. The links will then be validated for correctness according to all the other rules that were already working for relative links in prior versions of MkDocs. For the HTML output, these links will still be turned relative so that the site still works reliably. So, now any document (e.g. \"dir1/foo.md\") can link to the document \"dir2/bar.md\" as [link](/dir2/bar.md) , in addition to the previously only correct way [link](../dir2/bar.md) . You have to enable the setting, though. The default is still to just skip any processing of such links. See documentation . Context: #3485 Absolute links within nav \uf0c1 Absolute links within the nav: config were also always skipped. It is now possible to also validate them in the same way with validation.nav.absolute_links . Though it makes a bit less sense because then the syntax is simply redundant with the syntax that comes without the leading slash. Anchors \uf0c1 There is a new config setting that is recommended to enable warnings for: validation: anchors: warn Example of a warning that this can produce: WARNING - Doc file 'foo/example.md' contains a link '../bar.md#some-heading', but the doc 'foo/bar.md' does not contain an anchor '#some-heading'. Any of the below methods of declaring an anchor will be detected by MkDocs: ## Heading producing an anchor ## Another heading {#custom-anchor-for-heading-using-attr-list} <a id=\"raw-anchor\"></a> [](){#markdown-anchor-using-attr-list} Plugins and extensions that insert anchors, in order to be compatible with this, need to be developed as treeprocessors that insert etree elements as their mode of operation, rather than raw HTML which is undetectable for this purpose. If you as a user are dealing with falsely reported missing anchors and there's no way to resolve this, you can choose to disable these messages by setting this option to ignore (and they are at INFO level by default anyway). See documentation . Context: #3463 Other changes: When the nav config is not specified at all, the not_in_nav setting (originally added in 1.5.0) gains an additional behavior: documents covered by not_in_nav will not be part of the automatically deduced navigation. Context: #3443 Fix: the !relative YAML tag for markdown_extensions (originally added in 1.5.0) - it was broken in many typical use cases. See documentation . Context: #3466 Config validation now exits on first error, to avoid showing bizarre secondary errors. Context: #3437 MkDocs used to shorten error messages for unexpected errors such as \"file not found\", but that is no longer the case, the full error message and stack trace will be possible to see (unless the error has a proper handler, of course). Context: #3445 Upgrades for plugin developers \uf0c1 Plugins can add multiple handlers for the same event type, at multiple priorities \uf0c1 See mkdocs.plugins.CombinedEvent in documentation . Context: #3448 Enabling true generated files and expanding the File API \uf0c1 See documentation . There is a new pair of attributes File.content_string / content_bytes that becomes the official API for obtaining the content of a file and is used by MkDocs itself. This replaces the old approach where one had to manually read the file located at File.abs_src_path , although that is still the primary action that these new attributes do under the hood. The content of a File can be backed by a string and no longer has to be a real existing file at abs_src_path . It is possible to set the attribute File.content_string or File.content_bytes and it will take precedence over abs_src_path . Further, abs_src_path is no longer guaranteed to be present and can be None instead. MkDocs itself still uses physical files in all cases, but eventually plugins will appear that don't populate this attribute. There is a new constructor File.generated() that should be used by plugins instead of the File() constructor. It is much more convenient because one doesn't need to manually look up the values such as docs_dir and use_directory_urls . Its signature is one of: f = File.generated(config: MkDocsConfig, src_uri: str, content: str | bytes) f = File.generated(config: MkDocsConfig, src_uri: str, abs_src_path: str) This way, it is now extremely easy to add a virtual file even from a hook: def on_files(files: Files, config: MkDocsConfig): files.append(File.generated(config, 'fake/path.md', content=\"Hello, world!\")) For large content it is still best to use physical files, but one no longer needs to manipulate the path by providing a fake unused docs_dir . There is a new attribute File.generated_by that arose by convention - for generated files it should be set to the name of the plugin (the key in the plugins: collection) that produced this file. This attribute is populated automatically when using the File.generated() constructor. It is possible to set the edit_uri attribute of a File , for example from a plugin or hook, to make it different from the default (equal to src_uri ), and this will be reflected in the edit link of the document. This can be useful because some pages aren't backed by a real file and are instead created dynamically from some other source file or script. So a hook could set the edit_uri to that source file or script accordingly. The File object now stores its original src_dir , dest_dir , use_directory_urls values as attributes. Fields of File are computed on demand but cached. Only the three above attributes are primary ones, and partly also dest_uri . This way, it is possible to, for example, overwrite dest_uri of a File , and abs_dest_path will be calculated based on it. However you need to clear the attribute first using del f.abs_dest_path , because the values are cached. File instances are now hashable (can be used as keys of a dict ). Two files can no longer be considered \"equal\" unless it's the exact same instance of File . Other changes: The internal storage of File objects inside a Files object has been reworked, so any plugins that choose to access Files._files will get a deprecation warning. The order of File objects inside a Files collection is no longer significant when automatically inferring the nav . They get forcibly sorted according to the default alphabetic order. Context: #3451 , #3463 Hooks and debugging \uf0c1 Hook files can now import adjacent *.py files using the import statement. Previously this was possible to achieve only through a sys.path workaround. See the new mention in documentation . Context: #3568 Verbose -v log shows the sequence of plugin events in more detail - shows each invoked plugin one by one, not only the event type. Context: #3444 Deprecations \uf0c1 Python 3.7 is no longer supported, Python 3.12 is officially supported. Context: #3429 The theme config file mkdocs_theme.yml no longer executes YAML tags. Context: #3465 The plugin event on_page_read_source is soft-deprecated because there is always a better alternative to it (see the new File API or just on_page_markdown , depending on the desired interaction). When multiple plugins/hooks apply this event handler, they trample over each other, so now there is a warning in that case. See documentation . Context: #3503 API deprecations \uf0c1 It is no longer allowed to set File.page to a type other than Page or a subclass thereof. Context: #3443 - following the deprecation in version 1.5.3 and #3381 . Theme._vars is deprecated - use theme['foo'] instead of theme._vars['foo'] utils : modified_time() , get_html_path() , get_url_path() , is_html_file() , is_template_file() are removed. path_to_url() is deprecated. LiveReloadServer.watch() no longer accepts a custom callback. Context: #3429 Misc \uf0c1 The sitemap.xml.gz file is slightly more reproducible and no longer changes on every build, but instead only once per day (upon a date change). Context: #3460 Other small improvements; see commit log . Version 1.5.3 (2023-09-18) \uf0c1 Fix mkdocs serve sometimes locking up all browser tabs when navigating quickly ( #3390 ) Add many new supported languages for \"search\" plugin - update lunr-languages to 1.12.0 ( #3334 ) Bugfix (regression in 1.5.0): In \"readthedocs\" theme the styling of \"breadcrumb navigation\" was broken for nested pages ( #3383 ) Built-in themes now also support Chinese (Traditional, Taiwan) language ( #3154 ) Plugins can now set File.page to their own subclass of Page . There is also now a warning if File.page is set to anything other than a strict subclass of Page . ( #3367 , #3381 ) Note that just instantiating a Page sets the file automatically , so care needs to be taken not to create an unneeded Page . Other small improvements; see commit log . Version 1.5.2 (2023-08-02) \uf0c1 Bugfix (regression in 1.5.0): Restore functionality of --no-livereload . ( #3320 ) Bugfix (regression in 1.5.0): The new page title detection would sometimes be unable to drop anchorlinks - fix that. ( #3325 ) Partly bring back pre-1.5 API: extra_javascript items will once again be mostly strings, and only sometimes ExtraScriptValue (when the extra script functionality is used). Plugins should be free to append strings to config.extra_javascript , but when reading the values, they must still make sure to read it as str(value) in case it is an ExtraScriptValue item. For querying the attributes such as .type you need to check isinstance first. Static type checking will guide you in that. ( #3324 ) See commit log . Version 1.5.1 (2023-07-28) \uf0c1 Bugfix (regression in 1.5.0): Make it possible to treat ExtraScriptValue as a path. This lets some plugins still work despite the breaking change. Bugfix (regression in 1.5.0): Prevent errors for special setups that have 3 conflicting files, such as index.html , index.md and README.md ( #3314 ) See commit log . Version 1.5.0 (2023-07-26) \uf0c1 New command mkdocs get-deps \uf0c1 This command guesses the Python dependencies that a MkDocs site requires in order to build. It simply prints the PyPI packages that need to be installed. In the terminal it can be combined directly with an installation command as follows: pip install $(mkdocs get-deps) The idea is that right after running this command, you can directly follow it up with mkdocs build and it will almost always \"just work\", without needing to think which dependencies to install. The way it works is by scanning mkdocs.yml for themes: , plugins: , markdown_extensions: items and doing a reverse lookup based on a large list of known projects (catalog, see below). Of course, you're welcome to use a \"virtualenv\" with such a command. Also note that for environments that require stability (for example CI) directly installing deps in this way is not a very reliable approach as it precludes dependency pinning. The command allows overriding which config file is used (instead of mkdocs.yml in the current directory) as well as which catalog of projects is used (instead of downloading it from the default location). See mkdocs get-deps --help . Context: #3205 MkDocs has an official catalog of plugins \uf0c1 Check out https://github.com/mkdocs/catalog and add all your general-purpose plugins, themes and extensions there, so that they can be looked up through mkdocs get-deps . This was renamed from \"best-of-mkdocs\" and received significant updates. In addition to pip installation commands, the page now shows the config boilerplate needed to add a plugin. Expanded validation of links \uf0c1 Validated links in Markdown \uf0c1 As you may know, within Markdown, MkDocs really only recognizes relative links that lead to another physical *.md document (or media file). This is a good convention to follow because then the source pages are also freely browsable without MkDocs, for example on GitHub. MkDocs knows that in the output it should turn those *.md links into *.html as appropriate, and it would also always tell you if such a link doesn't actually lead to an existing file. However, the checks for links were really loose and had many concessions. For example, links that started with / (\"absolute\") and links that ended with / were left as is and no warning was shown, which allowed such very fragile links to sneak into site sources: links that happen to work right now but get no validation and links that confusingly need an extra level of .. with use_directory_urls enabled. Now, in addition to validating relative links, MkDocs will print INFO messages for unrecognized types of links (including absolute links). They look like this: INFO - Doc file 'example.md' contains an absolute link '/foo/bar/', it was left as is. Did you mean 'foo/bar.md'? If you don't want any changes, not even the INFO messages, and wish to revert to the silence from MkDocs 1.4, add the following configs to mkdocs.yml ( not recommended): validation: absolute_links: ignore unrecognized_links: ignore If, on the opposite end, you want these to print WARNING messages and cause mkdocs build --strict to fail, you are recommended to configure these to warn instead. See documentation for actual recommended settings and more details. Context: #3283 Validated links in the nav \uf0c1 Links to documents in the nav configuration now also have configurable validation, though with no changes to the defaults. You are welcomed to turn on validation for files that were forgotten and excluded from the nav. Example: validation: nav: omitted_files: warn absolute_links: warn This can make the following message appear with the WARNING level (as opposed to INFO as the only option previously), thus being caught by mkdocs --strict : INFO - The following pages exist in the docs directory, but are not included in the \"nav\" configuration: ... See documentation . Context: #3283 , #1755 Mark docs as intentionally \"not in nav\" \uf0c1 There is a new config not_in_nav . With it, you can mark particular patterns of files as exempt from the above omitted_files warning type; no messages will be printed for them anymore. (As a corollary, setting this config to * is the same as ignoring omitted_files altogether.) This is useful if you generally like these warnings about files that were forgotten from the nav, but still have some pages that you knowingly excluded from the nav and just want to build and copy them. The not_in_nav config is a set of gitignore-like patterns. See the next section for an explanation of another such config. See documentation . Context: #3224 , #1888 Excluded doc files \uf0c1 There is a new config exclude_docs that tells MkDocs to ignore certain files under docs_dir and not copy them to the built site as part of the build. Historically MkDocs would always ignore file names starting with a dot, and that's all. Now this is all configurable: you can un-ignore these and/or ignore more patterns of files. The exclude_docs config follows the .gitignore pattern format and is specified as a multiline YAML string. For example: exclude_docs: | *.py # Excludes e.g. docs/hooks/foo.py /requirements.txt # Excludes docs/requirements.txt Validation of links (described above) is also affected by exclude_docs . During mkdocs serve the messages explain the interaction, whereas during mkdocs build excluded files are as good as nonexistent. As an additional related change, if you have a need to have both README.md and index.md files in a directory but publish only one of them, you can now use this feature to explicitly ignore one of them and avoid warnings. See documentation . Context: #3224 Drafts \uf0c1 Dropped from version 1.6: The exclude_docs config no longer applies the \"drafts\" functionality for mkdocs serve . This was renamed to draft_docs . The exclude_docs config has another behavior: all excluded Markdown pages will still be previewable in mkdocs serve only, just with a \"DRAFT\" marker on top. Then they will of course be excluded from mkdocs build or gh-deploy . If you don't want mkdocs serve to have any special behaviors and instead want it to perform completely normal builds, use the new flag mkdocs serve --clean . See documentation . Context: #3224 mkdocs serve no longer exits after build errors \uf0c1 If there was an error (from the config or a plugin) during a site re-build, mkdocs serve used to exit after printing a stack trace. Now it will simply freeze the server until the author edits the files to fix the problem, and then will keep reloading. But errors on the first build still cause mkdocs serve to exit, as before. Context: #3255 Page titles will be deduced from any style of heading \uf0c1 MkDocs always had the ability to infer the title of a page (if it's not specified in the nav ) based on the first line of the document, if it had a <h1> heading that had to written starting with the exact character # . Now any style of Markdown heading is understood ( #1886 ). Due to the previous simplistic parsing, it was also impossible to use attr_list attributes in that first heading ( #3136 ). Now that is also fixed. Markdown extensions can use paths relative to the current document \uf0c1 This is aimed at extensions such as pymdownx.snippets or markdown_include.include : you can now specify their include paths to be relative to the currently rendered Markdown document, or relative to the docs_dir . Any other extension can of course also make use of the new !relative YAML tag. markdown_extensions: - pymdownx.snippets: base_path: !relative See documentation . Context: #2154 , #3258 <script> tags can specify type=\"module\" and other attributes \uf0c1 In extra_javascript , if you use the .mjs file extension or explicitly specify a type: module key, the script will be added with the type=\"module\" attribute. defer: true and async: true keys are also available. See updated documentation for extra_javascript . At first this is only supported in built-in themes, other themes need to follow up, see below. Context: #3237 Changes for theme developers (action required!) \uf0c1 Using the construct {% for script in extra_javascript %} is now fully obsolete because it cannot allow customizing the attributes of the <script> tag. It will keep working but blocks some of MkDocs' features. Instead, you now need to use config.extra_javascript (which was already the case for a while) and couple it with the new script_tag filter: {%- for script in config.extra_javascript %} {{ script | script_tag }} {%- endfor %} See documentation . Upgrades for plugin developers \uf0c1 Breaking change: config.extra_javascript is no longer a plain list of strings, but instead a list of ExtraScriptValue items. So you can no longer treat the list values as strings. If you want to keep compatibility with old versions, just always reference the items as str(item) instead. And you can still append plain strings to the list if you wish. See information about <script> tags above. Context: #3237 File has a new attribute inclusion . Its value is calculated from both the exclude_docs and not_in_nav configs, and implements their behavior. Plugins can read this value or write to it. New File instances by default follow whatever the configs say, but plugins can choose to make this decision explicitly, per file. When creating a File , one can now set a dest_uri directly, rather than having to update it (and other dependent attributes) after creation. Context A new config option was added - DictOfItems . Similarly to ListOfItems , it validates a mapping of config options that all have the same type. Keys are arbitrary but always strings. Context: #3242 A new function get_plugin_logger was added. In order to opt into a standardized way for plugins to log messages, please use the idiom: log = mkdocs.plugins.get_plugin_logger(__name__) ... log.info(\"Hello, world\") Context: #3245 SubConfig config option can be conveniently subclassed with a particular type of config specified. For example, class ExtraScript(SubConfig[ExtraScriptValue]): . To see how this is useful, search for this class in code. Context Bugfix: SubConfig had a bug where paths (from FilesystemObject options) were not made relative to the main config file as intended, because config_file_path was not properly inherited to it. This is now fixed. Context: #3265 Config members now have a way to avoid clashing with Python's reserved words. This is achieved by stripping a trailing underscore from each member's name. Example of adding an async boolean option that can be set by the user as async: true and read programmatically as config.async_ : class ExampleConfig(Config): async_ = Type(bool, default=False) Previously making a config key with a reserved name was impossible with new-style schemas. Context Theme has its attributes properly declared and gained new attributes theme.locale , theme.custom_dir . Some type annotations were made more precise. For example: The context parameter has gained the type TemplateContext ( TypedDict ). Context The classes Page , Section , Link now have a common base class StructureItem . Context Some methods stopped accepting Config and only accept MkDocsConfig as was originally intended. Context config.mdx_configs got a proper type. Context: #3229 Theme updates \uf0c1 Built-in themes mostly stopped relying on <script defer> . This may affect some usages of extra_javascript , mainly remove the need for custom handling of \"has the page fully loaded yet\". Context: #3237 \"mkdocs\" theme now has a styling for > blockquotes, previously they were not distinguished at all. Context: #3291 \"readthedocs\" theme was updated to v1.2.0 according to upstream, with improved styles for <kbd> and breadcrumb navigation. Context: #3058 Both built-in themes had their version of highlight.js updated to 11.8.0, and jQuery updated to 3.6.0. Bug fixes \uf0c1 Relative paths in the nav can traverse above the root \uf0c1 Regression in 1.2 - relative paths in the nav could no longer traverse above the site's root and were truncated to the root. Although such traversal is discouraged and produces a warning, this was a documented behavior. The behavior is now restored. Context: #2752 , #3010 MkDocs can accept the config from stdin \uf0c1 This can be used for config overrides on the fly. See updated section at the bottom of Configuration Inheritance . The command to use this is mkdocs build -f - . In previous versions doing this led to an error. Context New command line flags \uf0c1 mkdocs --no-color build disables color output and line wrapping. This option is also available through an environment variable NO_COLOR=true . Context: #3282 mkdocs build --no-strict overrides the strict config to false . Context: #3254 mkdocs build -f - (described directly above). mkdocs serve --clean (described above). mkdocs serve --dirty is the new name of mkdocs serve --dirtyreload . Deprecations \uf0c1 extra_javascript underwent a change that can break plugins in rare cases, and it requires attention from theme developers. See respective entries above. Python-Markdown was unpinned from <3.4 . That version is known to remove functionality. If you are affected by those removals, you can still choose to pin the version for yourself: Markdown <3.4 . Context: #3222 , #2892 mkdocs.utils.warning_filter now shows a warning about being deprecated. It does nothing since MkDocs 1.2. Consider get_plugin_logger or just logging under mkdocs.plugins.* instead. Context: #3008 Accessing the _vars attribute of a Theme is deprecated - just access the keys directly. Accessing the user_configs attribute of a Config is deprecated. Note: instead of config.user_configs[*]['theme']['custom_dir'] , please use the new attribute config.theme.custom_dir . Other small improvements; see commit log . Version 1.4.3 (2023-05-02) \uf0c1 Bugfix: for the hooks feature, modules no longer fail to load if using some advanced Python features like dataclasses ( #3193 ) Bugfix: Don't create None sitemap entries if the page has no populated URL - affects sites that exclude some files from navigation ( 07a297b ) \"readthedocs\" theme: Accessibility: add aria labels to Home logo ( #3129 ) and search inputs ( #3046 ) \"readthedocs\" theme now supports hljs_style: config, same as \"mkdocs\" theme ( #3199 ) Translations: Built-in themes now also support Indonesian language ( #3154 ) Fixed zh_CN translation ( #3125 ) tr_TR translation becomes just tr - usage should remain unaffected ( #3195 ) See commit log . Version 1.4.2 (2022-11-01) \uf0c1 Officially support Python 3.11 ( #3020 ) Tip: Simply upgrading to Python 3.11 can cut off 10-15% of your site's build time. Support multiple instances of the same plugin ( #3027 ) If a plugin is specified multiple times in the list under the plugins: config, that will create 2 (or more) instances of the plugin with their own config each. Previously this case was unforeseen and, as such, bugged. Now even though this works, by default a warning will appear from MkDocs anyway, unless the plugin adds a class variable supports_multiple_instances = True . Bugfix (regression in 1.4.1): Don't error when a plugin puts a plain string into warnings ( #3016 ) Bugfix: Relative links will always render with a trailing slash ( #3022 ) Previously under use_directory_urls , links from a sub-page to the main index page rendered as e.g. <a href=\"../..\"> even though in all other cases the links look like <a href=\"../../\"> . This caused unwanted behavior on some combinations of Web browsers and servers. Now this special-case bug was removed. Built-in \"mkdocs\" theme now also supports Norwegian language ( #3024 ) Plugin-related warnings look more readable ( #3016 ) See commit log . Version 1.4.1 (2022-10-15) \uf0c1 Support theme-namespaced plugin loading ( #2998 ) Plugins' entry points can be named as 'sometheme/someplugin'. That will have the following outcome: If the current theme is 'sometheme', the plugin 'sometheme/someplugin' will always be preferred over 'someplugin'. If the current theme isn't 'sometheme', the only way to use this plugin is by specifying plugins: [sometheme/someplugin] . One can also specify plugins: ['/someplugin'] instead of plugins: ['someplugin'] to definitely avoid the theme-namespaced plugin. Bugfix: mkdocs serve will work correctly with non-ASCII paths and redirects ( #3001 ) Windows: 'colorama' is now a dependency of MkDocs, to ensure colorful log output ( #2987 ) Plugin-related config options have more reliable validation and error reporting ( #2997 ) Translation sub-commands of setup.py were completely dropped. See documentation [1] [2] for their new replacements ( #2990 ) The 'mkdocs' package (wheel and source) is now produced by Hatch build system and pyproject.toml instead of setup.py ( #2988 ) Other small improvements; see commit log . Version 1.4.0 (2022-09-27) \uf0c1 Feature upgrades \uf0c1 Hooks ( #2978 ) \uf0c1 The new hooks: config allows you to add plugin-like event handlers from local Python files, without needing to set up and install an actual plugin. See documentation . edit_uri flexibility ( #2927 ) \uf0c1 There is a new edit_uri_template: config. It works like edit_uri but more generally covers ways to construct an edit URL. See documentation . Additionally, the edit_uri functionality will now fully work even if repo_url is omitted ( #2928 ) Upgrades for plugin developers \uf0c1 Note This release has big changes to the implementation of plugins and their configs. But, the intention is to have zero breaking changes in all reasonably common use cases. Or at the very least if a code fix is required, there should always be a way to stay compatible with older MkDocs versions. Please report if this release breaks something. Customize event order for plugin event handlers ( #2973 ) \uf0c1 Plugins can now choose to set a priority value for their event handlers. This can override the old behavior where for each event type, the handlers are called in the order that their plugins appear in the plugins config . If this is set, events with higher priority are called first. Events without a chosen priority get a default of 0. Events that have the same priority are ordered as they appear in the config. Recommended priority values: 100 \"first\", 50 \"early\", 0 \"default\", -50 \"late\", -100 \"last\". As different plugins discover more precise relations to each other, the values should be further tweaked. See documentation . New events that persist across builds in mkdocs serve ( #2972 ) \uf0c1 The new events are on_startup and on_shutdown . They run at the very beginning and very end of an mkdocs invocation. on_startup also receives information on how mkdocs was invoked (e.g. serve --dirtyreload ). See documentation . Replace File.src_path to not deal with backslashes ( #2930 ) \uf0c1 The property src_path uses backslashes on Windows, which doesn't make sense as it's a virtual path. To not make a breaking change, there's no change to how this property is used, but now you should: Use File.src_uri instead of File.src_path and File.dest_uri instead of File.dest_path . These consistently use forward slashes, and are now the definitive source that MkDocs itself uses. See source code . As a related tip: you should also stop using os.path.* or pathlib.Path() to deal with these paths, and instead use posixpath.* or pathlib.PurePosixPath() MkDocs is type-annotated, ready for use with mypy ( #2941 , #2970 ) \uf0c1 Type annotations for event handler methods ( #2931 ) \uf0c1 MkDocs' plugin event methods now have type annotations. You might have been adding annotations to events already, but now they will be validated to match the original. See source code and documentation . One big update is that now you should annotate method parameters more specifically as config: defaults.MkDocsConfig instead of config: base.Config . This not only makes it clear that it is the main config of MkDocs itself , but also provides type-safe access through attributes of the object (see next section). See source code and documentation . Rework ConfigOption schemas as class-based ( #2962 ) \uf0c1 When developing a plugin, the settings that it accepts used to be specified in the config_scheme variable on the plugin class. This approach is now soft-deprecated, and instead you should specify the config in a sub-class of base.Config . Old example: from mkdocs import plugins from mkdocs.config import base, config_options class MyPlugin(plugins.BasePlugin): config_scheme = ( ('foo', config_options.Type(int)), ('bar', config_options.Type(str, default='')), ) def on_page_markdown(self, markdown: str, *, config: base.Config, **kwargs): if self.config['foo'] < 5: if config['site_url'].startswith('http:'): return markdown + self.config['baz'] This code snippet actually has many mistakes but it will pass all type checks and silently run and even succeed in some cases. So, on to the new equivalent example, changed to new-style schema and attribute-based access: (Complaints from \"mypy\" added inline) from mkdocs import plugins from mkdocs.config import base, config_options as c class MyPluginConfig(base.Config): foo = c.Optional(c.Type(int)) bar = c.Type(str, default='') class MyPlugin(plugins.BasePlugin[MyPluginConfig]): def on_page_markdown(self, markdown: str, *, config: defaults.MkDocsConfig, **kwargs): if self.config.foo < 5: # Error, `foo` might be `None`, need to check first. if config.site_url.startswith('http:'): # Error, MkDocs' `site_url` also might be `None`. return markdown + self.config.baz # Error, no such attribute `baz`! This lets you notice the errors from a static type checker before running the code and fix them as such: class MyPlugin(plugins.BasePlugin[MyPluginConfig]): def on_page_markdown(self, markdown: str, *, config: defaults.MkDocsConfig, **kwargs): if self.config.foo is not None and self.config.foo < 5: # OK, `int < int` is valid. if (config.site_url or '').startswith('http:'): # OK, `str.startswith(str)` is valid. return markdown + self.config.bar # OK, `str + str` is valid. See documentation . Also notice that we had to explicitly mark the config attribute foo as Optional . The new-style config has all attributes marked as required by default, and specifying required=False or required=True is not allowed! New: config_options.Optional ( #2962 ) \uf0c1 Wrapping something into Optional is conceptually similar to \"I want the default to be None \" -- and you have to express it like that, because writing default=None doesn't actually work. Breaking change: the method BaseConfigOption.is_required() was removed. Use .required instead. ( #2938 ) And even the required property should be mostly unused now. For class-based configs, there's a new definition for whether an option is \"required\": It has no default, and It is not wrapped into config_options.Optional . New: config_options.ListOfItems ( #2938 ) \uf0c1 Defines a list of items that each must adhere to the same constraint. Kind of like a validated Type(list) Examples how to express a list of integers (with from mkdocs.config import config_options as c ): Description Code entry Required to specify foo = c.ListOfItems(c.Type(int)) Optional, default is [] foo = c.ListOfItems(c.Type(int), default=[]) Optional, default is None foo = c.Optional(c.ListOfItems(c.Type(int))) See more examples in documentation . Updated: config_options.SubConfig ( #2807 ) \uf0c1 SubConfig used to silently ignore all validation of its config options. Now you should pass validate=True to it or just use new class-based configs where this became the default. So, it can be used to validate a nested sub-dict with all keys pre-defined and value types strictly validated. See examples in documentation . Other changes to config options \uf0c1 URL 's default is now None instead of '' . This can still be checked for truthiness in the same way - if config.some_url: ( #2962 ) FilesystemObject is no longer abstract and can be used directly, standing for \"file or directory\" with optional existence checking ( #2938 ) Bug fixes: Fix SubConfig , ConfigItems , MarkdownExtensions to not leak values across different instances ( #2916 , #2290 ) SubConfig raises the correct kind of validation error without a stack trace ( #2938 ) Fix dot-separated redirect in config_options.Deprecated(moved_to) ( #2963 ) Tweaked logic for handling ConfigOption.default ( #2938 ) Deprecated config option classes: ConfigItems ( #2983 ), OptionallyRequired ( #2962 ), RepoURL ( #2927 ) Theme updates \uf0c1 Styles of admonitions in \"MkDocs\" theme ( #2981 ): Update colors to increase contrast Apply admonition styles also to <details> tag, to support Markdown extensions that provide it ( pymdownx.details , callouts ) Built-in themes now also support these languages: Russian ( #2976 ) Turkish (Turkey) ( #2946 ) Ukrainian ( #2980 ) Future compatibility \uf0c1 extra_css: and extra_javascript: warn if a backslash \\ is passed to them. ( #2930 , #2984 ) Show DeprecationWarning s as INFO messages. ( #2907 ) If any plugin or extension that you use relies on deprecated functionality of other libraries, it is at risk of breaking in the near future. Plugin developers should address these in a timely manner. Avoid a dependency on importlib_metadata starting from Python 3.10 ( #2959 ) Drop support for Python 3.6 ( #2948 ) Incompatible changes to public APIs \uf0c1 mkdocs.utils : create_media_urls and normalize_url warn if a backslash \\ is passed to them. ( #2930 ) is_markdown_file stops accepting case-insensitive variants such as .MD , which is how MkDocs build was already operating. ( #2912 ) Hard-deprecated: modified_time , reduce_list , get_html_path , get_url_path , is_html_file , is_template_file . ( #2912 ) Miscellaneous \uf0c1 If a plugin adds paths to watch in LiveReloadServer , it can now unwatch them. ( #2777 ) Bugfix (regression in 1.2): Support listening on an IPv6 address in mkdocs serve . ( #2951 ) Other small improvements; see commit log . Version 1.3.1 (2022-07-19) \uf0c1 Pin Python-Markdown version to <3.4, thus excluding its latest release that breaks too many external extensions ( #2893 ) When a Markdown extension fails to load, print its name and traceback ( #2894 ) Bugfix for \"readthedocs\" theme (regression in 1.3.0): add missing space in breadcrumbs ( #2810 ) Bugfix: don't complain when a file \"readme.md\" (lowercase) exists, it's not recognized otherwise ( #2852 ) Built-in themes now also support these languages: Italian ( #2860 ) Other small improvements; see commit log . Version 1.3.0 (2022-03-26) \uf0c1 Feature upgrades \uf0c1 ReadTheDocs theme updated from v0.4.1 to v1.0.0 according to upstream ( #2585 ) The most notable changes: New option logo : Rather than displaying the site_name in the title, one can specify a path to an image to display instead. New option anonymize_ip for Google Analytics. Dependencies were upgraded: jQuery upgraded to 3.6.0, Modernizr.js dropped, and others. See documentation of config options for the theme Built-in themes now also support these languages: German ( #2633 ) Persian (Farsi) ( #2787 ) Support custom directories to watch when running mkdocs serve ( #2642 ) MkDocs by default watches the docs directory and the config file. Now there is a way to add more directories to watch for changes, either via the YAML watch key or the command line flag --watch . Normally MkDocs never reaches into any other directories (so this feature shouldn't be necessary), but some plugins and extensions may do so. See documentation . New --no-history option for gh_deploy ( #2594 ) Allows to discard the history of commits when deploying, and instead replace it with one root commit Bug fixes \uf0c1 An XSS vulnerability when using the search function in built-in themes was fixed ( #2791 ) Setting the edit_uri option no longer erroneously adds a trailing slash to repo_url ( #2733 ) Miscellaneous \uf0c1 Breaking change: the pages config option that was deprecated for a very long time now causes an error when used ( #2652 ) To fix the error, just change from pages to nav . Performance optimization: during startup of MkDocs, code and dependencies of other commands will not be imported ( #2714 ) The most visible effect of this is that dependencies of mkdocs serve will not be imported when mkdocs build is used. Recursively validate nav ( #2680 ) Validation of the nested nav structure has been reworked to report errors early and reliably. Some edge cases have been declared invalid. Other small improvements; see commit log . Version 1.2.4 (2022-03-26) \uf0c1 Compatibility with Jinja2 3.1.0 ( #2800 ) Due to a breaking change in Jinja2, MkDocs would crash with the message AttributeError: module 'jinja2' has no attribute 'contextfilter' Version 1.2.3 (2021-10-12) \uf0c1 Built-in themes now also support these languages: Simplified Chinese ( #2497 ) Japanese ( #2525 ) Brazilian Portuguese ( #2535 ) Spanish ( #2545 , previously #2396 ) Third-party plugins will take precedence over built-in plugins with the same name ( #2591 ) Bugfix: Fix ability to load translations for some languages: core support ( #2565 ) and search plugin support with fallbacks ( #2602 ) Bugfix (regression in 1.2): Prevent directory traversal in the dev server ( #2604 ) Bugfix (regression in 1.2): Prevent webserver warnings from being treated as a build failure in strict mode ( #2607 ) Bugfix: Correctly print colorful messages in the terminal on Windows ( #2606 ) Bugfix: Python version 3.10 was displayed incorrectly in --version ( #2618 ) Other small improvements; see commit log . Version 1.2.2 (2021-07-18) \uf0c1 Bugfix (regression in 1.2): Fix serving files/paths with Unicode characters ( #2464 ) Bugfix (regression in 1.2): Revert livereload file watching to use polling observer ( #2477 ) This had to be done to reasonably support usages that span virtual filesystems such as non-native Docker and network mounts. This goes back to the polling approach, very similar to that was always used prior, meaning most of the same downsides with latency and CPU usage. Revert from 1.2: Remove the requirement of a site_url config and the restriction on use_directory_urls ( #2490 ) Bugfix (regression in 1.2): Don't require trailing slash in the URL when serving a directory index in mkdocs serve server ( #2507 ) Instead of showing a 404 error, detect if it's a directory and redirect to a path with a trailing slash added, like before. Bugfix: Fix gh_deploy with config-file in the current directory ( #2481 ) Bugfix: Fix reversed breadcrumbs in \"readthedocs\" theme ( #2179 ) Allow \"mkdocs.yaml\" as the file name when '--config' is not passed ( #2478 ) Stop treating \";\" as a special character in URLs: urlparse -> urlsplit ( #2502 ) Improve build performance for sites with many pages (partly already done in 1.2) ( #2407 ) Version 1.2.1 (2021-06-09) \uf0c1 Bugfix (regression in 1.2): Ensure 'gh-deploy' always pushes. Version 1.2 (2021-06-04) \uf0c1 Major Additions to Version 1.2 \uf0c1 Support added for Theme Localization ( #2299 ) \uf0c1 The mkdocs and readthedocs themes now support language localization using the theme.locale parameter, which defaults to en (English). The only other supported languages in this release are fr (French) and es (Spanish). For details on using the provided translations, see the user guide . Note that translation will not happen by default. Users must first install the necessary dependencies with the following command: pip install 'mkdocs[i18n]' Translation contributions are welcome and detailed in the Translation Guide . Developers of third party themes may want to review the relevant section of the Theme Development Guide . Contributors who are updating the templates to the built-in themes should review the Contributing Guide . The lang setting of the search plugin now defaults to the language specified in theme.locale . Support added for Environment Variables in the configuration file ( #1954 ) \uf0c1 Environments variables may now be specified in the configuration file with the !ENV tag. The value of the variable will be parsed by the YAML parser and converted to the appropriate type. somekey: !ENV VAR_NAME otherkey: !ENV [VAR_NAME, FALLBACK_VAR, 'default value'] See Environment Variables in the Configuration documentation for details. Support added for Configuration Inheritance ( #2218 ) \uf0c1 A configuration file may now inherit from a parent configuration file. In the primary file set the INHERIT key to the relative path of the parent file. INHERIT: path/to/base.yml The two files will then be deep merged. See Configuration Inheritance for details. Update gh-deploy command ( #2170 ) \uf0c1 The vendored (and modified) copy of ghp_import has been replaced with a dependency on the upstream library. As of version 1.0.0, ghp-import includes a Python API which makes it possible to call directly. MkDocs can now benefit from recent bug fixes and new features, including the following: A .nojekyll file is automatically included when deploying to GitHub Pages. The --shell flag is now available, which reportedly works better on Windows. Git author and committer environment variables should be respected ( #1383 ). Rework auto-reload and HTTP server for mkdocs serve ( #2385 ) \uf0c1 mkdocs serve now uses a new underlying server + file watcher implementation, based on http.server from standard library and watchdog . It provides similar functionality to the previously used livereload library (which is now dropped from dependencies, along with tornado ). This makes reloads more responsive and consistent in terms of timing. Multiple rapid file changes no longer cause the site to repeatedly rebuild (issue #2061 ). Almost every aspect of the server is slightly different, but actual visible changes are minor. The logging outputs are only similar to the old ones. Degradations in behavior are not expected, and should be reported if found. Offset the local site root according to the sub-path of the site_url ( #2424 ) \uf0c1 When using mkdocs serve and having the site_url specified as e.g. http://example.org/sub/path/ , now the root of the locally served site becomes http://127.0.0.1:8000/sub/path/ and all document paths are offset accordingly. A build_error event was added ( #2103 ) \uf0c1 Plugin developers can now use the on_build_error hook to execute code when an exception is raised while building the site. See on_build_error in the Plugins documentation for details. Three new exceptions: BuildError PluginError and Abort ( #2103 ) \uf0c1 MkDocs now has tree new exceptions defined in mkdocs.exceptions : BuildError , PluginError , and Abort : PluginError can be raised from a plugin to stop the build and log an error message without traceback . BuildError should not be used by third-party plugins developers and is reserved for internal use only. Abort is used internally to abort the build and display an error without a traceback. See Handling errors in the Plugins documentation for details. Search Indexing Strategy configuration \uf0c1 Users can now specify which strategy they wish to use when indexing their site for search. A user can select between the following options: full : Adds page title, section headings, and full page text to the search index. sections : Adds page titles and section headings only to the search index. titles : Adds only the page titles to the search index. See Search Indexing in the configuration documentation for details. Backward Incompatible Changes in 1.2 \uf0c1 The site_url configuration option is now required . If it is not set, a warning will be issued. In a future release an error will be raised ( #2189 ). The use_directory_urls configuration option will be forced to false if site_url is set to an empty string. In that case, if use_directory_urls is not explicitly set to false , a warning will be issued ( #2189 ). Note This was reverted in release 1.2.2 The google_analytics configuration option is deprecated as Google appears to be phasing it out in favor of its new Google Analytics 4 property. See the documentation for your theme for alternatives which can be configured as part of your theme configuration. For example, the mkdocs and readthedocs themes have each added a new theme.analytics.gtag configuration option which uses the new Google Analytics 4 property. See Google's documentation on how to Upgrade to a Google Analytics 4 property . Then set theme.analytics.gtag to the \"G-\" ID and delete the google_analytics configuration option which contains a \"UA-\" ID. So long as the old \"UA-\" ID and new \"G-\" ID are properly linked in your Google account, and you are using the \"G-\" ID, the data will be made available in both the old and new formats by Google Analytics. See #2252 . A theme's files are now excluded from the list of watched files by default when using the --livereload server. This new default behavior is what most users need and provides better performance when editing site content. Theme developers can enable the old behavior with the --watch-theme option. ( #2092 ). The mkdocs theme now removes the sidebar when printing a page. This frees up horizontal space for better rendering of content like tables ( #2193 ). The mkdocs.config.DEFAULT_SCHEMA global variable has been replaced with the function mkdocs.config.defaults.get_schema() , which ensures that each instance of the configuration is unique ( #2289 ). The mkdocs.utils.warning_filter is deprecated and now does nothing. Plugins should remove any reference to is as it may be deleted in a future release. To ensure any warnings get counted, simply log them to the mkdocs log (i.e.: mkdocs.plugins.pluginname ). The on_serve event (which receives the server object and the builder function) is affected by the server rewrite. server is now a mkdocs.livereload.LiveReloadServer instead of livereload.server.Server . The typical action that plugins can do with these is to call server.watch(some_dir, builder) , which basically adds that directory to watched directories, causing the site to be rebuilt on file changes. That still works, but passing any other function to watch is deprecated and shows a warning. This 2nd parameter is already optional, and will accept only this exact builder function just for compatibility. The python method of the plugins.search.prebuild_index configuration option is pending deprecation as of version 1.2. It is expected that in version 1.3 it will raise a warning if used and in version 1.4 it will raise an error. Users are encouraged to use an alternate method to generate a prebuilt index for search. The lunr and lunr[languages] dependencies are no longer installed by default. The dependencies are only needed for the rare user who pre-builds the search index and uses the python option, which is now pending deprecation. If you use this feature, then you will need to manually install lunr and lunr[languages] . A warning is issued if the dependencies are needed but not installed. Other Changes and Additions to Version 1.2 \uf0c1 Bugfix: Properly process navigation child items in _get_by_type when filtering for sections ( #2203 ). Official support for Python 3.9 has been added and support for Python 3.5 has been dropped. Bugfix: Fixes an issue that would result in a partially cut-off navigation item in the ReadTheDocs theme ( #2297 ). Structure Files object now has a remove method to help plugin developers manipulate the Files tree. The corresponding src_paths has become a property to accommodate this possible dynamic behavior. See #2305 . Updated highlight.js to 10.5.0. See #2313 . Bugfix: Search plugin now works with Japanese language. See #2178 . Documentation has been refactored ( #1629 ). Restore styling of tables in the readthedocs theme ( #2028 ). Ensure site_url ends with a slash ( #1785 ). Correct documentation of pages template context variable ( #1736 ). The lunr dependency has been updated to 0.5.9, and lunr.js to the corresponding 2.3.9 version ( #2306 ). Color is now used in log messages to identify errors, warnings and debug messages. Bugfix: Identify homepage when use_directory_urls is False ( #2362 ). Version 1.1.2 (2020-05-14) \uf0c1 Bugfix: Normalize IP addresses and change unsupported address error to a warning ( #2108 ). Version 1.1.1 (2020-05-12) \uf0c1 Bugfix: Allow compressed sitemap to be deterministic by supporting the SOURCE_DATE_EPOCH environment variable ( #2100 ). Bugfix: Use README.md as index.html even if use_directory_urls is false ( #2081 ). Bugfix: Ignore links which start with a backslash ( #1680 ). Bugfix: Pass builder to the on_serve event so that it can be passed to server.watch by plugins ( #1952 ). Bugfix: Use lunr[languages]==0.5.8 to avoid nltk incompatibilities ( #2062 ). Bugfix: Ensure wheel is Python 3 only ( #2021 ). Bugfix: Clean up dev_addr validation and disallow 0.0.0.0 ( #2022 ). Add support for min_search_length parameter for search plugin ( #2014 ). Bugfix: readthedocs theme code colors ( #2027 ). Version 1.1 (2020-02-22) \uf0c1 Major Additions to Version 1.1 \uf0c1 Support for Lunr.py as prebuild_index engine \uf0c1 Mkdocs now supports pre-building indices using Lunr.py , a pure Python implementation of Lunr.js, allowing the user to avoid installing a NodeJS environment if so desired. For more information please read the prebuild_index documentation . readthedocs theme updated with upstream ( #588 and #1374 ) \uf0c1 The readthedocs theme now more closely matches the upstream Sphinx theme (version 0.4.1). A number of new theme configuration settings were added which mirror the upstream configuration options. See the theme documentation for details. Update mkdocs theme to Bootswatch 4.1.3 ( #1563 ) \uf0c1 The mkdocs theme now supports all the features of Bootswatch 4.1 . Additionally, 2 filenames were changed in this update. If you are using a theme which inherits from the mkdocs theme, the theme developer may need to update these filenames as follows. css/bootstrap-custom.min.css => css/bootstrap.min.css js/bootstrap-3.0.3.min.js => js/bootstrap.min.js Improved configuration support on the command line ( #1401 ) \uf0c1 The build , serve , and gh-deploy subcommands now support flags to control whether directory URLs should be created: --use-directory-urls / --no-directory-urls . In addition, the gh-deploy subcommand now supports all the configuration options that build and serve do, adding --strict , --theme , --theme-dir , and --site-dir . Updated lunr-languages support ( #1729 ) \uf0c1 The lunr-languages plugin has been updated to 1.4.0, adding support for Arabic ( ar ) and Vietnamese ( vi ) languages. In addition, the Dutch and Japanese language codes have been changed to their standard values: nl and ja , respectively. The old language codes ( du and jp ) remain as aliases but may be removed in a future version of MkDocs. Other Changes and Additions to Version 1.1 \uf0c1 Bugfix: Ensure nested dot files in themes are ignored and document behavior ( #1981 ). Update minimum dependency to Markdown 3.2.1. Updated minimum dependency to Jinja 2.10.1 to address security concerns ( #1780 ). Update to lunr.js 2.3.8 ( #1989 ). Add support for Python 3.8. Drop support for Python 3.4. Drop support for Python 2.7. MkDocs is PY3 only now ( #1926 ). Bugfix: Select appropriate asyncio event loop on Windows for Python 3.8+ ( #1885 ). Bugfix: Ensure nested index pages do not get identified as the homepage ( #1919 ). Bugfix: Properly identify deployment version ( #1879 ). Bugfix: Properly build ValidationError message for custom_dir ( #1849 ). Bugfix: Exclude Markdown files and READMEs from theme ( #1766 ). Bugfix: Account for encoded URLs ( #1670 ). Bugfix: Ensure theme files do not override docs_dir files ( #1671 ). Bugfix: Do not normalize URL fragments ( #1655 ). Bugfix: Skip external URLs in sitemap.xml ( #1742 ). Bugfix: Ensure theme files do not override docs_dir files on Windows ( #1876 ) Add canonical tag to readthedocs theme ( #1669 ). Improved error message for when git is not available. Add support for nav_style theme option for the mkdocs theme ( #1930 ). Bugfix: Long/nested dropdowns now behave more consistently for the mkdocs theme ( #1234 ). Bugfix: Multi-row nav headers in the mkdocs theme no longer obscure the document content ( #716 ). Add support for navigation_depth theme option for the mkdocs theme ( #1970 ). level attribute in page.toc items is now 1-indexed to match the level in <hN> tags ( #1970 ). Version 1.0.4 (2018-09-07) \uf0c1 Bugfix: Ignore absolute links in Markdown ( #1621 ). Version 1.0.3 (2018-08-29) \uf0c1 Bugfix: Warn on relative paths in navigation ( #1604 ). Bugfix: Handle empty theme_config.yml files correctly ( #1602 ). Version 1.0.2 (2018-08-22) \uf0c1 Bugfix: Provide absolute base_url to error templates ( #1598 ). Version 1.0.1 (2018-08-13) \uf0c1 Bugfix: Prevent page reload when [Enter] is pressed in search box ( #1589 ). Bugfix: Avoid calling search until all assets are ready ( #1584 ). Bugfix: Exclude README.md if index.md is present ( #1580 ). Bugfix: Fix readthedocs theme navigation bug with homepage ( #1576 ). Version 1.0 (2018-08-03) \uf0c1 Major Additions to Version 1.0 \uf0c1 Internal Refactor of Pages, Files, and Navigation \uf0c1 Internal handling of pages, files and navigation has been completely refactored. The changes included in the refactor are summarized below. Support for hidden pages. All Markdown pages are now included in the build regardless of whether they are included in the navigation configuration ( #699 ). The navigation can now include links to external sites ( #989 #1373 & #1406 ). Page data (including titles) is properly determined for all pages before any page is rendered ( #1347 ). Automatically populated navigation now sorts index pages to the top. In other words, The index page will be listed as the first child of a directory, while all other documents are sorted alphanumerically by file name after the index page ( #73 & #1042 ). A README.md file is now treated as an index file within a directory and will be rendered to index.html ( #608 ). The URLs for all files are computed once and stored in a files collection. This ensures all internal links are always computed correctly regardless of the configuration. This also allows all internal links to be validated, not just links to other Markdown pages. ( #842 & #872 ). A new url template filter smartly ensures all URLs are relative to the current page ( #1526 ). An on_files plugin event has been added, which could be used to include files not in the docs_dir , exclude files, redefine page URLs (i.e. implement extensionless URLs), or to manipulate files in various other ways. Backward Incompatible Changes \uf0c1 As part of the internal refactor, a number of backward incompatible changes have been introduced, which are summarized below. URLs have changed when use_directory_urls is False \uf0c1 Previously, all Markdown pages would be have their filenames altered to be index pages regardless of how the use_directory_urls setting was configured. However, the path munging is only needed when use_directory_urls is set to True (the default). The path mangling no longer happens when use_directory_urls is set to False , which will result in different URLs for all pages that were not already index files. As this behavior only effects a non-default configuration, and the most common user-case for setting the option to False is for local file system ( file:// ) browsing, its not likely to effect most users. However, if you have use_directory_urls set to False for a MkDocs site hosted on a web server, most of your URLs will now be broken. As you can see below, the new URLs are much more sensible. Markdown file Old URL New URL index.md index.html index.html foo.md foo/index.html foo.html foo/bar.md foo/bar/index.html foo/bar.html Note that there has been no change to URLs or file paths when use_directory_urls is set to True (the default), except that MkDocs more consistently includes an ending slash on all internally generated URLs. The pages configuration setting has been renamed to nav \uf0c1 The pages configuration setting is deprecated and will issue a warning if set in the configuration file. The setting has been renamed nav . To update your configuration, simply rename the setting to nav . In other words, if your configuration looked like this: pages: - Home: index.md - User Guide: user-guide.md Simply edit the configuration as follows: nav: - Home: index.md - User Guide: user-guide.md In the current release, any configuration which includes a pages setting, but no nav setting, the pages configuration will be copied to nav and a warning will be issued. However, in a future release, that may no longer happen. If both pages and nav are defined, the pages setting will be ignored. Template variables and base_url \uf0c1 In previous versions of MkDocs some URLs expected the base_url template variable to be prepended to the URL and others did not. That inconsistency has been removed in that no URLs are modified before being added to the template context. For example, a theme template might have previously included a link to the site_name as: <a href=\"{{ nav.homepage.url }}\">{{ config.site_name }}</a> And MkDocs would magically return a URL for the homepage which was relative to the current page. That \"magic\" has been removed and the url template filter should be used: <a href=\"{{ nav.homepage.url|url }}\">{{ config.site_name }}</a> This change applies to any navigation items and pages, as well as the page.next_page and page.previous_page attributes. For the time being, the extra_javascript and extra_css variables continue to work as previously (without the url template filter), but they have been deprecated and the corresponding configuration values ( config.extra_javascript and config.extra_css respectively) should be used with the filter instead. {% for path in config.extra_css %} <link href=\"{{ path|url }}\" rel=\"stylesheet\"> {% endfor %} Note that navigation can now include links to external sites. Obviously, the base_url should not be prepended to these items. However, the url template filter is smart enough to recognize the URL is absolute and does not alter it. Therefore, all navigation items can be passed to the filter and only those that need to will be altered. {% for nav_item in nav %} <a href=\"{{ nav_item.url|url }}\">{{ nav_item.title }}</a> {% endfor %} Path Based Settings are Relative to Configuration File ( #543 ) \uf0c1 Previously any relative paths in the various configuration options were resolved relative to the current working directory. They are now resolved relative to the configuration file. As the documentation has always encouraged running the various MkDocs commands from the directory that contains the configuration file (project root), this change will not affect most users. However, it will make it much easier to implement automated builds or otherwise run commands from a location other than the project root. Simply use the -f/--config-file option and point it at the configuration file: mkdocs build --config-file /path/to/my/config/file.yml As previously, if no file is specified, MkDocs looks for a file named mkdocs.yml in the current working directory. Added support for YAML Meta-Data ( #1542 ) \uf0c1 Previously, MkDocs only supported MultiMarkdown style meta-data, which does not recognize different data types and is rather limited. MkDocs now also supports YAML style meta-data in Markdown documents. MkDocs relies on the the presence or absence of the deliminators ( --- or ... ) to determine whether YAML style meta-data or MultiMarkdown style meta-data is being used. Previously MkDocs would recognize MultiMarkdown style meta-data between the deliminators. Now, if the deliminators are detected, but the content between the deliminators is not valid YAML meta-data, MkDocs does not attempt to parse the content as MultiMarkdown style meta-data. Therefore, MultiMarkdown's style meta-data must not include the deliminators. See the MultiMarkdown style meta-data documentation for details. Prior to version 0.17, MkDocs returned all meta-data values as a list of strings (even a single line would return a list of one string). In version 0.17, that behavior was changed to return each value as a single string (multiple lines were joined), which some users found limiting (see #1471 ). That behavior continues for MultiMarkdown style meta-data in the current version. However, YAML style meta-data supports the full range of \"safe\" YAML data types. Therefore, it is recommended that any complex meta-data make use of the YAML style (see the YAML style meta-data documentation for details). In fact, a future version of MkDocs may deprecate support for MultiMarkdown style meta-data. Refactor Search Plugin \uf0c1 The search plugin has been completely refactored to include support for the following features: Use a web worker in the browser with a fallback ( #1396 ). Optionally pre-build search index locally ( #859 & #1061 ). Upgrade to lunr.js 2.x ( #1319 ). Support search in languages other than English ( #826 ). Allow the user to define the word separators ( #867 ). Only run searches for queries of length > 2 ( #1127 ). Remove dependency on require.js ( #1218 ). Compress the search index ( #1128 ). Users can review the configuration options available and theme authors should review how search and themes interact. theme_dir Configuration Option fully Deprecated \uf0c1 As of version 0.17, the custom_dir option replaced the deprecated theme_dir option. If users had set the theme_dir option, MkDocs version 0.17 copied the value to the theme.custom_dir option and a warning was issued. As of version 1.0, the value is no longer copied and an error is raised. Other Changes and Additions to Version 1.0 \uf0c1 Keyboard shortcuts changed to not conflict with commonly used accessibility shortcuts ( #1502 .) User friendly YAML parse errors ( #1543 ). Officially support Python 3.7. A missing theme configuration file now raises an error. Empty extra_css and extra_javascript settings no longer raise a warning. Add highlight.js configuration settings to built-in themes ( #1284 ). Close search modal when result is selected ( #1527 ). Add a level attribute to AnchorLinks ( #1272 ). Add MkDocs version check to gh-deploy script ( #640 ). Improve Markdown extension error messages. ( #782 ). Drop official support for Python 3.3 and set tornado>=5.0 ( #1427 ). Add support for GitLab edit links ( #1435 ). Link to GitHub issues from release notes ( #644 ). Expand {sha} and {version} in gh-deploy commit message ( #1410 ). Compress sitemap.xml ( #1130 ). Defer loading JS scripts ( #1380 ). Add a title attribute to the search input ( #1379 ). Update RespondJS to latest version ( #1398 ). Always load Google Analytics over HTTPS ( #1397 ). Improve scrolling frame rate ( #1394 ). Provide more version info. ( #1393 ). Refactor writing-your-docs.md ( #1392 ). Workaround Safari bug when zooming to < 100% ( #1389 ). Remove addition of clicky class to body and animations. ( #1387 ). Prevent search plugin from re-injecting extra_javascript files ( #1388 ). Refactor copy_media_files util function for more flexibility ( #1370 ). Remove PyPI Deployment Docs ( #1360 ). Update links to Python-Markdown library ( #1360 ). Document how to generate manpages for MkDocs commands ( #686 ). Version 0.17.5 (2018-07-06) \uf0c1 Bugfix: Fix Python 3.7 and PEP 479 incompatibility ( #1518 ). Version 0.17.4 (2018-06-08) \uf0c1 Bugfix: Add multi-level nesting support to sitemap.xml ( #1482 ). Version 0.17.3 (2018-03-07) \uf0c1 Bugfix: Set dependency tornado>=4.1,<5.0 due to changes in 5.0 ( #1428 ). Version 0.17.2 (2017-11-15) \uf0c1 Bugfix: Correct extra_* config setting regressions ( #1335 & #1336 ). Version 0.17.1 (2017-10-30) \uf0c1 Bugfix: Support repo_url with missing ending slash. ( #1321 ). Bugfix: Add length support to mkdocs.toc.TableOfContext ( #1325 ). Bugfix: Add some theme specific settings to the search plugin for third party themes ( #1316 ). Bugfix: Override site_url with dev_addr on local server ( #1317 ). Version 0.17.0 (2017-10-19) \uf0c1 Major Additions to Version 0.17.0 \uf0c1 Plugin API. ( #206 ) \uf0c1 A new Plugin API has been added to MkDocs which allows users to define their own custom behaviors. See the included documentation for a full explanation of the API. The previously built-in search functionality has been removed and wrapped in a plugin (named \"search\") with no changes in behavior. When MkDocs builds, the search index is now written to search/search_index.json instead of mkdocs/search_index.json . If no plugins setting is defined in the config, then the search plugin will be included by default. See the configuration documentation for information on overriding the default. Theme Customization. ( #1164 ) \uf0c1 Support had been added to provide theme specific customizations. Theme authors can define default options as documented in Theme Configuration . A theme can now inherit from another theme, define various static templates to be rendered, and define arbitrary default variables to control behavior in the templates. The theme configuration is defined in a configuration file named mkdocs_theme.yml which should be placed at the root of your template files. A warning will be raised if no configuration file is found and an error will be raised in a future release. Users can override those defaults under the theme configuration option of their mkdocs.yml configuration file, which now accepts nested options. One such nested option is the custom_dir option, which replaces the now deprecated theme_dir option. If users had previously set the theme_dir option, a warning will be issued, with an error expected in a future release. If a configuration previously defined a theme_dir like this: theme: mkdocs theme_dir: custom Then the configuration should be adjusted as follows: theme: name: mkdocs custom_dir: custom See the theme configuration option documentation for details. Previously deprecated Template variables removed. ( #1168 ) \uf0c1 Page Template \uf0c1 The primary entry point for page templates has been changed from base.html to main.html . This allows base.html to continue to exist while allowing users to override main.html and extend base.html . For version 0.16, base.html continued to work if no main.html template existed, but it raised a deprecation warning. In version 1.0, a build will fail if no main.html template exists. Context Variables \uf0c1 Page specific variable names in the template context have been refactored as defined in Custom Themes . The old variable names issued a warning in version 0.16, but have been removed in version 1.0. Any of the following old page variables should be updated to the new ones in user created and third-party templates: Old Variable Name New Variable Name current_page page page_title page.title content page.content toc page.toc meta page.meta canonical_url page.canonical_url previous_page page.previous_page next_page page.next_page Additionally, a number of global variables have been altered and/or removed and user created and third-party templates should be updated as outlined below: Old Variable Name New Variable Name or Expression current_page page include_nav nav|length>1 include_next_prev (page.next_page or page.previous_page) site_name config.site_name site_author config.site_author page_description config.site_description repo_url config.repo_url repo_name config.repo_name site_url config.site_url copyright config.copyright google_analytics config.google_analytics homepage_url nav.homepage.url favicon {{ base_url }}/img/favicon.ico Auto-Populated extra_css and extra_javascript Fully Deprecated. ( #986 ) \uf0c1 In previous versions of MkDocs, if the extra_css or extra_javascript config settings were empty, MkDocs would scan the docs_dir and auto-populate each setting with all of the CSS and JavaScript files found. On version 0.16 this behavior was deprecated and a warning was issued. In 0.17 any unlisted CSS and JavaScript files will not be included in the HTML templates, however, a warning will be issued. In other words, they will still be copied to the site-dir , but they will not have any effect on the theme if they are not explicitly listed. All CSS and JavaScript files in the docs_dir should be explicitly listed in the extra_css or extra_javascript config settings going forward. Other Changes and Additions to Version 0.17.0 \uf0c1 Add \"edit Link\" support to MkDocs theme ( #1129 ) Open files with utf-8-sig to account for BOM ( #1186 ) Symbolic links are now followed consistently ( #1134 ) Support for keyboard navigation shortcuts added to included themes ( #1095 ) Some refactoring and improvements to config_options ( #1296 ) Officially added support for Python 3.6 ( #1296 ) 404 Error page added to readthedocs theme ( #1296 )) Internal refactor of Markdown processing ( #713 ) Removed special error message for mkdocs-bootstrap and mkdocs-bootswatch themes ( #1168 ) The legacy pages config is no longer supported ( #1168 ) The deprecated json command has been removed ( #481 ) Support for Python 2.6 has been dropped ( #165 ) File permissions are no longer copied during build ( #1292 ) Support query and fragment strings in edit_uri ( #1224 & #1273 ) Version 0.16.3 (2017-04-04) \uf0c1 Fix error raised by autoscrolling in the readthedocs theme ( #1177 ) Fix a few documentation typos ( #1181 & #1185 ) Fix a regression to livereload server introduced in 0.16.2 ( #1174 ) Version 0.16.2 (2017-03-13) \uf0c1 System root ( / ) is not a valid path for site_dir or docs_dir ( #1161 ) Refactor readthedocs theme navigation ( #1155 & #1156 ) Add support to dev server to serve custom error pages ( #1040 ) Ensure nav.homepage.url is not blank on error pages ( #1131 ) Increase livereload dependency to 2.5.1 ( #1106 ) Version 0.16.1 (2016-12-22) \uf0c1 Ensure scrollspy behavior does not affect nav bar ( #1094 ) Only \"load\" a theme when it is explicitly requested by the user ( #1105 ) Version 0.16 (2016-11-04) \uf0c1 Major Additions to Version 0.16.0 \uf0c1 Template variables refactored. ( #874 ) \uf0c1 Page Context \uf0c1 Page specific variable names in the template context have been refactored as defined in Custom Themes . The old variable names will issue a warning but continue to work for version 0.16, but may be removed in a future version. Any of the following old page variables should be updated to the new ones in user created and third-party templates: Old Variable Name New Variable Name current_page page page_title page.title content page.content toc page.toc meta page.meta canonical_url page.canonical_url previous_page page.previous_page next_page page.next_page Global Context \uf0c1 Additionally, a number of global variables have been altered and/or deprecated and user created and third-party templates should be updated as outlined below: Previously, the global variable include_nav was altered programmatically based on the number of pages in the nav. The variable will issue a warning but continue to work for version 0.16, but may be removed in a future version. Use {% if nav|length>1 %} instead. Previously, the global variable include_next_prev was altered programmatically based on the number of pages in the nav. The variable will issue a warning but continue to work for version 0.16, but may be removed in a future version. Use {% if page.next_page or page.previous_page %} instead. Previously the global variable page_description was altered programmatically based on whether the current page was the homepage. Now it simply maps to config['site_description'] . Use {% if page.is_homepage %} in the template to conditionally change the description. The global variable homepage_url maps directly to nav.homepage.url and is being deprecated. The variable will issue a warning but continue to work for version 0.16, but may be removed in a future version. Use nav.homepage.url instead. The global variable favicon maps to the configuration setting site_favicon . Both the template variable and the configuration setting are being deprecated and will issue a warning but continue to work for version 0.16, and may be removed in a future version. Use {{ base_url }}/img/favicon.ico in your template instead. Users can simply save a copy of their custom favicon icon to img/favicon.ico in either their docs_dir or theme_dir . A number of variables map directly to similarly named variables in the config . Those variables are being deprecated and will issue a warning but continue to work for version 0.16, but may be removed in a future version. Use config.var_name instead, where var_name is the name of one of the configuration variables. Below is a summary of all of the changes made to the global context: Old Variable Name New Variable Name or Expression current_page page include_nav nav|length>1 include_next_prev (page.next_page or page.previous_page) site_name config.site_name site_author config.site_author page_description config.site_description repo_url config.repo_url repo_name config.repo_name site_url config.site_url copyright config.copyright google_analytics config.google_analytics homepage_url nav.homepage.url favicon {{ base_url }}/img/favicon.ico Increased Template Customization. ( #607 ) \uf0c1 The built-in themes have been updated by having each of their many parts wrapped in template blocks which allow each individual block to be easily overridden using the theme_dir config setting. Without any new settings, you can use a different analytics service, replace the default search function, or alter the behavior of the navigation, among other things. See the relevant documentation for more details. To enable this feature, the primary entry point for page templates has been changed from base.html to main.html . This allows base.html to continue to exist while allowing users to override main.html and extend base.html . For version 0.16, base.html will continue to work if no main.html template exists, but it is deprecated and will raise a warning. In version 1.0, a build will fail if no main.html template exists. Any custom and third party templates should be updated accordingly. The easiest way for a third party theme to be updated would be to simply add a main.html file which only contains the following line: {% extends \"base.html\" %} That way, the theme contains the main.html entry point, and also supports overriding blocks in the same manner as the built-in themes. Third party themes are encouraged to wrap the various pieces of their templates in blocks in order to support such customization. Auto-Populated extra_css and extra_javascript Deprecated. ( #986 ) \uf0c1 In previous versions of MkDocs, if the extra_css or extra_javascript config settings were empty, MkDocs would scan the docs_dir and auto-populate each setting with all of the CSS and JavaScript files found. This behavior is deprecated and a warning will be issued. In the next release, the auto-populate feature will stop working and any unlisted CSS and JavaScript files will not be included in the HTML templates. In other words, they will still be copied to the site-dir , but they will not have any effect on the theme if they are not explicitly listed. All CSS and JavaScript files in the docs_dir should be explicitly listed in the extra_css or extra_javascript config settings going forward. Support for dirty builds. ( #990 ) \uf0c1 For large sites the build time required to create the pages can become problematic, thus a \"dirty\" build mode was created. This mode simply compares the modified time of the generated HTML and source markdown. If the markdown has changed since the HTML then the page is re-constructed. Otherwise, the page remains as is. This mode may be invoked in both the mkdocs serve and mkdocs build commands: mkdocs serve --dirtyreload mkdocs build --dirty It is important to note that this method for building the pages is for development of content only, since the navigation and other links do not get updated on other pages. Stricter Directory Validation \uf0c1 Previously, a warning was issued if the site_dir was a child directory of the docs_dir . This now raises an error. Additionally, an error is now raised if the docs_dir is set to the directory which contains your config file rather than a child directory. You will need to rearrange you directory structure to better conform with the documented layout . Other Changes and Additions to Version 0.16.0 \uf0c1 Bugfix: Support gh-deploy command on Windows with Python 3 ( #722 ) Bugfix: Include .woff2 font files in Python package build ( #894 ) Various updates and improvements to Documentation Home Page/Tutorial ( #870 ) Bugfix: Support livereload for config file changes ( #735 ) Bugfix: Non-media template files are no longer copied with media files ( #807 ) Add a flag (-e/--theme-dir) to specify theme directory with the commands mkdocs build and mkdocs serve ( #832 ) Fixed issues with Unicode file names under Windows and Python 2. ( #833 ) Improved the styling of in-line code in the MkDocs theme. ( #718 ) Bugfix: convert variables to JSON when being passed to JavaScript ( #850 ) Updated the ReadTheDocs theme to match the upstream font sizes and colors more closely. ( #857 ) Fixes an issue with permalink markers showing when the mouse was far above them ( #843 ) Bugfix: Handle periods in directory name when automatically creating the pages config. ( #728 ) Update searching to Lunr 0.7, which comes with some performance enhancements for larger documents ( #859 ) Bugfix: Support SOURCE_DATE_EPOCH environment variable for \"reproducible\" builds ( #938 ) Follow links when copying media files ( #869 ). Change \"Edit on...\" links to point directly to the file in the source repository, rather than to the root of the repository ( #975 ), configurable via the new edit_uri setting. Bugfix: Don't override config value for strict mode if not specified on CLI ( #738 ). Add a --force flag to the gh-deploy command to force the push to the repository ( #973 ). Improve alignment for current selected menu item in readthedocs theme ( #888 ). http://user.github.io/repo => https://user.github.io/repo/ ( #1029 ). Improve installation instructions ( #1028 ). Account for wide tables and consistently wrap inline code spans ( #834 ). Bugfix: Use absolute URLs in nav & media links from error templates ( #77 ). Version 0.15.3 (2016-02-18) \uf0c1 Improve the error message the given theme can't be found. Fix an issue with relative symlinks ( #639 ) Version 0.15.2 (2016-02-08) \uf0c1 Fix an incorrect warning that states external themes will be removed from MkDocs . Version 0.15.1 (2016-01-30) \uf0c1 Lower the minimum supported Click version to 3.3 for package maintainers. ( #763 ) Version 0.15.0 (2016-01-21) \uf0c1 Major Additions to Version 0.15.0 \uf0c1 Add support for installable themes \uf0c1 MkDocs now supports themes that are distributed via Python packages. With this addition, the Bootstrap and Bootswatch themes have been moved to external git repositories and python packages. See their individual documentation for more details about these specific themes. MkDocs Bootstrap MkDocs Bootswatch They will be included with MkDocs by default until a future release. After that they will be installable with pip: pip install mkdocs-bootstrap and pip install mkdocs-bootswatch See the documentation for Customizing Your Theme for more information about using and customizing themes and Custom themes for creating and distributing new themes Other Changes and Additions to Version 0.15.0 \uf0c1 Fix issues when using absolute links to Markdown files. ( #628 ) Deprecate support of Python 2.6, pending removal in 1.0.0. ( #165 ) Add official support for Python version 3.5. Add support for site_description and site_author to the ReadTheDocs theme. ( #631 ) Update FontAwesome to 4.5.0. ( #789 ) Increase IE support with X-UA-Compatible. ( #785 ) Added support for Python's -m flag. ( #706 ) Bugfix: Ensure consistent ordering of auto-populated pages. ( #638 ) Bugfix: Scroll the tables of contents on the MkDocs theme if it is too long for the page. ( #204 ) Bugfix: Add all ancestors to the page attribute ancestors rather than just the initial one. ( #693 ) Bugfix: Include HTML in the build output again. ( #691 ) Bugfix: Provide filename to Read the Docs. ( #721 and RTD #1480 ) Bugfix: Silence Click's unicode_literals warning. ( #708 ) Version 0.14.0 (2015-06-09) \uf0c1 Improve Unicode handling by ensuring that all config strings are loaded as Unicode. ( #592 ) Remove dependency on the six library. ( #583 ) Remove dependency on the ghp-import library. ( #547 ) Add --quiet and --verbose options to all sub-commands. ( #579 ) Add short options ( -a ) to most command line options. ( #579 ) Add copyright footer for readthedocs theme. ( #568 ) If the requested port in mkdocs serve is already in use, don't show the user a full stack trace. ( #596 ) Bugfix: Fix a JavaScript encoding problem when searching with spaces. ( #586 ) Bugfix: gh-deploy now works if the mkdocs.yml is not in the git repo root. ( #578 ) Bugfix: Handle (pass-through instead of dropping) HTML entities while parsing TOC. ( #612 ) Bugfix: Default extra_templates to an empty list, don't automatically discover them. ( #616 ) Version 0.13.3 (2015-06-02) \uf0c1 Bugfix: Reduce validation error to a warning if the site_dir is within the docs_dir as this shouldn't cause any problems with building but will inconvenience users building multiple times. ( #580 ) Version 0.13.2 (2015-05-30) \uf0c1 Bugfix: Ensure all errors and warnings are logged before exiting. ( #536 ) Bugfix: Fix compatibility issues with ReadTheDocs. ( #554 ) Version 0.13.1 (2015-05-27) \uf0c1 Bugfix: Fix a problem with minimal configurations which only contain a list of paths in the pages config. ( #562 ) Version 0.13.0 (2015-05-26) \uf0c1 Deprecations to Version 0.13.0 \uf0c1 Deprecate the JSON command \uf0c1 In this release the mkdocs json command has been marked as deprecated and when used a deprecation warning will be shown. It will be removed in a future release of MkDocs, version 1.0 at the latest. The mkdocs json command provided a convenient way for users to output the documentation contents as JSON files but with the additions of search to MkDocs this functionality is duplicated. A new index with all the contents from a MkDocs build is created in the site_dir , so with the default value for the site_dir It can be found in site/mkdocs/search_index.json . This new file is created on every MkDocs build (with mkdocs build ) and no configuration is needed to enable it. Change the pages configuration \uf0c1 Provide a new way to define pages, and specifically nested pages, in the mkdocs.yml file and deprecate the existing approach, support will be removed with MkDocs 1.0. Warn users about the removal of builtin themes \uf0c1 All themes other than mkdocs and readthedocs will be moved into external packages in a future release of MkDocs. This will enable them to be more easily supported and updates outside MkDocs releases. Major Additions to Version 0.13.0 \uf0c1 Search \uf0c1 Support for search has now been added to MkDocs. This is based on the JavaScript library lunr.js . It has been added to both the mkdocs and readthedocs themes. See the custom theme documentation on supporting search for adding it to your own themes. New Command Line Interface \uf0c1 The command line interface for MkDocs has been re-written with the Python library Click . This means that MkDocs now has an easier to use interface with better help output. This change is partially backwards incompatible as while undocumented it was possible to pass any configuration option to the different commands. Now only a small subset of the configuration options can be passed to the commands. To see in full commands and available arguments use mkdocs --help and mkdocs build --help to have them displayed. Support Extra HTML and XML files \uf0c1 Like the extra_javascript and extra_css configuration options, a new option named extra_templates has been added. This will automatically be populated with any .html or .xml files in the project docs directory. Users can place static HTML and XML files and they will be copied over, or they can also use Jinja2 syntax and take advantage of the global variables . By default MkDocs will use this approach to create a sitemap for the documentation. Other Changes and Additions to Version 0.13.0 \uf0c1 Add support for Markdown extension configuration options . ( #435 ) MkDocs now ships Python wheels . ( #486 ) Only include the build date and MkDocs version on the homepage. ( #490 ) Generate sitemaps for documentation builds. ( #436 ) Add a clearer way to define nested pages in the configuration. ( #482 ) Add an extra config option for passing arbitrary variables to the template. ( #510 ) Add --no-livereload to mkdocs serve for a simpler development server. ( #511 ) Add copyright display support to all themes ( #549 ) Add support for custom commit messages in a mkdocs gh-deploy ( #516 ) Bugfix: Fix linking to media within the same directory as a markdown file called index.md ( #535 ) Bugfix: Fix errors with Unicode filenames ( #542 ). Version 0.12.2 (2015-04-22) \uf0c1 Bugfix: Fix a regression where there would be an error if some child titles were missing but others were provided in the pages config. ( #464 ) Version 0.12.1 (2015-04-14) \uf0c1 Bugfix: Fixed a CSS bug in the table of contents on some browsers where the bottom item was not clickable. Version 0.12.0 (2015-04-14) \uf0c1 Display the current MkDocs version in the CLI output. ( #258 ) Check for CNAME file when using gh-deploy. ( #285 ) Add the homepage back to the navigation on all themes. ( #271 ) Add a strict more for local link checking. ( #279 ) Add Google analytics support to all themes. ( #333 ) Add build date and MkDocs version to the ReadTheDocs and MkDocs theme outputs. ( #382 ) Standardize highlighting across all themes and add missing languages. ( #387 ) Add a verbose flag. (-v) to show more details about what the build. ( #147 ) Add the option to specify a remote branch when deploying to GitHub. This enables deploying to GitHub pages on personal and repo sites. ( #354 ) Add favicon support to the ReadTheDocs theme HTML. ( #422 ) Automatically refresh the browser when files are edited. ( #163 ) Bugfix: Never re-write URLs in code blocks. ( #240 ) Bugfix: Don't copy dotfiles when copying media from the docs_dir . ( #254 ) Bugfix: Fix the rendering of tables in the ReadTheDocs theme. ( #106 ) Bugfix: Add padding to the bottom of all bootstrap themes. ( #255 ) Bugfix: Fix issues with nested Markdown pages and the automatic pages configuration. ( #276 ) Bugfix: Fix a URL parsing error with GitHub enterprise. ( #284 ) Bugfix: Don't error if the mkdocs.yml is completely empty. ( #288 ) Bugfix: Fix a number of problems with relative URLs and Markdown files. ( #292 ) Bugfix: Don't stop the build if a page can't be found, continue with other pages. ( #150 ) Bugfix: Remove the site_name from the page title, this needs to be added manually. ( #299 ) Bugfix: Fix an issue with table of contents cutting off Markdown. ( #294 ) Bugfix: Fix hostname for BitBucket. ( #339 ) Bugfix: Ensure all links end with a slash. ( #344 ) Bugfix: Fix repo links in the readthedocs theme. ( #365 ) Bugfix: Include jQuery locally to avoid problems using MkDocs offline. ( #143 ) Bugfix: Don't allow the docs_dir to be in the site_dir or vice versa. ( #384 ) Bugfix: Remove inline CSS in the ReadTheDocs theme. ( #393 ) Bugfix: Fix problems with the child titles due to the order the pages config was processed. ( #395 ) Bugfix: Don't error during live reload when the theme doesn't exist. ( #373 ) Bugfix: Fix problems with the Meta extension when it may not exist. ( #398 ) Bugfix: Wrap long inline code otherwise they will run off the screen. ( #313 ) Bugfix: Remove HTML parsing regular expressions and parse with HTMLParser to fix problems with titles containing code. ( #367 ) Bugfix: Fix an issue with the scroll to anchor causing the title to be hidden under the navigation. ( #7 ) Bugfix: Add nicer CSS classes to the HTML tables in bootswatch themes. ( #295 ) Bugfix: Fix an error when passing in a specific config file with mkdocs serve . ( #341 ) Bugfix: Don't overwrite index.md files with the mkdocs new command. ( #412 ) Bugfix: Remove bold and italic from code in the ReadTheDocs theme. ( #411 ) Bugfix: Display images inline in the MkDocs theme. ( #415 ) Bugfix: Fix problems with no-highlight in the ReadTheDocs theme. ( #319 ) Bugfix: Don't delete hidden files when using mkdocs build --clean . ( #346 ) Bugfix: Don't block newer versions of Python-markdown on Python >= 2.7. ( #376 ) Bugfix: Fix encoding issues when opening files across platforms. ( #428 ) Version 0.11.1 (2014-11-20) \uf0c1 Bugfix: Fix a CSS wrapping issue with code highlighting in the ReadTheDocs theme. ( #233 ) Version 0.11.0 (2014-11-18) \uf0c1 Render 404.html files if they exist for the current theme. ( #194 ) Bugfix: Fix long nav bars, table rendering and code highlighting in MkDocs and ReadTheDocs themes. ( #225 ) Bugfix: Fix an issue with the google_analytics code. ( #219 ) Bugfix: Remove __pycache__ from the package tar. ( #196 ) Bugfix: Fix markdown links that go to an anchor on the current page. ( #197 ) Bugfix: Don't add prettyprint well CSS classes to all HTML, only add it in the MkDocs theme. ( #183 ) Bugfix: Display section titles in the ReadTheDocs theme. ( #175 ) Bugfix: Use the polling observer in watchdog so rebuilding works on filesystems without inotify. ( #184 ) Bugfix: Improve error output for common configuration related errors. ( #176 ) Version 0.10.0 (2014-10-29) \uf0c1 Added support for Python 3.3 and 3.4. ( #103 ) Configurable Python-Markdown extensions with the config setting markdown_extensions . ( #74 ) Added mkdocs json command to output your rendered documentation as json files. ( #128 ) Added --clean switch to build , json and gh-deploy commands to remove stale files from the output directory. ( #157 ) Support multiple theme directories to allow replacement of individual templates rather than copying the full theme. ( #129 ) Bugfix: Fix <ul> rendering in readthedocs theme. ( #171 ) Bugfix: Improve the readthedocs theme on smaller displays. ( #168 ) Bugfix: Relaxed required python package versions to avoid clashes. ( #104 ) Bugfix: Fix issue rendering the table of contents with some configs. ( #146 ) Bugfix: Fix path for embedded images in sub pages. ( #138 ) Bugfix: Fix use_directory_urls config behavior. ( #63 ) Bugfix: Support extra_javascript and extra_css in all themes. ( #90 ) Bugfix: Fix path-handling under Windows. ( #121 ) Bugfix: Fix the menu generation in the readthedocs theme. ( #110 ) Bugfix: Fix the mkdocs command creation under Windows. ( #122 ) Bugfix: Correctly handle external extra_javascript and extra_css . ( #92 ) Bugfix: Fixed favicon support. ( #87 )","title":"Release Notes"},{"location":"about/release-notes/#release-notes","text":"","title":"Release Notes"},{"location":"about/release-notes/#upgrading","text":"To upgrade MkDocs to the latest version, use pip: pip install -U mkdocs You can determine your currently installed version using mkdocs --version : $ mkdocs --version mkdocs, version 1.5.0 from /path/to/mkdocs (Python 3.10)","title":"Upgrading"},{"location":"about/release-notes/#maintenance-team","text":"The current and past members of the MkDocs team. @tomchristie @d0ugal @waylan @oprypin @ultrabug","title":"Maintenance team"},{"location":"about/release-notes/#version-161-2024-08-30","text":"","title":"Version 1.6.1 (2024-08-30)"},{"location":"about/release-notes/#fixed","text":"Fix build error when environment variable SOURCE_DATE_EPOCH=0 is set. #3795 Fix build error when mkdocs_theme.yml config is empty. #3700 Support python -W and PYTHONWARNINGS instead of overriding the configuration. #3809 Support running with Docker under strict mode, by removing 0.0.0.0 dev server warning. #3784 Drop unnecessary changefreq from sitemap.xml . #3629 Fix JavaScript console error when closing menu dropdown. #3774 Fix JavaScript console error that occur on repeated clicks. #3730 Fix JavaScript console error that can occur on dropdown selections. #3694","title":"Fixed"},{"location":"about/release-notes/#added","text":"Added translations for Dutch. #3804 Added and updated translations for Chinese (Simplified). #3684","title":"Added"},{"location":"about/release-notes/#version-160-2024-04-20","text":"","title":"Version 1.6.0 (2024-04-20)"},{"location":"about/release-notes/#local-preview","text":"mkdocs serve no longer locks up the browser when more than 5 tabs are open. This is achieved by closing the polling connection whenever a tab becomes inactive. Background tabs will no longer auto-reload either - that will instead happen as soon the tab is opened again. Context: #3391 New flag serve --open to open the site in a browser. After the first build is finished, this flag will cause the default OS Web browser to be opened at the home page of the local site. Context: #3500","title":"Local preview"},{"location":"about/release-notes/#drafts","text":"Changed from version 1.5 The exclude_docs config was split up into two separate concepts. The exclude_docs config no longer has any special behavior for mkdocs serve - it now always completely excludes the listed documents from the site. If you wish to use the \"drafts\" functionality like the exclude_docs key used to do in MkDocs 1.5, please switch to the new config key draft_docs . See documentation . Other changes: Reduce warning levels when a \"draft\" page has a link to a non-existent file. Context: #3449","title":"Drafts"},{"location":"about/release-notes/#update-to-deduction-of-page-titles","text":"MkDocs 1.5 had a change in behavior in deducing the page titles from the first heading. Unfortunately this could cause unescaped HTML tags or entities to appear in edge cases. Now tags are always fully sanitized from the title. Though it still remains the case that Page.title is expected to contain HTML entities and is passed directly to the themes. Images (notably, emojis in some extensions) get preserved in the title only through their alt attribute's value. Context: #3564 , #3578","title":"Update to deduction of page titles"},{"location":"about/release-notes/#themes","text":"Built-in themes now also support Polish language ( #3613 )","title":"Themes"},{"location":"about/release-notes/#readthedocs-theme","text":"Fix: \"readthedocs\" theme can now correctly handle deeply nested nav configurations (over 2 levels deep), without confusedly expanding all sections and jumping around vertically. ( #3464 ) Fix: \"readthedocs\" theme now shows a link to the repository (with a generic logo) even when isn't one of the 3 known hosters. ( #3435 ) \"readthedocs\" theme now also has translation for the word \"theme\" in the footer that mistakenly always remained in English. ( #3613 , #3625 )","title":"\"readthedocs\" theme"},{"location":"about/release-notes/#mkdocs-theme","text":"The \"mkdocs\" theme got a big update to a newer version of Bootstrap, meaning a slight overhaul of styles. Colors (most notably of admonitions) have much better contrast. The \"mkdocs\" theme now has support for dark mode - both automatic (based on the OS/browser setting) and with a manual toggle. Both of these options are not enabled by default and need to be configured explicitly. See color_mode , user_color_mode_toggle in documentation . Possible breaking change jQuery is no longer included into the \"mkdocs\" theme. If you were relying on it in your scripts, you will need to separately add it first (into mkdocs.yml) as an extra script: extra_javascript: - https://code.jquery.com/jquery-3.7.1.min.js Or even better if the script file is copied and included from your docs dir. Context: #3493 , #3649","title":"\"mkdocs\" theme"},{"location":"about/release-notes/#configuration","text":"","title":"Configuration"},{"location":"about/release-notes/#new-enabled-setting-for-all-plugins","text":"You may have seen some plugins take up the convention of having a setting enabled: false (or usually controlled through an environment variable) to make the plugin do nothing. Now every plugin has this setting. Plugins can still choose to implement this config themselves and decide how it behaves (and unless they drop older versions of MkDocs, they still should for now), but now there's always a fallback for every plugin. See documentation . Context: #3395","title":"New \"enabled\" setting for all plugins"},{"location":"about/release-notes/#validation","text":"","title":"Validation"},{"location":"about/release-notes/#validation-of-hyperlinks-between-pages","text":"","title":"Validation of hyperlinks between pages"},{"location":"about/release-notes/#absolute-links","text":"Historically, within Markdown, MkDocs only recognized relative links that lead to another physical *.md document (or media file). This is a good convention to follow because then the source pages are also freely browsable without MkDocs, for example on GitHub. Whereas absolute links were left unmodified (making them often not work as expected or, more recently, warned against). If you dislike having to always use relative links, now you can opt into absolute links and have them work correctly. If you set the setting validation.links.absolute_links to the new value relative_to_docs , all Markdown links starting with / will be understood as being relative to the docs_dir root. The links will then be validated for correctness according to all the other rules that were already working for relative links in prior versions of MkDocs. For the HTML output, these links will still be turned relative so that the site still works reliably. So, now any document (e.g. \"dir1/foo.md\") can link to the document \"dir2/bar.md\" as [link](/dir2/bar.md) , in addition to the previously only correct way [link](../dir2/bar.md) . You have to enable the setting, though. The default is still to just skip any processing of such links. See documentation . Context: #3485","title":"Absolute links"},{"location":"about/release-notes/#absolute-links-within-nav","text":"Absolute links within the nav: config were also always skipped. It is now possible to also validate them in the same way with validation.nav.absolute_links . Though it makes a bit less sense because then the syntax is simply redundant with the syntax that comes without the leading slash.","title":"Absolute links within nav"},{"location":"about/release-notes/#anchors","text":"There is a new config setting that is recommended to enable warnings for: validation: anchors: warn Example of a warning that this can produce: WARNING - Doc file 'foo/example.md' contains a link '../bar.md#some-heading', but the doc 'foo/bar.md' does not contain an anchor '#some-heading'. Any of the below methods of declaring an anchor will be detected by MkDocs: ## Heading producing an anchor ## Another heading {#custom-anchor-for-heading-using-attr-list} <a id=\"raw-anchor\"></a> [](){#markdown-anchor-using-attr-list} Plugins and extensions that insert anchors, in order to be compatible with this, need to be developed as treeprocessors that insert etree elements as their mode of operation, rather than raw HTML which is undetectable for this purpose. If you as a user are dealing with falsely reported missing anchors and there's no way to resolve this, you can choose to disable these messages by setting this option to ignore (and they are at INFO level by default anyway). See documentation . Context: #3463 Other changes: When the nav config is not specified at all, the not_in_nav setting (originally added in 1.5.0) gains an additional behavior: documents covered by not_in_nav will not be part of the automatically deduced navigation. Context: #3443 Fix: the !relative YAML tag for markdown_extensions (originally added in 1.5.0) - it was broken in many typical use cases. See documentation . Context: #3466 Config validation now exits on first error, to avoid showing bizarre secondary errors. Context: #3437 MkDocs used to shorten error messages for unexpected errors such as \"file not found\", but that is no longer the case, the full error message and stack trace will be possible to see (unless the error has a proper handler, of course). Context: #3445","title":"Anchors"},{"location":"about/release-notes/#upgrades-for-plugin-developers","text":"","title":"Upgrades for plugin developers"},{"location":"about/release-notes/#plugins-can-add-multiple-handlers-for-the-same-event-type-at-multiple-priorities","text":"See mkdocs.plugins.CombinedEvent in documentation . Context: #3448","title":"Plugins can add multiple handlers for the same event type, at multiple priorities"},{"location":"about/release-notes/#enabling-true-generated-files-and-expanding-the-file-api","text":"See documentation . There is a new pair of attributes File.content_string / content_bytes that becomes the official API for obtaining the content of a file and is used by MkDocs itself. This replaces the old approach where one had to manually read the file located at File.abs_src_path , although that is still the primary action that these new attributes do under the hood. The content of a File can be backed by a string and no longer has to be a real existing file at abs_src_path . It is possible to set the attribute File.content_string or File.content_bytes and it will take precedence over abs_src_path . Further, abs_src_path is no longer guaranteed to be present and can be None instead. MkDocs itself still uses physical files in all cases, but eventually plugins will appear that don't populate this attribute. There is a new constructor File.generated() that should be used by plugins instead of the File() constructor. It is much more convenient because one doesn't need to manually look up the values such as docs_dir and use_directory_urls . Its signature is one of: f = File.generated(config: MkDocsConfig, src_uri: str, content: str | bytes) f = File.generated(config: MkDocsConfig, src_uri: str, abs_src_path: str) This way, it is now extremely easy to add a virtual file even from a hook: def on_files(files: Files, config: MkDocsConfig): files.append(File.generated(config, 'fake/path.md', content=\"Hello, world!\")) For large content it is still best to use physical files, but one no longer needs to manipulate the path by providing a fake unused docs_dir . There is a new attribute File.generated_by that arose by convention - for generated files it should be set to the name of the plugin (the key in the plugins: collection) that produced this file. This attribute is populated automatically when using the File.generated() constructor. It is possible to set the edit_uri attribute of a File , for example from a plugin or hook, to make it different from the default (equal to src_uri ), and this will be reflected in the edit link of the document. This can be useful because some pages aren't backed by a real file and are instead created dynamically from some other source file or script. So a hook could set the edit_uri to that source file or script accordingly. The File object now stores its original src_dir , dest_dir , use_directory_urls values as attributes. Fields of File are computed on demand but cached. Only the three above attributes are primary ones, and partly also dest_uri . This way, it is possible to, for example, overwrite dest_uri of a File , and abs_dest_path will be calculated based on it. However you need to clear the attribute first using del f.abs_dest_path , because the values are cached. File instances are now hashable (can be used as keys of a dict ). Two files can no longer be considered \"equal\" unless it's the exact same instance of File . Other changes: The internal storage of File objects inside a Files object has been reworked, so any plugins that choose to access Files._files will get a deprecation warning. The order of File objects inside a Files collection is no longer significant when automatically inferring the nav . They get forcibly sorted according to the default alphabetic order. Context: #3451 , #3463","title":"Enabling true generated files and expanding the File API"},{"location":"about/release-notes/#hooks-and-debugging","text":"Hook files can now import adjacent *.py files using the import statement. Previously this was possible to achieve only through a sys.path workaround. See the new mention in documentation . Context: #3568 Verbose -v log shows the sequence of plugin events in more detail - shows each invoked plugin one by one, not only the event type. Context: #3444","title":"Hooks and debugging"},{"location":"about/release-notes/#deprecations","text":"Python 3.7 is no longer supported, Python 3.12 is officially supported. Context: #3429 The theme config file mkdocs_theme.yml no longer executes YAML tags. Context: #3465 The plugin event on_page_read_source is soft-deprecated because there is always a better alternative to it (see the new File API or just on_page_markdown , depending on the desired interaction). When multiple plugins/hooks apply this event handler, they trample over each other, so now there is a warning in that case. See documentation . Context: #3503","title":"Deprecations"},{"location":"about/release-notes/#api-deprecations","text":"It is no longer allowed to set File.page to a type other than Page or a subclass thereof. Context: #3443 - following the deprecation in version 1.5.3 and #3381 . Theme._vars is deprecated - use theme['foo'] instead of theme._vars['foo'] utils : modified_time() , get_html_path() , get_url_path() , is_html_file() , is_template_file() are removed. path_to_url() is deprecated. LiveReloadServer.watch() no longer accepts a custom callback. Context: #3429","title":"API deprecations"},{"location":"about/release-notes/#misc","text":"The sitemap.xml.gz file is slightly more reproducible and no longer changes on every build, but instead only once per day (upon a date change). Context: #3460 Other small improvements; see commit log .","title":"Misc"},{"location":"about/release-notes/#version-153-2023-09-18","text":"Fix mkdocs serve sometimes locking up all browser tabs when navigating quickly ( #3390 ) Add many new supported languages for \"search\" plugin - update lunr-languages to 1.12.0 ( #3334 ) Bugfix (regression in 1.5.0): In \"readthedocs\" theme the styling of \"breadcrumb navigation\" was broken for nested pages ( #3383 ) Built-in themes now also support Chinese (Traditional, Taiwan) language ( #3154 ) Plugins can now set File.page to their own subclass of Page . There is also now a warning if File.page is set to anything other than a strict subclass of Page . ( #3367 , #3381 ) Note that just instantiating a Page sets the file automatically , so care needs to be taken not to create an unneeded Page . Other small improvements; see commit log .","title":"Version 1.5.3 (2023-09-18)"},{"location":"about/release-notes/#version-152-2023-08-02","text":"Bugfix (regression in 1.5.0): Restore functionality of --no-livereload . ( #3320 ) Bugfix (regression in 1.5.0): The new page title detection would sometimes be unable to drop anchorlinks - fix that. ( #3325 ) Partly bring back pre-1.5 API: extra_javascript items will once again be mostly strings, and only sometimes ExtraScriptValue (when the extra script functionality is used). Plugins should be free to append strings to config.extra_javascript , but when reading the values, they must still make sure to read it as str(value) in case it is an ExtraScriptValue item. For querying the attributes such as .type you need to check isinstance first. Static type checking will guide you in that. ( #3324 ) See commit log .","title":"Version 1.5.2 (2023-08-02)"},{"location":"about/release-notes/#version-151-2023-07-28","text":"Bugfix (regression in 1.5.0): Make it possible to treat ExtraScriptValue as a path. This lets some plugins still work despite the breaking change. Bugfix (regression in 1.5.0): Prevent errors for special setups that have 3 conflicting files, such as index.html , index.md and README.md ( #3314 ) See commit log .","title":"Version 1.5.1 (2023-07-28)"},{"location":"about/release-notes/#version-150-2023-07-26","text":"","title":"Version 1.5.0 (2023-07-26)"},{"location":"about/release-notes/#new-command-mkdocs-get-deps","text":"This command guesses the Python dependencies that a MkDocs site requires in order to build. It simply prints the PyPI packages that need to be installed. In the terminal it can be combined directly with an installation command as follows: pip install $(mkdocs get-deps) The idea is that right after running this command, you can directly follow it up with mkdocs build and it will almost always \"just work\", without needing to think which dependencies to install. The way it works is by scanning mkdocs.yml for themes: , plugins: , markdown_extensions: items and doing a reverse lookup based on a large list of known projects (catalog, see below). Of course, you're welcome to use a \"virtualenv\" with such a command. Also note that for environments that require stability (for example CI) directly installing deps in this way is not a very reliable approach as it precludes dependency pinning. The command allows overriding which config file is used (instead of mkdocs.yml in the current directory) as well as which catalog of projects is used (instead of downloading it from the default location). See mkdocs get-deps --help . Context: #3205","title":"New command mkdocs get-deps"},{"location":"about/release-notes/#mkdocs-has-an-official-catalog-of-plugins","text":"Check out https://github.com/mkdocs/catalog and add all your general-purpose plugins, themes and extensions there, so that they can be looked up through mkdocs get-deps . This was renamed from \"best-of-mkdocs\" and received significant updates. In addition to pip installation commands, the page now shows the config boilerplate needed to add a plugin.","title":"MkDocs has an official catalog of plugins"},{"location":"about/release-notes/#expanded-validation-of-links","text":"","title":"Expanded validation of links"},{"location":"about/release-notes/#validated-links-in-markdown","text":"As you may know, within Markdown, MkDocs really only recognizes relative links that lead to another physical *.md document (or media file). This is a good convention to follow because then the source pages are also freely browsable without MkDocs, for example on GitHub. MkDocs knows that in the output it should turn those *.md links into *.html as appropriate, and it would also always tell you if such a link doesn't actually lead to an existing file. However, the checks for links were really loose and had many concessions. For example, links that started with / (\"absolute\") and links that ended with / were left as is and no warning was shown, which allowed such very fragile links to sneak into site sources: links that happen to work right now but get no validation and links that confusingly need an extra level of .. with use_directory_urls enabled. Now, in addition to validating relative links, MkDocs will print INFO messages for unrecognized types of links (including absolute links). They look like this: INFO - Doc file 'example.md' contains an absolute link '/foo/bar/', it was left as is. Did you mean 'foo/bar.md'? If you don't want any changes, not even the INFO messages, and wish to revert to the silence from MkDocs 1.4, add the following configs to mkdocs.yml ( not recommended): validation: absolute_links: ignore unrecognized_links: ignore If, on the opposite end, you want these to print WARNING messages and cause mkdocs build --strict to fail, you are recommended to configure these to warn instead. See documentation for actual recommended settings and more details. Context: #3283","title":"Validated links in Markdown"},{"location":"about/release-notes/#validated-links-in-the-nav","text":"Links to documents in the nav configuration now also have configurable validation, though with no changes to the defaults. You are welcomed to turn on validation for files that were forgotten and excluded from the nav. Example: validation: nav: omitted_files: warn absolute_links: warn This can make the following message appear with the WARNING level (as opposed to INFO as the only option previously), thus being caught by mkdocs --strict : INFO - The following pages exist in the docs directory, but are not included in the \"nav\" configuration: ... See documentation . Context: #3283 , #1755","title":"Validated links in the nav"},{"location":"about/release-notes/#mark-docs-as-intentionally-not-in-nav","text":"There is a new config not_in_nav . With it, you can mark particular patterns of files as exempt from the above omitted_files warning type; no messages will be printed for them anymore. (As a corollary, setting this config to * is the same as ignoring omitted_files altogether.) This is useful if you generally like these warnings about files that were forgotten from the nav, but still have some pages that you knowingly excluded from the nav and just want to build and copy them. The not_in_nav config is a set of gitignore-like patterns. See the next section for an explanation of another such config. See documentation . Context: #3224 , #1888","title":"Mark docs as intentionally \"not in nav\""},{"location":"about/release-notes/#excluded-doc-files","text":"There is a new config exclude_docs that tells MkDocs to ignore certain files under docs_dir and not copy them to the built site as part of the build. Historically MkDocs would always ignore file names starting with a dot, and that's all. Now this is all configurable: you can un-ignore these and/or ignore more patterns of files. The exclude_docs config follows the .gitignore pattern format and is specified as a multiline YAML string. For example: exclude_docs: | *.py # Excludes e.g. docs/hooks/foo.py /requirements.txt # Excludes docs/requirements.txt Validation of links (described above) is also affected by exclude_docs . During mkdocs serve the messages explain the interaction, whereas during mkdocs build excluded files are as good as nonexistent. As an additional related change, if you have a need to have both README.md and index.md files in a directory but publish only one of them, you can now use this feature to explicitly ignore one of them and avoid warnings. See documentation . Context: #3224","title":"Excluded doc files"},{"location":"about/release-notes/#drafts_1","text":"Dropped from version 1.6: The exclude_docs config no longer applies the \"drafts\" functionality for mkdocs serve . This was renamed to draft_docs . The exclude_docs config has another behavior: all excluded Markdown pages will still be previewable in mkdocs serve only, just with a \"DRAFT\" marker on top. Then they will of course be excluded from mkdocs build or gh-deploy . If you don't want mkdocs serve to have any special behaviors and instead want it to perform completely normal builds, use the new flag mkdocs serve --clean . See documentation . Context: #3224","title":"Drafts"},{"location":"about/release-notes/#mkdocs-serve-no-longer-exits-after-build-errors","text":"If there was an error (from the config or a plugin) during a site re-build, mkdocs serve used to exit after printing a stack trace. Now it will simply freeze the server until the author edits the files to fix the problem, and then will keep reloading. But errors on the first build still cause mkdocs serve to exit, as before. Context: #3255","title":"mkdocs serve no longer exits after build errors"},{"location":"about/release-notes/#page-titles-will-be-deduced-from-any-style-of-heading","text":"MkDocs always had the ability to infer the title of a page (if it's not specified in the nav ) based on the first line of the document, if it had a <h1> heading that had to written starting with the exact character # . Now any style of Markdown heading is understood ( #1886 ). Due to the previous simplistic parsing, it was also impossible to use attr_list attributes in that first heading ( #3136 ). Now that is also fixed.","title":"Page titles will be deduced from any style of heading"},{"location":"about/release-notes/#markdown-extensions-can-use-paths-relative-to-the-current-document","text":"This is aimed at extensions such as pymdownx.snippets or markdown_include.include : you can now specify their include paths to be relative to the currently rendered Markdown document, or relative to the docs_dir . Any other extension can of course also make use of the new !relative YAML tag. markdown_extensions: - pymdownx.snippets: base_path: !relative See documentation . Context: #2154 , #3258","title":"Markdown extensions can use paths relative to the current document"},{"location":"about/release-notes/#script-tags-can-specify-typemodule-and-other-attributes","text":"In extra_javascript , if you use the .mjs file extension or explicitly specify a type: module key, the script will be added with the type=\"module\" attribute. defer: true and async: true keys are also available. See updated documentation for extra_javascript . At first this is only supported in built-in themes, other themes need to follow up, see below. Context: #3237","title":"&lt;script&gt; tags can specify type=\"module\" and other attributes"},{"location":"about/release-notes/#changes-for-theme-developers-action-required","text":"Using the construct {% for script in extra_javascript %} is now fully obsolete because it cannot allow customizing the attributes of the <script> tag. It will keep working but blocks some of MkDocs' features. Instead, you now need to use config.extra_javascript (which was already the case for a while) and couple it with the new script_tag filter: {%- for script in config.extra_javascript %} {{ script | script_tag }} {%- endfor %} See documentation .","title":"Changes for theme developers (action required!)"},{"location":"about/release-notes/#upgrades-for-plugin-developers_1","text":"Breaking change: config.extra_javascript is no longer a plain list of strings, but instead a list of ExtraScriptValue items. So you can no longer treat the list values as strings. If you want to keep compatibility with old versions, just always reference the items as str(item) instead. And you can still append plain strings to the list if you wish. See information about <script> tags above. Context: #3237 File has a new attribute inclusion . Its value is calculated from both the exclude_docs and not_in_nav configs, and implements their behavior. Plugins can read this value or write to it. New File instances by default follow whatever the configs say, but plugins can choose to make this decision explicitly, per file. When creating a File , one can now set a dest_uri directly, rather than having to update it (and other dependent attributes) after creation. Context A new config option was added - DictOfItems . Similarly to ListOfItems , it validates a mapping of config options that all have the same type. Keys are arbitrary but always strings. Context: #3242 A new function get_plugin_logger was added. In order to opt into a standardized way for plugins to log messages, please use the idiom: log = mkdocs.plugins.get_plugin_logger(__name__) ... log.info(\"Hello, world\") Context: #3245 SubConfig config option can be conveniently subclassed with a particular type of config specified. For example, class ExtraScript(SubConfig[ExtraScriptValue]): . To see how this is useful, search for this class in code. Context Bugfix: SubConfig had a bug where paths (from FilesystemObject options) were not made relative to the main config file as intended, because config_file_path was not properly inherited to it. This is now fixed. Context: #3265 Config members now have a way to avoid clashing with Python's reserved words. This is achieved by stripping a trailing underscore from each member's name. Example of adding an async boolean option that can be set by the user as async: true and read programmatically as config.async_ : class ExampleConfig(Config): async_ = Type(bool, default=False) Previously making a config key with a reserved name was impossible with new-style schemas. Context Theme has its attributes properly declared and gained new attributes theme.locale , theme.custom_dir . Some type annotations were made more precise. For example: The context parameter has gained the type TemplateContext ( TypedDict ). Context The classes Page , Section , Link now have a common base class StructureItem . Context Some methods stopped accepting Config and only accept MkDocsConfig as was originally intended. Context config.mdx_configs got a proper type. Context: #3229","title":"Upgrades for plugin developers"},{"location":"about/release-notes/#theme-updates","text":"Built-in themes mostly stopped relying on <script defer> . This may affect some usages of extra_javascript , mainly remove the need for custom handling of \"has the page fully loaded yet\". Context: #3237 \"mkdocs\" theme now has a styling for > blockquotes, previously they were not distinguished at all. Context: #3291 \"readthedocs\" theme was updated to v1.2.0 according to upstream, with improved styles for <kbd> and breadcrumb navigation. Context: #3058 Both built-in themes had their version of highlight.js updated to 11.8.0, and jQuery updated to 3.6.0.","title":"Theme updates"},{"location":"about/release-notes/#bug-fixes","text":"","title":"Bug fixes"},{"location":"about/release-notes/#relative-paths-in-the-nav-can-traverse-above-the-root","text":"Regression in 1.2 - relative paths in the nav could no longer traverse above the site's root and were truncated to the root. Although such traversal is discouraged and produces a warning, this was a documented behavior. The behavior is now restored. Context: #2752 , #3010","title":"Relative paths in the nav can traverse above the root"},{"location":"about/release-notes/#mkdocs-can-accept-the-config-from-stdin","text":"This can be used for config overrides on the fly. See updated section at the bottom of Configuration Inheritance . The command to use this is mkdocs build -f - . In previous versions doing this led to an error. Context","title":"MkDocs can accept the config from stdin"},{"location":"about/release-notes/#new-command-line-flags","text":"mkdocs --no-color build disables color output and line wrapping. This option is also available through an environment variable NO_COLOR=true . Context: #3282 mkdocs build --no-strict overrides the strict config to false . Context: #3254 mkdocs build -f - (described directly above). mkdocs serve --clean (described above). mkdocs serve --dirty is the new name of mkdocs serve --dirtyreload .","title":"New command line flags"},{"location":"about/release-notes/#deprecations_1","text":"extra_javascript underwent a change that can break plugins in rare cases, and it requires attention from theme developers. See respective entries above. Python-Markdown was unpinned from <3.4 . That version is known to remove functionality. If you are affected by those removals, you can still choose to pin the version for yourself: Markdown <3.4 . Context: #3222 , #2892 mkdocs.utils.warning_filter now shows a warning about being deprecated. It does nothing since MkDocs 1.2. Consider get_plugin_logger or just logging under mkdocs.plugins.* instead. Context: #3008 Accessing the _vars attribute of a Theme is deprecated - just access the keys directly. Accessing the user_configs attribute of a Config is deprecated. Note: instead of config.user_configs[*]['theme']['custom_dir'] , please use the new attribute config.theme.custom_dir . Other small improvements; see commit log .","title":"Deprecations"},{"location":"about/release-notes/#version-143-2023-05-02","text":"Bugfix: for the hooks feature, modules no longer fail to load if using some advanced Python features like dataclasses ( #3193 ) Bugfix: Don't create None sitemap entries if the page has no populated URL - affects sites that exclude some files from navigation ( 07a297b ) \"readthedocs\" theme: Accessibility: add aria labels to Home logo ( #3129 ) and search inputs ( #3046 ) \"readthedocs\" theme now supports hljs_style: config, same as \"mkdocs\" theme ( #3199 ) Translations: Built-in themes now also support Indonesian language ( #3154 ) Fixed zh_CN translation ( #3125 ) tr_TR translation becomes just tr - usage should remain unaffected ( #3195 ) See commit log .","title":"Version 1.4.3 (2023-05-02)"},{"location":"about/release-notes/#version-142-2022-11-01","text":"Officially support Python 3.11 ( #3020 ) Tip: Simply upgrading to Python 3.11 can cut off 10-15% of your site's build time. Support multiple instances of the same plugin ( #3027 ) If a plugin is specified multiple times in the list under the plugins: config, that will create 2 (or more) instances of the plugin with their own config each. Previously this case was unforeseen and, as such, bugged. Now even though this works, by default a warning will appear from MkDocs anyway, unless the plugin adds a class variable supports_multiple_instances = True . Bugfix (regression in 1.4.1): Don't error when a plugin puts a plain string into warnings ( #3016 ) Bugfix: Relative links will always render with a trailing slash ( #3022 ) Previously under use_directory_urls , links from a sub-page to the main index page rendered as e.g. <a href=\"../..\"> even though in all other cases the links look like <a href=\"../../\"> . This caused unwanted behavior on some combinations of Web browsers and servers. Now this special-case bug was removed. Built-in \"mkdocs\" theme now also supports Norwegian language ( #3024 ) Plugin-related warnings look more readable ( #3016 ) See commit log .","title":"Version 1.4.2 (2022-11-01)"},{"location":"about/release-notes/#version-141-2022-10-15","text":"Support theme-namespaced plugin loading ( #2998 ) Plugins' entry points can be named as 'sometheme/someplugin'. That will have the following outcome: If the current theme is 'sometheme', the plugin 'sometheme/someplugin' will always be preferred over 'someplugin'. If the current theme isn't 'sometheme', the only way to use this plugin is by specifying plugins: [sometheme/someplugin] . One can also specify plugins: ['/someplugin'] instead of plugins: ['someplugin'] to definitely avoid the theme-namespaced plugin. Bugfix: mkdocs serve will work correctly with non-ASCII paths and redirects ( #3001 ) Windows: 'colorama' is now a dependency of MkDocs, to ensure colorful log output ( #2987 ) Plugin-related config options have more reliable validation and error reporting ( #2997 ) Translation sub-commands of setup.py were completely dropped. See documentation [1] [2] for their new replacements ( #2990 ) The 'mkdocs' package (wheel and source) is now produced by Hatch build system and pyproject.toml instead of setup.py ( #2988 ) Other small improvements; see commit log .","title":"Version 1.4.1 (2022-10-15)"},{"location":"about/release-notes/#version-140-2022-09-27","text":"","title":"Version 1.4.0 (2022-09-27)"},{"location":"about/release-notes/#feature-upgrades","text":"","title":"Feature upgrades"},{"location":"about/release-notes/#hooks-2978","text":"The new hooks: config allows you to add plugin-like event handlers from local Python files, without needing to set up and install an actual plugin. See documentation .","title":"Hooks (#2978)"},{"location":"about/release-notes/#edit_uri-flexibility-2927","text":"There is a new edit_uri_template: config. It works like edit_uri but more generally covers ways to construct an edit URL. See documentation . Additionally, the edit_uri functionality will now fully work even if repo_url is omitted ( #2928 )","title":"edit_uri flexibility (#2927)"},{"location":"about/release-notes/#upgrades-for-plugin-developers_2","text":"Note This release has big changes to the implementation of plugins and their configs. But, the intention is to have zero breaking changes in all reasonably common use cases. Or at the very least if a code fix is required, there should always be a way to stay compatible with older MkDocs versions. Please report if this release breaks something.","title":"Upgrades for plugin developers"},{"location":"about/release-notes/#customize-event-order-for-plugin-event-handlers-2973","text":"Plugins can now choose to set a priority value for their event handlers. This can override the old behavior where for each event type, the handlers are called in the order that their plugins appear in the plugins config . If this is set, events with higher priority are called first. Events without a chosen priority get a default of 0. Events that have the same priority are ordered as they appear in the config. Recommended priority values: 100 \"first\", 50 \"early\", 0 \"default\", -50 \"late\", -100 \"last\". As different plugins discover more precise relations to each other, the values should be further tweaked. See documentation .","title":"Customize event order for plugin event handlers (#2973)"},{"location":"about/release-notes/#new-events-that-persist-across-builds-in-mkdocs-serve-2972","text":"The new events are on_startup and on_shutdown . They run at the very beginning and very end of an mkdocs invocation. on_startup also receives information on how mkdocs was invoked (e.g. serve --dirtyreload ). See documentation .","title":"New events that persist across builds in mkdocs serve (#2972)"},{"location":"about/release-notes/#replace-filesrc_path-to-not-deal-with-backslashes-2930","text":"The property src_path uses backslashes on Windows, which doesn't make sense as it's a virtual path. To not make a breaking change, there's no change to how this property is used, but now you should: Use File.src_uri instead of File.src_path and File.dest_uri instead of File.dest_path . These consistently use forward slashes, and are now the definitive source that MkDocs itself uses. See source code . As a related tip: you should also stop using os.path.* or pathlib.Path() to deal with these paths, and instead use posixpath.* or pathlib.PurePosixPath()","title":"Replace File.src_path to not deal with backslashes (#2930)"},{"location":"about/release-notes/#mkdocs-is-type-annotated-ready-for-use-with-mypy-2941-2970","text":"","title":"MkDocs is type-annotated, ready for use with mypy (#2941, #2970)"},{"location":"about/release-notes/#type-annotations-for-event-handler-methods-2931","text":"MkDocs' plugin event methods now have type annotations. You might have been adding annotations to events already, but now they will be validated to match the original. See source code and documentation . One big update is that now you should annotate method parameters more specifically as config: defaults.MkDocsConfig instead of config: base.Config . This not only makes it clear that it is the main config of MkDocs itself , but also provides type-safe access through attributes of the object (see next section). See source code and documentation .","title":"Type annotations for event handler methods (#2931)"},{"location":"about/release-notes/#rework-configoption-schemas-as-class-based-2962","text":"When developing a plugin, the settings that it accepts used to be specified in the config_scheme variable on the plugin class. This approach is now soft-deprecated, and instead you should specify the config in a sub-class of base.Config . Old example: from mkdocs import plugins from mkdocs.config import base, config_options class MyPlugin(plugins.BasePlugin): config_scheme = ( ('foo', config_options.Type(int)), ('bar', config_options.Type(str, default='')), ) def on_page_markdown(self, markdown: str, *, config: base.Config, **kwargs): if self.config['foo'] < 5: if config['site_url'].startswith('http:'): return markdown + self.config['baz'] This code snippet actually has many mistakes but it will pass all type checks and silently run and even succeed in some cases. So, on to the new equivalent example, changed to new-style schema and attribute-based access: (Complaints from \"mypy\" added inline) from mkdocs import plugins from mkdocs.config import base, config_options as c class MyPluginConfig(base.Config): foo = c.Optional(c.Type(int)) bar = c.Type(str, default='') class MyPlugin(plugins.BasePlugin[MyPluginConfig]): def on_page_markdown(self, markdown: str, *, config: defaults.MkDocsConfig, **kwargs): if self.config.foo < 5: # Error, `foo` might be `None`, need to check first. if config.site_url.startswith('http:'): # Error, MkDocs' `site_url` also might be `None`. return markdown + self.config.baz # Error, no such attribute `baz`! This lets you notice the errors from a static type checker before running the code and fix them as such: class MyPlugin(plugins.BasePlugin[MyPluginConfig]): def on_page_markdown(self, markdown: str, *, config: defaults.MkDocsConfig, **kwargs): if self.config.foo is not None and self.config.foo < 5: # OK, `int < int` is valid. if (config.site_url or '').startswith('http:'): # OK, `str.startswith(str)` is valid. return markdown + self.config.bar # OK, `str + str` is valid. See documentation . Also notice that we had to explicitly mark the config attribute foo as Optional . The new-style config has all attributes marked as required by default, and specifying required=False or required=True is not allowed!","title":"Rework ConfigOption schemas as class-based (#2962)"},{"location":"about/release-notes/#new-config_optionsoptional-2962","text":"Wrapping something into Optional is conceptually similar to \"I want the default to be None \" -- and you have to express it like that, because writing default=None doesn't actually work. Breaking change: the method BaseConfigOption.is_required() was removed. Use .required instead. ( #2938 ) And even the required property should be mostly unused now. For class-based configs, there's a new definition for whether an option is \"required\": It has no default, and It is not wrapped into config_options.Optional .","title":"New: config_options.Optional (#2962)"},{"location":"about/release-notes/#new-config_optionslistofitems-2938","text":"Defines a list of items that each must adhere to the same constraint. Kind of like a validated Type(list) Examples how to express a list of integers (with from mkdocs.config import config_options as c ): Description Code entry Required to specify foo = c.ListOfItems(c.Type(int)) Optional, default is [] foo = c.ListOfItems(c.Type(int), default=[]) Optional, default is None foo = c.Optional(c.ListOfItems(c.Type(int))) See more examples in documentation .","title":"New: config_options.ListOfItems (#2938)"},{"location":"about/release-notes/#updated-config_optionssubconfig-2807","text":"SubConfig used to silently ignore all validation of its config options. Now you should pass validate=True to it or just use new class-based configs where this became the default. So, it can be used to validate a nested sub-dict with all keys pre-defined and value types strictly validated. See examples in documentation .","title":"Updated: config_options.SubConfig (#2807)"},{"location":"about/release-notes/#other-changes-to-config-options","text":"URL 's default is now None instead of '' . This can still be checked for truthiness in the same way - if config.some_url: ( #2962 ) FilesystemObject is no longer abstract and can be used directly, standing for \"file or directory\" with optional existence checking ( #2938 ) Bug fixes: Fix SubConfig , ConfigItems , MarkdownExtensions to not leak values across different instances ( #2916 , #2290 ) SubConfig raises the correct kind of validation error without a stack trace ( #2938 ) Fix dot-separated redirect in config_options.Deprecated(moved_to) ( #2963 ) Tweaked logic for handling ConfigOption.default ( #2938 ) Deprecated config option classes: ConfigItems ( #2983 ), OptionallyRequired ( #2962 ), RepoURL ( #2927 )","title":"Other changes to config options"},{"location":"about/release-notes/#theme-updates_1","text":"Styles of admonitions in \"MkDocs\" theme ( #2981 ): Update colors to increase contrast Apply admonition styles also to <details> tag, to support Markdown extensions that provide it ( pymdownx.details , callouts ) Built-in themes now also support these languages: Russian ( #2976 ) Turkish (Turkey) ( #2946 ) Ukrainian ( #2980 )","title":"Theme updates"},{"location":"about/release-notes/#future-compatibility","text":"extra_css: and extra_javascript: warn if a backslash \\ is passed to them. ( #2930 , #2984 ) Show DeprecationWarning s as INFO messages. ( #2907 ) If any plugin or extension that you use relies on deprecated functionality of other libraries, it is at risk of breaking in the near future. Plugin developers should address these in a timely manner. Avoid a dependency on importlib_metadata starting from Python 3.10 ( #2959 ) Drop support for Python 3.6 ( #2948 )","title":"Future compatibility"},{"location":"about/release-notes/#incompatible-changes-to-public-apis","text":"mkdocs.utils : create_media_urls and normalize_url warn if a backslash \\ is passed to them. ( #2930 ) is_markdown_file stops accepting case-insensitive variants such as .MD , which is how MkDocs build was already operating. ( #2912 ) Hard-deprecated: modified_time , reduce_list , get_html_path , get_url_path , is_html_file , is_template_file . ( #2912 )","title":"Incompatible changes to public APIs"},{"location":"about/release-notes/#miscellaneous","text":"If a plugin adds paths to watch in LiveReloadServer , it can now unwatch them. ( #2777 ) Bugfix (regression in 1.2): Support listening on an IPv6 address in mkdocs serve . ( #2951 ) Other small improvements; see commit log .","title":"Miscellaneous"},{"location":"about/release-notes/#version-131-2022-07-19","text":"Pin Python-Markdown version to <3.4, thus excluding its latest release that breaks too many external extensions ( #2893 ) When a Markdown extension fails to load, print its name and traceback ( #2894 ) Bugfix for \"readthedocs\" theme (regression in 1.3.0): add missing space in breadcrumbs ( #2810 ) Bugfix: don't complain when a file \"readme.md\" (lowercase) exists, it's not recognized otherwise ( #2852 ) Built-in themes now also support these languages: Italian ( #2860 ) Other small improvements; see commit log .","title":"Version 1.3.1 (2022-07-19)"},{"location":"about/release-notes/#version-130-2022-03-26","text":"","title":"Version 1.3.0 (2022-03-26)"},{"location":"about/release-notes/#feature-upgrades_1","text":"ReadTheDocs theme updated from v0.4.1 to v1.0.0 according to upstream ( #2585 ) The most notable changes: New option logo : Rather than displaying the site_name in the title, one can specify a path to an image to display instead. New option anonymize_ip for Google Analytics. Dependencies were upgraded: jQuery upgraded to 3.6.0, Modernizr.js dropped, and others. See documentation of config options for the theme Built-in themes now also support these languages: German ( #2633 ) Persian (Farsi) ( #2787 ) Support custom directories to watch when running mkdocs serve ( #2642 ) MkDocs by default watches the docs directory and the config file. Now there is a way to add more directories to watch for changes, either via the YAML watch key or the command line flag --watch . Normally MkDocs never reaches into any other directories (so this feature shouldn't be necessary), but some plugins and extensions may do so. See documentation . New --no-history option for gh_deploy ( #2594 ) Allows to discard the history of commits when deploying, and instead replace it with one root commit","title":"Feature upgrades"},{"location":"about/release-notes/#bug-fixes_1","text":"An XSS vulnerability when using the search function in built-in themes was fixed ( #2791 ) Setting the edit_uri option no longer erroneously adds a trailing slash to repo_url ( #2733 )","title":"Bug fixes"},{"location":"about/release-notes/#miscellaneous_1","text":"Breaking change: the pages config option that was deprecated for a very long time now causes an error when used ( #2652 ) To fix the error, just change from pages to nav . Performance optimization: during startup of MkDocs, code and dependencies of other commands will not be imported ( #2714 ) The most visible effect of this is that dependencies of mkdocs serve will not be imported when mkdocs build is used. Recursively validate nav ( #2680 ) Validation of the nested nav structure has been reworked to report errors early and reliably. Some edge cases have been declared invalid. Other small improvements; see commit log .","title":"Miscellaneous"},{"location":"about/release-notes/#version-124-2022-03-26","text":"Compatibility with Jinja2 3.1.0 ( #2800 ) Due to a breaking change in Jinja2, MkDocs would crash with the message AttributeError: module 'jinja2' has no attribute 'contextfilter'","title":"Version 1.2.4 (2022-03-26)"},{"location":"about/release-notes/#version-123-2021-10-12","text":"Built-in themes now also support these languages: Simplified Chinese ( #2497 ) Japanese ( #2525 ) Brazilian Portuguese ( #2535 ) Spanish ( #2545 , previously #2396 ) Third-party plugins will take precedence over built-in plugins with the same name ( #2591 ) Bugfix: Fix ability to load translations for some languages: core support ( #2565 ) and search plugin support with fallbacks ( #2602 ) Bugfix (regression in 1.2): Prevent directory traversal in the dev server ( #2604 ) Bugfix (regression in 1.2): Prevent webserver warnings from being treated as a build failure in strict mode ( #2607 ) Bugfix: Correctly print colorful messages in the terminal on Windows ( #2606 ) Bugfix: Python version 3.10 was displayed incorrectly in --version ( #2618 ) Other small improvements; see commit log .","title":"Version 1.2.3 (2021-10-12)"},{"location":"about/release-notes/#version-122-2021-07-18","text":"Bugfix (regression in 1.2): Fix serving files/paths with Unicode characters ( #2464 ) Bugfix (regression in 1.2): Revert livereload file watching to use polling observer ( #2477 ) This had to be done to reasonably support usages that span virtual filesystems such as non-native Docker and network mounts. This goes back to the polling approach, very similar to that was always used prior, meaning most of the same downsides with latency and CPU usage. Revert from 1.2: Remove the requirement of a site_url config and the restriction on use_directory_urls ( #2490 ) Bugfix (regression in 1.2): Don't require trailing slash in the URL when serving a directory index in mkdocs serve server ( #2507 ) Instead of showing a 404 error, detect if it's a directory and redirect to a path with a trailing slash added, like before. Bugfix: Fix gh_deploy with config-file in the current directory ( #2481 ) Bugfix: Fix reversed breadcrumbs in \"readthedocs\" theme ( #2179 ) Allow \"mkdocs.yaml\" as the file name when '--config' is not passed ( #2478 ) Stop treating \";\" as a special character in URLs: urlparse -> urlsplit ( #2502 ) Improve build performance for sites with many pages (partly already done in 1.2) ( #2407 )","title":"Version 1.2.2 (2021-07-18)"},{"location":"about/release-notes/#version-121-2021-06-09","text":"Bugfix (regression in 1.2): Ensure 'gh-deploy' always pushes.","title":"Version 1.2.1 (2021-06-09)"},{"location":"about/release-notes/#version-12-2021-06-04","text":"","title":"Version 1.2 (2021-06-04)"},{"location":"about/release-notes/#major-additions-to-version-12","text":"","title":"Major Additions to Version 1.2"},{"location":"about/release-notes/#support-added-for-theme-localization-2299","text":"The mkdocs and readthedocs themes now support language localization using the theme.locale parameter, which defaults to en (English). The only other supported languages in this release are fr (French) and es (Spanish). For details on using the provided translations, see the user guide . Note that translation will not happen by default. Users must first install the necessary dependencies with the following command: pip install 'mkdocs[i18n]' Translation contributions are welcome and detailed in the Translation Guide . Developers of third party themes may want to review the relevant section of the Theme Development Guide . Contributors who are updating the templates to the built-in themes should review the Contributing Guide . The lang setting of the search plugin now defaults to the language specified in theme.locale .","title":"Support added for Theme Localization (#2299)"},{"location":"about/release-notes/#support-added-for-environment-variables-in-the-configuration-file-1954","text":"Environments variables may now be specified in the configuration file with the !ENV tag. The value of the variable will be parsed by the YAML parser and converted to the appropriate type. somekey: !ENV VAR_NAME otherkey: !ENV [VAR_NAME, FALLBACK_VAR, 'default value'] See Environment Variables in the Configuration documentation for details.","title":"Support added for Environment Variables in the configuration file (#1954)"},{"location":"about/release-notes/#support-added-for-configuration-inheritance-2218","text":"A configuration file may now inherit from a parent configuration file. In the primary file set the INHERIT key to the relative path of the parent file. INHERIT: path/to/base.yml The two files will then be deep merged. See Configuration Inheritance for details.","title":"Support added for Configuration Inheritance (#2218)"},{"location":"about/release-notes/#update-gh-deploy-command-2170","text":"The vendored (and modified) copy of ghp_import has been replaced with a dependency on the upstream library. As of version 1.0.0, ghp-import includes a Python API which makes it possible to call directly. MkDocs can now benefit from recent bug fixes and new features, including the following: A .nojekyll file is automatically included when deploying to GitHub Pages. The --shell flag is now available, which reportedly works better on Windows. Git author and committer environment variables should be respected ( #1383 ).","title":"Update gh-deploy command (#2170)"},{"location":"about/release-notes/#rework-auto-reload-and-http-server-for-mkdocs-serve-2385","text":"mkdocs serve now uses a new underlying server + file watcher implementation, based on http.server from standard library and watchdog . It provides similar functionality to the previously used livereload library (which is now dropped from dependencies, along with tornado ). This makes reloads more responsive and consistent in terms of timing. Multiple rapid file changes no longer cause the site to repeatedly rebuild (issue #2061 ). Almost every aspect of the server is slightly different, but actual visible changes are minor. The logging outputs are only similar to the old ones. Degradations in behavior are not expected, and should be reported if found.","title":"Rework auto-reload and HTTP server for mkdocs serve (#2385)"},{"location":"about/release-notes/#offset-the-local-site-root-according-to-the-sub-path-of-the-site_url-2424","text":"When using mkdocs serve and having the site_url specified as e.g. http://example.org/sub/path/ , now the root of the locally served site becomes http://127.0.0.1:8000/sub/path/ and all document paths are offset accordingly.","title":"Offset the local site root according to the sub-path of the site_url (#2424)"},{"location":"about/release-notes/#a-build_error-event-was-added-2103","text":"Plugin developers can now use the on_build_error hook to execute code when an exception is raised while building the site. See on_build_error in the Plugins documentation for details.","title":"A build_error event was added (#2103)"},{"location":"about/release-notes/#three-new-exceptions-builderror-pluginerror-and-abort-2103","text":"MkDocs now has tree new exceptions defined in mkdocs.exceptions : BuildError , PluginError , and Abort : PluginError can be raised from a plugin to stop the build and log an error message without traceback . BuildError should not be used by third-party plugins developers and is reserved for internal use only. Abort is used internally to abort the build and display an error without a traceback. See Handling errors in the Plugins documentation for details.","title":"Three new exceptions: BuildError PluginError and Abort (#2103)"},{"location":"about/release-notes/#search-indexing-strategy-configuration","text":"Users can now specify which strategy they wish to use when indexing their site for search. A user can select between the following options: full : Adds page title, section headings, and full page text to the search index. sections : Adds page titles and section headings only to the search index. titles : Adds only the page titles to the search index. See Search Indexing in the configuration documentation for details.","title":"Search Indexing Strategy configuration"},{"location":"about/release-notes/#backward-incompatible-changes-in-12","text":"The site_url configuration option is now required . If it is not set, a warning will be issued. In a future release an error will be raised ( #2189 ). The use_directory_urls configuration option will be forced to false if site_url is set to an empty string. In that case, if use_directory_urls is not explicitly set to false , a warning will be issued ( #2189 ). Note This was reverted in release 1.2.2 The google_analytics configuration option is deprecated as Google appears to be phasing it out in favor of its new Google Analytics 4 property. See the documentation for your theme for alternatives which can be configured as part of your theme configuration. For example, the mkdocs and readthedocs themes have each added a new theme.analytics.gtag configuration option which uses the new Google Analytics 4 property. See Google's documentation on how to Upgrade to a Google Analytics 4 property . Then set theme.analytics.gtag to the \"G-\" ID and delete the google_analytics configuration option which contains a \"UA-\" ID. So long as the old \"UA-\" ID and new \"G-\" ID are properly linked in your Google account, and you are using the \"G-\" ID, the data will be made available in both the old and new formats by Google Analytics. See #2252 . A theme's files are now excluded from the list of watched files by default when using the --livereload server. This new default behavior is what most users need and provides better performance when editing site content. Theme developers can enable the old behavior with the --watch-theme option. ( #2092 ). The mkdocs theme now removes the sidebar when printing a page. This frees up horizontal space for better rendering of content like tables ( #2193 ). The mkdocs.config.DEFAULT_SCHEMA global variable has been replaced with the function mkdocs.config.defaults.get_schema() , which ensures that each instance of the configuration is unique ( #2289 ). The mkdocs.utils.warning_filter is deprecated and now does nothing. Plugins should remove any reference to is as it may be deleted in a future release. To ensure any warnings get counted, simply log them to the mkdocs log (i.e.: mkdocs.plugins.pluginname ). The on_serve event (which receives the server object and the builder function) is affected by the server rewrite. server is now a mkdocs.livereload.LiveReloadServer instead of livereload.server.Server . The typical action that plugins can do with these is to call server.watch(some_dir, builder) , which basically adds that directory to watched directories, causing the site to be rebuilt on file changes. That still works, but passing any other function to watch is deprecated and shows a warning. This 2nd parameter is already optional, and will accept only this exact builder function just for compatibility. The python method of the plugins.search.prebuild_index configuration option is pending deprecation as of version 1.2. It is expected that in version 1.3 it will raise a warning if used and in version 1.4 it will raise an error. Users are encouraged to use an alternate method to generate a prebuilt index for search. The lunr and lunr[languages] dependencies are no longer installed by default. The dependencies are only needed for the rare user who pre-builds the search index and uses the python option, which is now pending deprecation. If you use this feature, then you will need to manually install lunr and lunr[languages] . A warning is issued if the dependencies are needed but not installed.","title":"Backward Incompatible Changes in 1.2"},{"location":"about/release-notes/#other-changes-and-additions-to-version-12","text":"Bugfix: Properly process navigation child items in _get_by_type when filtering for sections ( #2203 ). Official support for Python 3.9 has been added and support for Python 3.5 has been dropped. Bugfix: Fixes an issue that would result in a partially cut-off navigation item in the ReadTheDocs theme ( #2297 ). Structure Files object now has a remove method to help plugin developers manipulate the Files tree. The corresponding src_paths has become a property to accommodate this possible dynamic behavior. See #2305 . Updated highlight.js to 10.5.0. See #2313 . Bugfix: Search plugin now works with Japanese language. See #2178 . Documentation has been refactored ( #1629 ). Restore styling of tables in the readthedocs theme ( #2028 ). Ensure site_url ends with a slash ( #1785 ). Correct documentation of pages template context variable ( #1736 ). The lunr dependency has been updated to 0.5.9, and lunr.js to the corresponding 2.3.9 version ( #2306 ). Color is now used in log messages to identify errors, warnings and debug messages. Bugfix: Identify homepage when use_directory_urls is False ( #2362 ).","title":"Other Changes and Additions to Version 1.2"},{"location":"about/release-notes/#version-112-2020-05-14","text":"Bugfix: Normalize IP addresses and change unsupported address error to a warning ( #2108 ).","title":"Version 1.1.2 (2020-05-14)"},{"location":"about/release-notes/#version-111-2020-05-12","text":"Bugfix: Allow compressed sitemap to be deterministic by supporting the SOURCE_DATE_EPOCH environment variable ( #2100 ). Bugfix: Use README.md as index.html even if use_directory_urls is false ( #2081 ). Bugfix: Ignore links which start with a backslash ( #1680 ). Bugfix: Pass builder to the on_serve event so that it can be passed to server.watch by plugins ( #1952 ). Bugfix: Use lunr[languages]==0.5.8 to avoid nltk incompatibilities ( #2062 ). Bugfix: Ensure wheel is Python 3 only ( #2021 ). Bugfix: Clean up dev_addr validation and disallow 0.0.0.0 ( #2022 ). Add support for min_search_length parameter for search plugin ( #2014 ). Bugfix: readthedocs theme code colors ( #2027 ).","title":"Version 1.1.1 (2020-05-12)"},{"location":"about/release-notes/#version-11-2020-02-22","text":"","title":"Version 1.1 (2020-02-22)"},{"location":"about/release-notes/#major-additions-to-version-11","text":"","title":"Major Additions to Version 1.1"},{"location":"about/release-notes/#support-for-lunrpy-as-prebuild_index-engine","text":"Mkdocs now supports pre-building indices using Lunr.py , a pure Python implementation of Lunr.js, allowing the user to avoid installing a NodeJS environment if so desired. For more information please read the prebuild_index documentation .","title":"Support for Lunr.py as prebuild_index engine"},{"location":"about/release-notes/#readthedocs-theme-updated-with-upstream-588-and-1374","text":"The readthedocs theme now more closely matches the upstream Sphinx theme (version 0.4.1). A number of new theme configuration settings were added which mirror the upstream configuration options. See the theme documentation for details.","title":"readthedocs theme updated with upstream (#588 and #1374)"},{"location":"about/release-notes/#update-mkdocs-theme-to-bootswatch-413-1563","text":"The mkdocs theme now supports all the features of Bootswatch 4.1 . Additionally, 2 filenames were changed in this update. If you are using a theme which inherits from the mkdocs theme, the theme developer may need to update these filenames as follows. css/bootstrap-custom.min.css => css/bootstrap.min.css js/bootstrap-3.0.3.min.js => js/bootstrap.min.js","title":"Update mkdocs theme to Bootswatch 4.1.3 (#1563)"},{"location":"about/release-notes/#improved-configuration-support-on-the-command-line-1401","text":"The build , serve , and gh-deploy subcommands now support flags to control whether directory URLs should be created: --use-directory-urls / --no-directory-urls . In addition, the gh-deploy subcommand now supports all the configuration options that build and serve do, adding --strict , --theme , --theme-dir , and --site-dir .","title":"Improved configuration support on the command line (#1401)"},{"location":"about/release-notes/#updated-lunr-languages-support-1729","text":"The lunr-languages plugin has been updated to 1.4.0, adding support for Arabic ( ar ) and Vietnamese ( vi ) languages. In addition, the Dutch and Japanese language codes have been changed to their standard values: nl and ja , respectively. The old language codes ( du and jp ) remain as aliases but may be removed in a future version of MkDocs.","title":"Updated lunr-languages support (#1729)"},{"location":"about/release-notes/#other-changes-and-additions-to-version-11","text":"Bugfix: Ensure nested dot files in themes are ignored and document behavior ( #1981 ). Update minimum dependency to Markdown 3.2.1. Updated minimum dependency to Jinja 2.10.1 to address security concerns ( #1780 ). Update to lunr.js 2.3.8 ( #1989 ). Add support for Python 3.8. Drop support for Python 3.4. Drop support for Python 2.7. MkDocs is PY3 only now ( #1926 ). Bugfix: Select appropriate asyncio event loop on Windows for Python 3.8+ ( #1885 ). Bugfix: Ensure nested index pages do not get identified as the homepage ( #1919 ). Bugfix: Properly identify deployment version ( #1879 ). Bugfix: Properly build ValidationError message for custom_dir ( #1849 ). Bugfix: Exclude Markdown files and READMEs from theme ( #1766 ). Bugfix: Account for encoded URLs ( #1670 ). Bugfix: Ensure theme files do not override docs_dir files ( #1671 ). Bugfix: Do not normalize URL fragments ( #1655 ). Bugfix: Skip external URLs in sitemap.xml ( #1742 ). Bugfix: Ensure theme files do not override docs_dir files on Windows ( #1876 ) Add canonical tag to readthedocs theme ( #1669 ). Improved error message for when git is not available. Add support for nav_style theme option for the mkdocs theme ( #1930 ). Bugfix: Long/nested dropdowns now behave more consistently for the mkdocs theme ( #1234 ). Bugfix: Multi-row nav headers in the mkdocs theme no longer obscure the document content ( #716 ). Add support for navigation_depth theme option for the mkdocs theme ( #1970 ). level attribute in page.toc items is now 1-indexed to match the level in <hN> tags ( #1970 ).","title":"Other Changes and Additions to Version 1.1"},{"location":"about/release-notes/#version-104-2018-09-07","text":"Bugfix: Ignore absolute links in Markdown ( #1621 ).","title":"Version 1.0.4 (2018-09-07)"},{"location":"about/release-notes/#version-103-2018-08-29","text":"Bugfix: Warn on relative paths in navigation ( #1604 ). Bugfix: Handle empty theme_config.yml files correctly ( #1602 ).","title":"Version 1.0.3 (2018-08-29)"},{"location":"about/release-notes/#version-102-2018-08-22","text":"Bugfix: Provide absolute base_url to error templates ( #1598 ).","title":"Version 1.0.2 (2018-08-22)"},{"location":"about/release-notes/#version-101-2018-08-13","text":"Bugfix: Prevent page reload when [Enter] is pressed in search box ( #1589 ). Bugfix: Avoid calling search until all assets are ready ( #1584 ). Bugfix: Exclude README.md if index.md is present ( #1580 ). Bugfix: Fix readthedocs theme navigation bug with homepage ( #1576 ).","title":"Version 1.0.1 (2018-08-13)"},{"location":"about/release-notes/#version-10-2018-08-03","text":"","title":"Version 1.0 (2018-08-03)"},{"location":"about/release-notes/#major-additions-to-version-10","text":"","title":"Major Additions to Version 1.0"},{"location":"about/release-notes/#internal-refactor-of-pages-files-and-navigation","text":"Internal handling of pages, files and navigation has been completely refactored. The changes included in the refactor are summarized below. Support for hidden pages. All Markdown pages are now included in the build regardless of whether they are included in the navigation configuration ( #699 ). The navigation can now include links to external sites ( #989 #1373 & #1406 ). Page data (including titles) is properly determined for all pages before any page is rendered ( #1347 ). Automatically populated navigation now sorts index pages to the top. In other words, The index page will be listed as the first child of a directory, while all other documents are sorted alphanumerically by file name after the index page ( #73 & #1042 ). A README.md file is now treated as an index file within a directory and will be rendered to index.html ( #608 ). The URLs for all files are computed once and stored in a files collection. This ensures all internal links are always computed correctly regardless of the configuration. This also allows all internal links to be validated, not just links to other Markdown pages. ( #842 & #872 ). A new url template filter smartly ensures all URLs are relative to the current page ( #1526 ). An on_files plugin event has been added, which could be used to include files not in the docs_dir , exclude files, redefine page URLs (i.e. implement extensionless URLs), or to manipulate files in various other ways.","title":"Internal Refactor of Pages, Files, and Navigation"},{"location":"about/release-notes/#backward-incompatible-changes","text":"As part of the internal refactor, a number of backward incompatible changes have been introduced, which are summarized below.","title":"Backward Incompatible Changes"},{"location":"about/release-notes/#urls-have-changed-when-use_directory_urls-is-false","text":"Previously, all Markdown pages would be have their filenames altered to be index pages regardless of how the use_directory_urls setting was configured. However, the path munging is only needed when use_directory_urls is set to True (the default). The path mangling no longer happens when use_directory_urls is set to False , which will result in different URLs for all pages that were not already index files. As this behavior only effects a non-default configuration, and the most common user-case for setting the option to False is for local file system ( file:// ) browsing, its not likely to effect most users. However, if you have use_directory_urls set to False for a MkDocs site hosted on a web server, most of your URLs will now be broken. As you can see below, the new URLs are much more sensible. Markdown file Old URL New URL index.md index.html index.html foo.md foo/index.html foo.html foo/bar.md foo/bar/index.html foo/bar.html Note that there has been no change to URLs or file paths when use_directory_urls is set to True (the default), except that MkDocs more consistently includes an ending slash on all internally generated URLs.","title":"URLs have changed when use_directory_urls is False"},{"location":"about/release-notes/#the-pages-configuration-setting-has-been-renamed-to-nav","text":"The pages configuration setting is deprecated and will issue a warning if set in the configuration file. The setting has been renamed nav . To update your configuration, simply rename the setting to nav . In other words, if your configuration looked like this: pages: - Home: index.md - User Guide: user-guide.md Simply edit the configuration as follows: nav: - Home: index.md - User Guide: user-guide.md In the current release, any configuration which includes a pages setting, but no nav setting, the pages configuration will be copied to nav and a warning will be issued. However, in a future release, that may no longer happen. If both pages and nav are defined, the pages setting will be ignored.","title":"The pages configuration setting has been renamed to nav"},{"location":"about/release-notes/#template-variables-and-base_url","text":"In previous versions of MkDocs some URLs expected the base_url template variable to be prepended to the URL and others did not. That inconsistency has been removed in that no URLs are modified before being added to the template context. For example, a theme template might have previously included a link to the site_name as: <a href=\"{{ nav.homepage.url }}\">{{ config.site_name }}</a> And MkDocs would magically return a URL for the homepage which was relative to the current page. That \"magic\" has been removed and the url template filter should be used: <a href=\"{{ nav.homepage.url|url }}\">{{ config.site_name }}</a> This change applies to any navigation items and pages, as well as the page.next_page and page.previous_page attributes. For the time being, the extra_javascript and extra_css variables continue to work as previously (without the url template filter), but they have been deprecated and the corresponding configuration values ( config.extra_javascript and config.extra_css respectively) should be used with the filter instead. {% for path in config.extra_css %} <link href=\"{{ path|url }}\" rel=\"stylesheet\"> {% endfor %} Note that navigation can now include links to external sites. Obviously, the base_url should not be prepended to these items. However, the url template filter is smart enough to recognize the URL is absolute and does not alter it. Therefore, all navigation items can be passed to the filter and only those that need to will be altered. {% for nav_item in nav %} <a href=\"{{ nav_item.url|url }}\">{{ nav_item.title }}</a> {% endfor %}","title":"Template variables and base_url"},{"location":"about/release-notes/#path-based-settings-are-relative-to-configuration-file-543","text":"Previously any relative paths in the various configuration options were resolved relative to the current working directory. They are now resolved relative to the configuration file. As the documentation has always encouraged running the various MkDocs commands from the directory that contains the configuration file (project root), this change will not affect most users. However, it will make it much easier to implement automated builds or otherwise run commands from a location other than the project root. Simply use the -f/--config-file option and point it at the configuration file: mkdocs build --config-file /path/to/my/config/file.yml As previously, if no file is specified, MkDocs looks for a file named mkdocs.yml in the current working directory.","title":"Path Based Settings are Relative to Configuration File (#543)"},{"location":"about/release-notes/#added-support-for-yaml-meta-data-1542","text":"Previously, MkDocs only supported MultiMarkdown style meta-data, which does not recognize different data types and is rather limited. MkDocs now also supports YAML style meta-data in Markdown documents. MkDocs relies on the the presence or absence of the deliminators ( --- or ... ) to determine whether YAML style meta-data or MultiMarkdown style meta-data is being used. Previously MkDocs would recognize MultiMarkdown style meta-data between the deliminators. Now, if the deliminators are detected, but the content between the deliminators is not valid YAML meta-data, MkDocs does not attempt to parse the content as MultiMarkdown style meta-data. Therefore, MultiMarkdown's style meta-data must not include the deliminators. See the MultiMarkdown style meta-data documentation for details. Prior to version 0.17, MkDocs returned all meta-data values as a list of strings (even a single line would return a list of one string). In version 0.17, that behavior was changed to return each value as a single string (multiple lines were joined), which some users found limiting (see #1471 ). That behavior continues for MultiMarkdown style meta-data in the current version. However, YAML style meta-data supports the full range of \"safe\" YAML data types. Therefore, it is recommended that any complex meta-data make use of the YAML style (see the YAML style meta-data documentation for details). In fact, a future version of MkDocs may deprecate support for MultiMarkdown style meta-data.","title":"Added support for YAML Meta-Data (#1542)"},{"location":"about/release-notes/#refactor-search-plugin","text":"The search plugin has been completely refactored to include support for the following features: Use a web worker in the browser with a fallback ( #1396 ). Optionally pre-build search index locally ( #859 & #1061 ). Upgrade to lunr.js 2.x ( #1319 ). Support search in languages other than English ( #826 ). Allow the user to define the word separators ( #867 ). Only run searches for queries of length > 2 ( #1127 ). Remove dependency on require.js ( #1218 ). Compress the search index ( #1128 ). Users can review the configuration options available and theme authors should review how search and themes interact.","title":"Refactor Search Plugin"},{"location":"about/release-notes/#theme_dir-configuration-option-fully-deprecated","text":"As of version 0.17, the custom_dir option replaced the deprecated theme_dir option. If users had set the theme_dir option, MkDocs version 0.17 copied the value to the theme.custom_dir option and a warning was issued. As of version 1.0, the value is no longer copied and an error is raised.","title":"theme_dir Configuration Option fully Deprecated"},{"location":"about/release-notes/#other-changes-and-additions-to-version-10","text":"Keyboard shortcuts changed to not conflict with commonly used accessibility shortcuts ( #1502 .) User friendly YAML parse errors ( #1543 ). Officially support Python 3.7. A missing theme configuration file now raises an error. Empty extra_css and extra_javascript settings no longer raise a warning. Add highlight.js configuration settings to built-in themes ( #1284 ). Close search modal when result is selected ( #1527 ). Add a level attribute to AnchorLinks ( #1272 ). Add MkDocs version check to gh-deploy script ( #640 ). Improve Markdown extension error messages. ( #782 ). Drop official support for Python 3.3 and set tornado>=5.0 ( #1427 ). Add support for GitLab edit links ( #1435 ). Link to GitHub issues from release notes ( #644 ). Expand {sha} and {version} in gh-deploy commit message ( #1410 ). Compress sitemap.xml ( #1130 ). Defer loading JS scripts ( #1380 ). Add a title attribute to the search input ( #1379 ). Update RespondJS to latest version ( #1398 ). Always load Google Analytics over HTTPS ( #1397 ). Improve scrolling frame rate ( #1394 ). Provide more version info. ( #1393 ). Refactor writing-your-docs.md ( #1392 ). Workaround Safari bug when zooming to < 100% ( #1389 ). Remove addition of clicky class to body and animations. ( #1387 ). Prevent search plugin from re-injecting extra_javascript files ( #1388 ). Refactor copy_media_files util function for more flexibility ( #1370 ). Remove PyPI Deployment Docs ( #1360 ). Update links to Python-Markdown library ( #1360 ). Document how to generate manpages for MkDocs commands ( #686 ).","title":"Other Changes and Additions to Version 1.0"},{"location":"about/release-notes/#version-0175-2018-07-06","text":"Bugfix: Fix Python 3.7 and PEP 479 incompatibility ( #1518 ).","title":"Version 0.17.5 (2018-07-06)"},{"location":"about/release-notes/#version-0174-2018-06-08","text":"Bugfix: Add multi-level nesting support to sitemap.xml ( #1482 ).","title":"Version 0.17.4 (2018-06-08)"},{"location":"about/release-notes/#version-0173-2018-03-07","text":"Bugfix: Set dependency tornado>=4.1,<5.0 due to changes in 5.0 ( #1428 ).","title":"Version 0.17.3 (2018-03-07)"},{"location":"about/release-notes/#version-0172-2017-11-15","text":"Bugfix: Correct extra_* config setting regressions ( #1335 & #1336 ).","title":"Version 0.17.2 (2017-11-15)"},{"location":"about/release-notes/#version-0171-2017-10-30","text":"Bugfix: Support repo_url with missing ending slash. ( #1321 ). Bugfix: Add length support to mkdocs.toc.TableOfContext ( #1325 ). Bugfix: Add some theme specific settings to the search plugin for third party themes ( #1316 ). Bugfix: Override site_url with dev_addr on local server ( #1317 ).","title":"Version 0.17.1 (2017-10-30)"},{"location":"about/release-notes/#version-0170-2017-10-19","text":"","title":"Version 0.17.0 (2017-10-19)"},{"location":"about/release-notes/#major-additions-to-version-0170","text":"","title":"Major Additions to Version 0.17.0"},{"location":"about/release-notes/#plugin-api-206","text":"A new Plugin API has been added to MkDocs which allows users to define their own custom behaviors. See the included documentation for a full explanation of the API. The previously built-in search functionality has been removed and wrapped in a plugin (named \"search\") with no changes in behavior. When MkDocs builds, the search index is now written to search/search_index.json instead of mkdocs/search_index.json . If no plugins setting is defined in the config, then the search plugin will be included by default. See the configuration documentation for information on overriding the default.","title":"Plugin API. (#206)"},{"location":"about/release-notes/#theme-customization-1164","text":"Support had been added to provide theme specific customizations. Theme authors can define default options as documented in Theme Configuration . A theme can now inherit from another theme, define various static templates to be rendered, and define arbitrary default variables to control behavior in the templates. The theme configuration is defined in a configuration file named mkdocs_theme.yml which should be placed at the root of your template files. A warning will be raised if no configuration file is found and an error will be raised in a future release. Users can override those defaults under the theme configuration option of their mkdocs.yml configuration file, which now accepts nested options. One such nested option is the custom_dir option, which replaces the now deprecated theme_dir option. If users had previously set the theme_dir option, a warning will be issued, with an error expected in a future release. If a configuration previously defined a theme_dir like this: theme: mkdocs theme_dir: custom Then the configuration should be adjusted as follows: theme: name: mkdocs custom_dir: custom See the theme configuration option documentation for details.","title":"Theme Customization. (#1164)"},{"location":"about/release-notes/#previously-deprecated-template-variables-removed-1168","text":"","title":"Previously deprecated Template variables removed. (#1168)"},{"location":"about/release-notes/#page-template","text":"The primary entry point for page templates has been changed from base.html to main.html . This allows base.html to continue to exist while allowing users to override main.html and extend base.html . For version 0.16, base.html continued to work if no main.html template existed, but it raised a deprecation warning. In version 1.0, a build will fail if no main.html template exists.","title":"Page Template"},{"location":"about/release-notes/#context-variables","text":"Page specific variable names in the template context have been refactored as defined in Custom Themes . The old variable names issued a warning in version 0.16, but have been removed in version 1.0. Any of the following old page variables should be updated to the new ones in user created and third-party templates: Old Variable Name New Variable Name current_page page page_title page.title content page.content toc page.toc meta page.meta canonical_url page.canonical_url previous_page page.previous_page next_page page.next_page Additionally, a number of global variables have been altered and/or removed and user created and third-party templates should be updated as outlined below: Old Variable Name New Variable Name or Expression current_page page include_nav nav|length>1 include_next_prev (page.next_page or page.previous_page) site_name config.site_name site_author config.site_author page_description config.site_description repo_url config.repo_url repo_name config.repo_name site_url config.site_url copyright config.copyright google_analytics config.google_analytics homepage_url nav.homepage.url favicon {{ base_url }}/img/favicon.ico","title":"Context Variables"},{"location":"about/release-notes/#auto-populated-extra_css-and-extra_javascript-fully-deprecated-986","text":"In previous versions of MkDocs, if the extra_css or extra_javascript config settings were empty, MkDocs would scan the docs_dir and auto-populate each setting with all of the CSS and JavaScript files found. On version 0.16 this behavior was deprecated and a warning was issued. In 0.17 any unlisted CSS and JavaScript files will not be included in the HTML templates, however, a warning will be issued. In other words, they will still be copied to the site-dir , but they will not have any effect on the theme if they are not explicitly listed. All CSS and JavaScript files in the docs_dir should be explicitly listed in the extra_css or extra_javascript config settings going forward.","title":"Auto-Populated extra_css and extra_javascript Fully Deprecated. (#986)"},{"location":"about/release-notes/#other-changes-and-additions-to-version-0170","text":"Add \"edit Link\" support to MkDocs theme ( #1129 ) Open files with utf-8-sig to account for BOM ( #1186 ) Symbolic links are now followed consistently ( #1134 ) Support for keyboard navigation shortcuts added to included themes ( #1095 ) Some refactoring and improvements to config_options ( #1296 ) Officially added support for Python 3.6 ( #1296 ) 404 Error page added to readthedocs theme ( #1296 )) Internal refactor of Markdown processing ( #713 ) Removed special error message for mkdocs-bootstrap and mkdocs-bootswatch themes ( #1168 ) The legacy pages config is no longer supported ( #1168 ) The deprecated json command has been removed ( #481 ) Support for Python 2.6 has been dropped ( #165 ) File permissions are no longer copied during build ( #1292 ) Support query and fragment strings in edit_uri ( #1224 & #1273 )","title":"Other Changes and Additions to Version 0.17.0"},{"location":"about/release-notes/#version-0163-2017-04-04","text":"Fix error raised by autoscrolling in the readthedocs theme ( #1177 ) Fix a few documentation typos ( #1181 & #1185 ) Fix a regression to livereload server introduced in 0.16.2 ( #1174 )","title":"Version 0.16.3 (2017-04-04)"},{"location":"about/release-notes/#version-0162-2017-03-13","text":"System root ( / ) is not a valid path for site_dir or docs_dir ( #1161 ) Refactor readthedocs theme navigation ( #1155 & #1156 ) Add support to dev server to serve custom error pages ( #1040 ) Ensure nav.homepage.url is not blank on error pages ( #1131 ) Increase livereload dependency to 2.5.1 ( #1106 )","title":"Version 0.16.2 (2017-03-13)"},{"location":"about/release-notes/#version-0161-2016-12-22","text":"Ensure scrollspy behavior does not affect nav bar ( #1094 ) Only \"load\" a theme when it is explicitly requested by the user ( #1105 )","title":"Version 0.16.1 (2016-12-22)"},{"location":"about/release-notes/#version-016-2016-11-04","text":"","title":"Version 0.16 (2016-11-04)"},{"location":"about/release-notes/#major-additions-to-version-0160","text":"","title":"Major Additions to Version 0.16.0"},{"location":"about/release-notes/#template-variables-refactored-874","text":"","title":"Template variables refactored. (#874)"},{"location":"about/release-notes/#page-context","text":"Page specific variable names in the template context have been refactored as defined in Custom Themes . The old variable names will issue a warning but continue to work for version 0.16, but may be removed in a future version. Any of the following old page variables should be updated to the new ones in user created and third-party templates: Old Variable Name New Variable Name current_page page page_title page.title content page.content toc page.toc meta page.meta canonical_url page.canonical_url previous_page page.previous_page next_page page.next_page","title":"Page Context"},{"location":"about/release-notes/#global-context","text":"Additionally, a number of global variables have been altered and/or deprecated and user created and third-party templates should be updated as outlined below: Previously, the global variable include_nav was altered programmatically based on the number of pages in the nav. The variable will issue a warning but continue to work for version 0.16, but may be removed in a future version. Use {% if nav|length>1 %} instead. Previously, the global variable include_next_prev was altered programmatically based on the number of pages in the nav. The variable will issue a warning but continue to work for version 0.16, but may be removed in a future version. Use {% if page.next_page or page.previous_page %} instead. Previously the global variable page_description was altered programmatically based on whether the current page was the homepage. Now it simply maps to config['site_description'] . Use {% if page.is_homepage %} in the template to conditionally change the description. The global variable homepage_url maps directly to nav.homepage.url and is being deprecated. The variable will issue a warning but continue to work for version 0.16, but may be removed in a future version. Use nav.homepage.url instead. The global variable favicon maps to the configuration setting site_favicon . Both the template variable and the configuration setting are being deprecated and will issue a warning but continue to work for version 0.16, and may be removed in a future version. Use {{ base_url }}/img/favicon.ico in your template instead. Users can simply save a copy of their custom favicon icon to img/favicon.ico in either their docs_dir or theme_dir . A number of variables map directly to similarly named variables in the config . Those variables are being deprecated and will issue a warning but continue to work for version 0.16, but may be removed in a future version. Use config.var_name instead, where var_name is the name of one of the configuration variables. Below is a summary of all of the changes made to the global context: Old Variable Name New Variable Name or Expression current_page page include_nav nav|length>1 include_next_prev (page.next_page or page.previous_page) site_name config.site_name site_author config.site_author page_description config.site_description repo_url config.repo_url repo_name config.repo_name site_url config.site_url copyright config.copyright google_analytics config.google_analytics homepage_url nav.homepage.url favicon {{ base_url }}/img/favicon.ico","title":"Global Context"},{"location":"about/release-notes/#increased-template-customization-607","text":"The built-in themes have been updated by having each of their many parts wrapped in template blocks which allow each individual block to be easily overridden using the theme_dir config setting. Without any new settings, you can use a different analytics service, replace the default search function, or alter the behavior of the navigation, among other things. See the relevant documentation for more details. To enable this feature, the primary entry point for page templates has been changed from base.html to main.html . This allows base.html to continue to exist while allowing users to override main.html and extend base.html . For version 0.16, base.html will continue to work if no main.html template exists, but it is deprecated and will raise a warning. In version 1.0, a build will fail if no main.html template exists. Any custom and third party templates should be updated accordingly. The easiest way for a third party theme to be updated would be to simply add a main.html file which only contains the following line: {% extends \"base.html\" %} That way, the theme contains the main.html entry point, and also supports overriding blocks in the same manner as the built-in themes. Third party themes are encouraged to wrap the various pieces of their templates in blocks in order to support such customization.","title":"Increased Template Customization. (#607)"},{"location":"about/release-notes/#auto-populated-extra_css-and-extra_javascript-deprecated-986","text":"In previous versions of MkDocs, if the extra_css or extra_javascript config settings were empty, MkDocs would scan the docs_dir and auto-populate each setting with all of the CSS and JavaScript files found. This behavior is deprecated and a warning will be issued. In the next release, the auto-populate feature will stop working and any unlisted CSS and JavaScript files will not be included in the HTML templates. In other words, they will still be copied to the site-dir , but they will not have any effect on the theme if they are not explicitly listed. All CSS and JavaScript files in the docs_dir should be explicitly listed in the extra_css or extra_javascript config settings going forward.","title":"Auto-Populated extra_css and extra_javascript Deprecated. (#986)"},{"location":"about/release-notes/#support-for-dirty-builds-990","text":"For large sites the build time required to create the pages can become problematic, thus a \"dirty\" build mode was created. This mode simply compares the modified time of the generated HTML and source markdown. If the markdown has changed since the HTML then the page is re-constructed. Otherwise, the page remains as is. This mode may be invoked in both the mkdocs serve and mkdocs build commands: mkdocs serve --dirtyreload mkdocs build --dirty It is important to note that this method for building the pages is for development of content only, since the navigation and other links do not get updated on other pages.","title":"Support for dirty builds. (#990)"},{"location":"about/release-notes/#stricter-directory-validation","text":"Previously, a warning was issued if the site_dir was a child directory of the docs_dir . This now raises an error. Additionally, an error is now raised if the docs_dir is set to the directory which contains your config file rather than a child directory. You will need to rearrange you directory structure to better conform with the documented layout .","title":"Stricter Directory Validation"},{"location":"about/release-notes/#other-changes-and-additions-to-version-0160","text":"Bugfix: Support gh-deploy command on Windows with Python 3 ( #722 ) Bugfix: Include .woff2 font files in Python package build ( #894 ) Various updates and improvements to Documentation Home Page/Tutorial ( #870 ) Bugfix: Support livereload for config file changes ( #735 ) Bugfix: Non-media template files are no longer copied with media files ( #807 ) Add a flag (-e/--theme-dir) to specify theme directory with the commands mkdocs build and mkdocs serve ( #832 ) Fixed issues with Unicode file names under Windows and Python 2. ( #833 ) Improved the styling of in-line code in the MkDocs theme. ( #718 ) Bugfix: convert variables to JSON when being passed to JavaScript ( #850 ) Updated the ReadTheDocs theme to match the upstream font sizes and colors more closely. ( #857 ) Fixes an issue with permalink markers showing when the mouse was far above them ( #843 ) Bugfix: Handle periods in directory name when automatically creating the pages config. ( #728 ) Update searching to Lunr 0.7, which comes with some performance enhancements for larger documents ( #859 ) Bugfix: Support SOURCE_DATE_EPOCH environment variable for \"reproducible\" builds ( #938 ) Follow links when copying media files ( #869 ). Change \"Edit on...\" links to point directly to the file in the source repository, rather than to the root of the repository ( #975 ), configurable via the new edit_uri setting. Bugfix: Don't override config value for strict mode if not specified on CLI ( #738 ). Add a --force flag to the gh-deploy command to force the push to the repository ( #973 ). Improve alignment for current selected menu item in readthedocs theme ( #888 ). http://user.github.io/repo => https://user.github.io/repo/ ( #1029 ). Improve installation instructions ( #1028 ). Account for wide tables and consistently wrap inline code spans ( #834 ). Bugfix: Use absolute URLs in nav & media links from error templates ( #77 ).","title":"Other Changes and Additions to Version 0.16.0"},{"location":"about/release-notes/#version-0153-2016-02-18","text":"Improve the error message the given theme can't be found. Fix an issue with relative symlinks ( #639 )","title":"Version 0.15.3 (2016-02-18)"},{"location":"about/release-notes/#version-0152-2016-02-08","text":"Fix an incorrect warning that states external themes will be removed from MkDocs .","title":"Version 0.15.2 (2016-02-08)"},{"location":"about/release-notes/#version-0151-2016-01-30","text":"Lower the minimum supported Click version to 3.3 for package maintainers. ( #763 )","title":"Version 0.15.1 (2016-01-30)"},{"location":"about/release-notes/#version-0150-2016-01-21","text":"","title":"Version 0.15.0 (2016-01-21)"},{"location":"about/release-notes/#major-additions-to-version-0150","text":"","title":"Major Additions to Version 0.15.0"},{"location":"about/release-notes/#add-support-for-installable-themes","text":"MkDocs now supports themes that are distributed via Python packages. With this addition, the Bootstrap and Bootswatch themes have been moved to external git repositories and python packages. See their individual documentation for more details about these specific themes. MkDocs Bootstrap MkDocs Bootswatch They will be included with MkDocs by default until a future release. After that they will be installable with pip: pip install mkdocs-bootstrap and pip install mkdocs-bootswatch See the documentation for Customizing Your Theme for more information about using and customizing themes and Custom themes for creating and distributing new themes","title":"Add support for installable themes"},{"location":"about/release-notes/#other-changes-and-additions-to-version-0150","text":"Fix issues when using absolute links to Markdown files. ( #628 ) Deprecate support of Python 2.6, pending removal in 1.0.0. ( #165 ) Add official support for Python version 3.5. Add support for site_description and site_author to the ReadTheDocs theme. ( #631 ) Update FontAwesome to 4.5.0. ( #789 ) Increase IE support with X-UA-Compatible. ( #785 ) Added support for Python's -m flag. ( #706 ) Bugfix: Ensure consistent ordering of auto-populated pages. ( #638 ) Bugfix: Scroll the tables of contents on the MkDocs theme if it is too long for the page. ( #204 ) Bugfix: Add all ancestors to the page attribute ancestors rather than just the initial one. ( #693 ) Bugfix: Include HTML in the build output again. ( #691 ) Bugfix: Provide filename to Read the Docs. ( #721 and RTD #1480 ) Bugfix: Silence Click's unicode_literals warning. ( #708 )","title":"Other Changes and Additions to Version 0.15.0"},{"location":"about/release-notes/#version-0140-2015-06-09","text":"Improve Unicode handling by ensuring that all config strings are loaded as Unicode. ( #592 ) Remove dependency on the six library. ( #583 ) Remove dependency on the ghp-import library. ( #547 ) Add --quiet and --verbose options to all sub-commands. ( #579 ) Add short options ( -a ) to most command line options. ( #579 ) Add copyright footer for readthedocs theme. ( #568 ) If the requested port in mkdocs serve is already in use, don't show the user a full stack trace. ( #596 ) Bugfix: Fix a JavaScript encoding problem when searching with spaces. ( #586 ) Bugfix: gh-deploy now works if the mkdocs.yml is not in the git repo root. ( #578 ) Bugfix: Handle (pass-through instead of dropping) HTML entities while parsing TOC. ( #612 ) Bugfix: Default extra_templates to an empty list, don't automatically discover them. ( #616 )","title":"Version 0.14.0 (2015-06-09)"},{"location":"about/release-notes/#version-0133-2015-06-02","text":"Bugfix: Reduce validation error to a warning if the site_dir is within the docs_dir as this shouldn't cause any problems with building but will inconvenience users building multiple times. ( #580 )","title":"Version 0.13.3 (2015-06-02)"},{"location":"about/release-notes/#version-0132-2015-05-30","text":"Bugfix: Ensure all errors and warnings are logged before exiting. ( #536 ) Bugfix: Fix compatibility issues with ReadTheDocs. ( #554 )","title":"Version 0.13.2 (2015-05-30)"},{"location":"about/release-notes/#version-0131-2015-05-27","text":"Bugfix: Fix a problem with minimal configurations which only contain a list of paths in the pages config. ( #562 )","title":"Version 0.13.1 (2015-05-27)"},{"location":"about/release-notes/#version-0130-2015-05-26","text":"","title":"Version 0.13.0 (2015-05-26)"},{"location":"about/release-notes/#deprecations-to-version-0130","text":"","title":"Deprecations to Version 0.13.0"},{"location":"about/release-notes/#deprecate-the-json-command","text":"In this release the mkdocs json command has been marked as deprecated and when used a deprecation warning will be shown. It will be removed in a future release of MkDocs, version 1.0 at the latest. The mkdocs json command provided a convenient way for users to output the documentation contents as JSON files but with the additions of search to MkDocs this functionality is duplicated. A new index with all the contents from a MkDocs build is created in the site_dir , so with the default value for the site_dir It can be found in site/mkdocs/search_index.json . This new file is created on every MkDocs build (with mkdocs build ) and no configuration is needed to enable it.","title":"Deprecate the JSON command"},{"location":"about/release-notes/#change-the-pages-configuration","text":"Provide a new way to define pages, and specifically nested pages, in the mkdocs.yml file and deprecate the existing approach, support will be removed with MkDocs 1.0.","title":"Change the pages configuration"},{"location":"about/release-notes/#warn-users-about-the-removal-of-builtin-themes","text":"All themes other than mkdocs and readthedocs will be moved into external packages in a future release of MkDocs. This will enable them to be more easily supported and updates outside MkDocs releases.","title":"Warn users about the removal of builtin themes"},{"location":"about/release-notes/#major-additions-to-version-0130","text":"","title":"Major Additions to Version 0.13.0"},{"location":"about/release-notes/#search","text":"Support for search has now been added to MkDocs. This is based on the JavaScript library lunr.js . It has been added to both the mkdocs and readthedocs themes. See the custom theme documentation on supporting search for adding it to your own themes.","title":"Search"},{"location":"about/release-notes/#new-command-line-interface","text":"The command line interface for MkDocs has been re-written with the Python library Click . This means that MkDocs now has an easier to use interface with better help output. This change is partially backwards incompatible as while undocumented it was possible to pass any configuration option to the different commands. Now only a small subset of the configuration options can be passed to the commands. To see in full commands and available arguments use mkdocs --help and mkdocs build --help to have them displayed.","title":"New Command Line Interface"},{"location":"about/release-notes/#support-extra-html-and-xml-files","text":"Like the extra_javascript and extra_css configuration options, a new option named extra_templates has been added. This will automatically be populated with any .html or .xml files in the project docs directory. Users can place static HTML and XML files and they will be copied over, or they can also use Jinja2 syntax and take advantage of the global variables . By default MkDocs will use this approach to create a sitemap for the documentation.","title":"Support Extra HTML and XML files"},{"location":"about/release-notes/#other-changes-and-additions-to-version-0130","text":"Add support for Markdown extension configuration options . ( #435 ) MkDocs now ships Python wheels . ( #486 ) Only include the build date and MkDocs version on the homepage. ( #490 ) Generate sitemaps for documentation builds. ( #436 ) Add a clearer way to define nested pages in the configuration. ( #482 ) Add an extra config option for passing arbitrary variables to the template. ( #510 ) Add --no-livereload to mkdocs serve for a simpler development server. ( #511 ) Add copyright display support to all themes ( #549 ) Add support for custom commit messages in a mkdocs gh-deploy ( #516 ) Bugfix: Fix linking to media within the same directory as a markdown file called index.md ( #535 ) Bugfix: Fix errors with Unicode filenames ( #542 ).","title":"Other Changes and Additions to Version 0.13.0"},{"location":"about/release-notes/#version-0122-2015-04-22","text":"Bugfix: Fix a regression where there would be an error if some child titles were missing but others were provided in the pages config. ( #464 )","title":"Version 0.12.2 (2015-04-22)"},{"location":"about/release-notes/#version-0121-2015-04-14","text":"Bugfix: Fixed a CSS bug in the table of contents on some browsers where the bottom item was not clickable.","title":"Version 0.12.1 (2015-04-14)"},{"location":"about/release-notes/#version-0120-2015-04-14","text":"Display the current MkDocs version in the CLI output. ( #258 ) Check for CNAME file when using gh-deploy. ( #285 ) Add the homepage back to the navigation on all themes. ( #271 ) Add a strict more for local link checking. ( #279 ) Add Google analytics support to all themes. ( #333 ) Add build date and MkDocs version to the ReadTheDocs and MkDocs theme outputs. ( #382 ) Standardize highlighting across all themes and add missing languages. ( #387 ) Add a verbose flag. (-v) to show more details about what the build. ( #147 ) Add the option to specify a remote branch when deploying to GitHub. This enables deploying to GitHub pages on personal and repo sites. ( #354 ) Add favicon support to the ReadTheDocs theme HTML. ( #422 ) Automatically refresh the browser when files are edited. ( #163 ) Bugfix: Never re-write URLs in code blocks. ( #240 ) Bugfix: Don't copy dotfiles when copying media from the docs_dir . ( #254 ) Bugfix: Fix the rendering of tables in the ReadTheDocs theme. ( #106 ) Bugfix: Add padding to the bottom of all bootstrap themes. ( #255 ) Bugfix: Fix issues with nested Markdown pages and the automatic pages configuration. ( #276 ) Bugfix: Fix a URL parsing error with GitHub enterprise. ( #284 ) Bugfix: Don't error if the mkdocs.yml is completely empty. ( #288 ) Bugfix: Fix a number of problems with relative URLs and Markdown files. ( #292 ) Bugfix: Don't stop the build if a page can't be found, continue with other pages. ( #150 ) Bugfix: Remove the site_name from the page title, this needs to be added manually. ( #299 ) Bugfix: Fix an issue with table of contents cutting off Markdown. ( #294 ) Bugfix: Fix hostname for BitBucket. ( #339 ) Bugfix: Ensure all links end with a slash. ( #344 ) Bugfix: Fix repo links in the readthedocs theme. ( #365 ) Bugfix: Include jQuery locally to avoid problems using MkDocs offline. ( #143 ) Bugfix: Don't allow the docs_dir to be in the site_dir or vice versa. ( #384 ) Bugfix: Remove inline CSS in the ReadTheDocs theme. ( #393 ) Bugfix: Fix problems with the child titles due to the order the pages config was processed. ( #395 ) Bugfix: Don't error during live reload when the theme doesn't exist. ( #373 ) Bugfix: Fix problems with the Meta extension when it may not exist. ( #398 ) Bugfix: Wrap long inline code otherwise they will run off the screen. ( #313 ) Bugfix: Remove HTML parsing regular expressions and parse with HTMLParser to fix problems with titles containing code. ( #367 ) Bugfix: Fix an issue with the scroll to anchor causing the title to be hidden under the navigation. ( #7 ) Bugfix: Add nicer CSS classes to the HTML tables in bootswatch themes. ( #295 ) Bugfix: Fix an error when passing in a specific config file with mkdocs serve . ( #341 ) Bugfix: Don't overwrite index.md files with the mkdocs new command. ( #412 ) Bugfix: Remove bold and italic from code in the ReadTheDocs theme. ( #411 ) Bugfix: Display images inline in the MkDocs theme. ( #415 ) Bugfix: Fix problems with no-highlight in the ReadTheDocs theme. ( #319 ) Bugfix: Don't delete hidden files when using mkdocs build --clean . ( #346 ) Bugfix: Don't block newer versions of Python-markdown on Python >= 2.7. ( #376 ) Bugfix: Fix encoding issues when opening files across platforms. ( #428 )","title":"Version 0.12.0 (2015-04-14)"},{"location":"about/release-notes/#version-0111-2014-11-20","text":"Bugfix: Fix a CSS wrapping issue with code highlighting in the ReadTheDocs theme. ( #233 )","title":"Version 0.11.1 (2014-11-20)"},{"location":"about/release-notes/#version-0110-2014-11-18","text":"Render 404.html files if they exist for the current theme. ( #194 ) Bugfix: Fix long nav bars, table rendering and code highlighting in MkDocs and ReadTheDocs themes. ( #225 ) Bugfix: Fix an issue with the google_analytics code. ( #219 ) Bugfix: Remove __pycache__ from the package tar. ( #196 ) Bugfix: Fix markdown links that go to an anchor on the current page. ( #197 ) Bugfix: Don't add prettyprint well CSS classes to all HTML, only add it in the MkDocs theme. ( #183 ) Bugfix: Display section titles in the ReadTheDocs theme. ( #175 ) Bugfix: Use the polling observer in watchdog so rebuilding works on filesystems without inotify. ( #184 ) Bugfix: Improve error output for common configuration related errors. ( #176 )","title":"Version 0.11.0 (2014-11-18)"},{"location":"about/release-notes/#version-0100-2014-10-29","text":"Added support for Python 3.3 and 3.4. ( #103 ) Configurable Python-Markdown extensions with the config setting markdown_extensions . ( #74 ) Added mkdocs json command to output your rendered documentation as json files. ( #128 ) Added --clean switch to build , json and gh-deploy commands to remove stale files from the output directory. ( #157 ) Support multiple theme directories to allow replacement of individual templates rather than copying the full theme. ( #129 ) Bugfix: Fix <ul> rendering in readthedocs theme. ( #171 ) Bugfix: Improve the readthedocs theme on smaller displays. ( #168 ) Bugfix: Relaxed required python package versions to avoid clashes. ( #104 ) Bugfix: Fix issue rendering the table of contents with some configs. ( #146 ) Bugfix: Fix path for embedded images in sub pages. ( #138 ) Bugfix: Fix use_directory_urls config behavior. ( #63 ) Bugfix: Support extra_javascript and extra_css in all themes. ( #90 ) Bugfix: Fix path-handling under Windows. ( #121 ) Bugfix: Fix the menu generation in the readthedocs theme. ( #110 ) Bugfix: Fix the mkdocs command creation under Windows. ( #122 ) Bugfix: Correctly handle external extra_javascript and extra_css . ( #92 ) Bugfix: Fixed favicon support. ( #87 )","title":"Version 0.10.0 (2014-10-29)"},{"location":"dev-guide/","text":"Developer Guide \uf0c1 Extending MkDocs The MkDocs Developer Guide provides documentation for developers of third party themes and plugins. Please see the Contributing Guide for information on contributing to MkDocs itself. You can jump directly to a page listed below, or use the next and previous buttons in the navigation bar at the top of the page to move through the documentation in order. Themes Translations Plugins API Reference","title":"Developer Guide"},{"location":"dev-guide/#developer-guide","text":"Extending MkDocs The MkDocs Developer Guide provides documentation for developers of third party themes and plugins. Please see the Contributing Guide for information on contributing to MkDocs itself. You can jump directly to a page listed below, or use the next and previous buttons in the navigation bar at the top of the page to move through the documentation in order. Themes Translations Plugins API Reference","title":"Developer Guide"},{"location":"dev-guide/api/","text":"API reference \uf0c1 Note The main entry point to the API is through Events that are received by plugins. These events' descriptions link back to this page. mkdocs.structure.files.Files \uf0c1 A collection of File objects. src_paths: dict[str, File] property \uf0c1 Soft-deprecated, prefer src_uris . src_uris: Mapping[str, File] property \uf0c1 A mapping containing every file, with the keys being their src_uri . __iter__() -> Iterator[File] \uf0c1 Iterate over the files within. __len__() -> int \uf0c1 The number of files within. __contains__(path: str) -> bool \uf0c1 Soft-deprecated, prefer get_file_from_path(path) is not None . get_file_from_path(path: str) -> File | None \uf0c1 Return a File instance with File.src_uri equal to path. append(file: File) -> None \uf0c1 Add file to the Files collection. remove(file: File) -> None \uf0c1 Remove file from Files collection. copy_static_files(dirty: bool = False, *, inclusion: Callable[[InclusionLevel], bool] = InclusionLevel.is_included) -> None \uf0c1 Copy static files from source to destination. documentation_pages(*, inclusion: Callable[[InclusionLevel], bool] = InclusionLevel.is_included) -> Sequence[File] \uf0c1 Return iterable of all Markdown page file objects. static_pages() -> Sequence[File] \uf0c1 Return iterable of all static page file objects. media_files() -> Sequence[File] \uf0c1 Return iterable of all file objects which are not documentation or static pages. javascript_files() -> Sequence[File] \uf0c1 Return iterable of all javascript file objects. css_files() -> Sequence[File] \uf0c1 Return iterable of all CSS file objects. add_files_from_theme(env: jinja2.Environment, config: MkDocsConfig) -> None \uf0c1 Retrieve static files from Jinja environment and add to collection. mkdocs.structure.files.File \uf0c1 A MkDocs File object. It represents how the contents of one file should be populated in the destination site. A file always has its abs_dest_path (obtained by joining dest_dir and dest_path ), where the dest_dir is understood to be the site directory. content_bytes / content_string (new in MkDocs 1.6) can always be used to obtain the file's content. But it may be backed by one of the two sources: A physical source file at abs_src_path (by default obtained by joining src_dir and src_uri ). src_dir is understood to be the docs directory. Then content_bytes / content_string will read the file at abs_src_path . src_dir should be populated for real files and should be None for generated files. Since MkDocs 1.6 a file may alternatively be stored in memory - content_string / content_bytes . Then src_dir and abs_src_path will remain None . content_bytes / content_string need to be written to, or populated through the content argument in the constructor. But src_uri is still populated for such files as well! The virtual file pretends as if it originated from that path in the docs directory, and other values are derived. For static files the file is just copied to the destination, and dest_uri equals src_uri . For Markdown files (determined by the file extension in src_uri ) the destination content will be the rendered content, and dest_uri will have the .html extension and some additional transformations to the path, based on use_directory_urls . src_uri: str instance-attribute \uf0c1 The pure path (always '/'-separated) of the source file relative to the source directory. generated_by: str | None = None class-attribute instance-attribute \uf0c1 If not None, indicates that a plugin generated this file on the fly. The value is the plugin's entrypoint name and can be used to find the plugin by key in the PluginCollection. dest_path: str property writable \uf0c1 Same as dest_uri (and synchronized with it) but will use backslashes on Windows. Discouraged. src_path: str = path instance-attribute property writable \uf0c1 Same as src_uri (and synchronized with it) but will use backslashes on Windows. Discouraged. src_dir: str | None = src_dir instance-attribute \uf0c1 The OS path of the top-level directory that the source file originates from. Assumed to be the docs_dir ; not populated for generated files. dest_dir: str = dest_dir instance-attribute \uf0c1 The OS path of the destination directory (top-level site_dir) that the file should be copied to. use_directory_urls: bool = use_directory_urls instance-attribute \uf0c1 Whether directory URLs ('foo/') should be used or not ('foo.html'). If False , a Markdown file is mapped to an HTML file of the same name (the file extension is changed to .html ). If True, a Markdown file is mapped to an HTML index file ( index.html ) nested in a directory using the \"name\" of the file in path . Non-Markdown files retain their original path. inclusion: InclusionLevel = inclusion class-attribute instance-attribute \uf0c1 Whether the file will be excluded from the built site. name = cached_property(_get_stem) class-attribute instance-attribute \uf0c1 Return the name of the file without its extension. dest_uri = cached_property(_get_dest_path) class-attribute instance-attribute \uf0c1 The pure path (always '/'-separated) of the destination file relative to the destination directory. url = cached_property(_get_url) class-attribute instance-attribute \uf0c1 The URI of the destination file relative to the destination directory as a string. abs_src_path: str | None cached property \uf0c1 The absolute concrete path of the source file. Will use backslashes on Windows. Note: do not use this path to read the file, prefer content_bytes / content_string . abs_dest_path: str cached property \uf0c1 The absolute concrete path of the destination file. Will use backslashes on Windows. content_bytes: bytes property writable \uf0c1 Get the content of this file as a bytestring. May raise if backed by a real file ( abs_src_path ) if it cannot be read. If used as a setter, it defines the content of the file, and abs_src_path becomes unset. content_string: str property writable \uf0c1 Get the content of this file as a string. Assumes UTF-8 encoding, may raise. May also raise if backed by a real file ( abs_src_path ) if it cannot be read. If used as a setter, it defines the content of the file, and abs_src_path becomes unset. generated(config: MkDocsConfig, src_uri: str, *, content: str | bytes | None = None, abs_src_path: str | None = None, inclusion: InclusionLevel = InclusionLevel.UNDEFINED) -> File classmethod \uf0c1 Create a virtual file, backed either by in-memory content or by a file at abs_src_path . It will pretend to be a file in the docs dir at src_uri . edit_uri() -> str | None \uf0c1 A path relative to the source repository to use for the \"edit\" button. Defaults to src_uri and can be overwritten. For generated files this should be set to None . url_relative_to(other: File | str) -> str \uf0c1 Return url for file relative to other file. copy_file(dirty: bool = False) -> None \uf0c1 Copy source file to destination, ensuring parent directories exist. is_documentation_page() -> bool \uf0c1 Return True if file is a Markdown page. is_static_page() -> bool \uf0c1 Return True if file is a static page (HTML, XML, JSON). is_media_file() -> bool \uf0c1 Return True if file is not a documentation or static page. is_javascript() -> bool \uf0c1 Return True if file is a JavaScript file. is_css() -> bool \uf0c1 Return True if file is a CSS file. mkdocs.config.base.Config \uf0c1 Bases: UserDict Base class for MkDocs configuration, plugin configuration (and sub-configuration) objects. It should be subclassed and have ConfigOption s defined as attributes. For examples, see mkdocs/contrib/search/ init .py and mkdocs/config/defaults.py. Behavior as it was prior to MkDocs 1.4 is now handled by LegacyConfig. __new__(*args, **kwargs) -> Config \uf0c1 Compatibility: allow referring to LegacyConfig(...) constructor as Config(...) . set_defaults() -> None \uf0c1 Set the base config by going through each validator and getting the default if it has one. load_dict(patch: dict) -> None \uf0c1 Load config options from a dictionary. load_file(config_file: IO) -> None \uf0c1 Load config options from the open file descriptor of a YAML file. mkdocs.utils.templates.TemplateContext \uf0c1 Bases: TypedDict nav: Navigation instance-attribute \uf0c1 pages: Sequence[File] instance-attribute \uf0c1 base_url: str instance-attribute \uf0c1 extra_css: Sequence[str] instance-attribute \uf0c1 extra_javascript: Sequence[str] instance-attribute \uf0c1 mkdocs_version: str instance-attribute \uf0c1 build_date_utc: datetime.datetime instance-attribute \uf0c1 config: MkDocsConfig instance-attribute \uf0c1 page: Page | None instance-attribute \uf0c1 mkdocs.livereload.LiveReloadServer \uf0c1 Bases: ThreadingMixIn , WSGIServer watch(path: str, func: None = None, *, recursive: bool = True) -> None \uf0c1 Add the 'path' to watched paths, call the function and reload when any file changes under it. unwatch(path: str) -> None \uf0c1 Stop watching file changes for path. Raises if there was no corresponding watch call.","title":"API Reference"},{"location":"dev-guide/api/#api-reference","text":"Note The main entry point to the API is through Events that are received by plugins. These events' descriptions link back to this page.","title":"API reference"},{"location":"dev-guide/api/#mkdocs.structure.files.Files","text":"A collection of File objects.","title":"Files"},{"location":"dev-guide/api/#mkdocs.structure.files.Files.src_paths","text":"Soft-deprecated, prefer src_uris .","title":"src_paths"},{"location":"dev-guide/api/#mkdocs.structure.files.Files.src_uris","text":"A mapping containing every file, with the keys being their src_uri .","title":"src_uris"},{"location":"dev-guide/api/#mkdocs.structure.files.Files.__iter__","text":"Iterate over the files within.","title":"__iter__()"},{"location":"dev-guide/api/#mkdocs.structure.files.Files.__len__","text":"The number of files within.","title":"__len__()"},{"location":"dev-guide/api/#mkdocs.structure.files.Files.__contains__","text":"Soft-deprecated, prefer get_file_from_path(path) is not None .","title":"__contains__()"},{"location":"dev-guide/api/#mkdocs.structure.files.Files.get_file_from_path","text":"Return a File instance with File.src_uri equal to path.","title":"get_file_from_path()"},{"location":"dev-guide/api/#mkdocs.structure.files.Files.append","text":"Add file to the Files collection.","title":"append()"},{"location":"dev-guide/api/#mkdocs.structure.files.Files.remove","text":"Remove file from Files collection.","title":"remove()"},{"location":"dev-guide/api/#mkdocs.structure.files.Files.copy_static_files","text":"Copy static files from source to destination.","title":"copy_static_files()"},{"location":"dev-guide/api/#mkdocs.structure.files.Files.documentation_pages","text":"Return iterable of all Markdown page file objects.","title":"documentation_pages()"},{"location":"dev-guide/api/#mkdocs.structure.files.Files.static_pages","text":"Return iterable of all static page file objects.","title":"static_pages()"},{"location":"dev-guide/api/#mkdocs.structure.files.Files.media_files","text":"Return iterable of all file objects which are not documentation or static pages.","title":"media_files()"},{"location":"dev-guide/api/#mkdocs.structure.files.Files.javascript_files","text":"Return iterable of all javascript file objects.","title":"javascript_files()"},{"location":"dev-guide/api/#mkdocs.structure.files.Files.css_files","text":"Return iterable of all CSS file objects.","title":"css_files()"},{"location":"dev-guide/api/#mkdocs.structure.files.Files.add_files_from_theme","text":"Retrieve static files from Jinja environment and add to collection.","title":"add_files_from_theme()"},{"location":"dev-guide/api/#mkdocs.structure.files.File","text":"A MkDocs File object. It represents how the contents of one file should be populated in the destination site. A file always has its abs_dest_path (obtained by joining dest_dir and dest_path ), where the dest_dir is understood to be the site directory. content_bytes / content_string (new in MkDocs 1.6) can always be used to obtain the file's content. But it may be backed by one of the two sources: A physical source file at abs_src_path (by default obtained by joining src_dir and src_uri ). src_dir is understood to be the docs directory. Then content_bytes / content_string will read the file at abs_src_path . src_dir should be populated for real files and should be None for generated files. Since MkDocs 1.6 a file may alternatively be stored in memory - content_string / content_bytes . Then src_dir and abs_src_path will remain None . content_bytes / content_string need to be written to, or populated through the content argument in the constructor. But src_uri is still populated for such files as well! The virtual file pretends as if it originated from that path in the docs directory, and other values are derived. For static files the file is just copied to the destination, and dest_uri equals src_uri . For Markdown files (determined by the file extension in src_uri ) the destination content will be the rendered content, and dest_uri will have the .html extension and some additional transformations to the path, based on use_directory_urls .","title":"File"},{"location":"dev-guide/api/#mkdocs.structure.files.File.src_uri","text":"The pure path (always '/'-separated) of the source file relative to the source directory.","title":"src_uri"},{"location":"dev-guide/api/#mkdocs.structure.files.File.generated_by","text":"If not None, indicates that a plugin generated this file on the fly. The value is the plugin's entrypoint name and can be used to find the plugin by key in the PluginCollection.","title":"generated_by"},{"location":"dev-guide/api/#mkdocs.structure.files.File.dest_path","text":"Same as dest_uri (and synchronized with it) but will use backslashes on Windows. Discouraged.","title":"dest_path"},{"location":"dev-guide/api/#mkdocs.structure.files.File.src_path","text":"Same as src_uri (and synchronized with it) but will use backslashes on Windows. Discouraged.","title":"src_path"},{"location":"dev-guide/api/#mkdocs.structure.files.File.src_dir","text":"The OS path of the top-level directory that the source file originates from. Assumed to be the docs_dir ; not populated for generated files.","title":"src_dir"},{"location":"dev-guide/api/#mkdocs.structure.files.File.dest_dir","text":"The OS path of the destination directory (top-level site_dir) that the file should be copied to.","title":"dest_dir"},{"location":"dev-guide/api/#mkdocs.structure.files.File.use_directory_urls","text":"Whether directory URLs ('foo/') should be used or not ('foo.html'). If False , a Markdown file is mapped to an HTML file of the same name (the file extension is changed to .html ). If True, a Markdown file is mapped to an HTML index file ( index.html ) nested in a directory using the \"name\" of the file in path . Non-Markdown files retain their original path.","title":"use_directory_urls"},{"location":"dev-guide/api/#mkdocs.structure.files.File.inclusion","text":"Whether the file will be excluded from the built site.","title":"inclusion"},{"location":"dev-guide/api/#mkdocs.structure.files.File.name","text":"Return the name of the file without its extension.","title":"name"},{"location":"dev-guide/api/#mkdocs.structure.files.File.dest_uri","text":"The pure path (always '/'-separated) of the destination file relative to the destination directory.","title":"dest_uri"},{"location":"dev-guide/api/#mkdocs.structure.files.File.url","text":"The URI of the destination file relative to the destination directory as a string.","title":"url"},{"location":"dev-guide/api/#mkdocs.structure.files.File.abs_src_path","text":"The absolute concrete path of the source file. Will use backslashes on Windows. Note: do not use this path to read the file, prefer content_bytes / content_string .","title":"abs_src_path"},{"location":"dev-guide/api/#mkdocs.structure.files.File.abs_dest_path","text":"The absolute concrete path of the destination file. Will use backslashes on Windows.","title":"abs_dest_path"},{"location":"dev-guide/api/#mkdocs.structure.files.File.content_bytes","text":"Get the content of this file as a bytestring. May raise if backed by a real file ( abs_src_path ) if it cannot be read. If used as a setter, it defines the content of the file, and abs_src_path becomes unset.","title":"content_bytes"},{"location":"dev-guide/api/#mkdocs.structure.files.File.content_string","text":"Get the content of this file as a string. Assumes UTF-8 encoding, may raise. May also raise if backed by a real file ( abs_src_path ) if it cannot be read. If used as a setter, it defines the content of the file, and abs_src_path becomes unset.","title":"content_string"},{"location":"dev-guide/api/#mkdocs.structure.files.File.generated","text":"Create a virtual file, backed either by in-memory content or by a file at abs_src_path . It will pretend to be a file in the docs dir at src_uri .","title":"generated()"},{"location":"dev-guide/api/#mkdocs.structure.files.File.edit_uri","text":"A path relative to the source repository to use for the \"edit\" button. Defaults to src_uri and can be overwritten. For generated files this should be set to None .","title":"edit_uri()"},{"location":"dev-guide/api/#mkdocs.structure.files.File.url_relative_to","text":"Return url for file relative to other file.","title":"url_relative_to()"},{"location":"dev-guide/api/#mkdocs.structure.files.File.copy_file","text":"Copy source file to destination, ensuring parent directories exist.","title":"copy_file()"},{"location":"dev-guide/api/#mkdocs.structure.files.File.is_documentation_page","text":"Return True if file is a Markdown page.","title":"is_documentation_page()"},{"location":"dev-guide/api/#mkdocs.structure.files.File.is_static_page","text":"Return True if file is a static page (HTML, XML, JSON).","title":"is_static_page()"},{"location":"dev-guide/api/#mkdocs.structure.files.File.is_media_file","text":"Return True if file is not a documentation or static page.","title":"is_media_file()"},{"location":"dev-guide/api/#mkdocs.structure.files.File.is_javascript","text":"Return True if file is a JavaScript file.","title":"is_javascript()"},{"location":"dev-guide/api/#mkdocs.structure.files.File.is_css","text":"Return True if file is a CSS file.","title":"is_css()"},{"location":"dev-guide/api/#mkdocs.config.base.Config","text":"Bases: UserDict Base class for MkDocs configuration, plugin configuration (and sub-configuration) objects. It should be subclassed and have ConfigOption s defined as attributes. For examples, see mkdocs/contrib/search/ init .py and mkdocs/config/defaults.py. Behavior as it was prior to MkDocs 1.4 is now handled by LegacyConfig.","title":"Config"},{"location":"dev-guide/api/#mkdocs.config.base.Config.__new__","text":"Compatibility: allow referring to LegacyConfig(...) constructor as Config(...) .","title":"__new__()"},{"location":"dev-guide/api/#mkdocs.config.base.Config.set_defaults","text":"Set the base config by going through each validator and getting the default if it has one.","title":"set_defaults()"},{"location":"dev-guide/api/#mkdocs.config.base.Config.load_dict","text":"Load config options from a dictionary.","title":"load_dict()"},{"location":"dev-guide/api/#mkdocs.config.base.Config.load_file","text":"Load config options from the open file descriptor of a YAML file.","title":"load_file()"},{"location":"dev-guide/api/#mkdocs.utils.templates.TemplateContext","text":"Bases: TypedDict","title":"TemplateContext"},{"location":"dev-guide/api/#mkdocs.utils.templates.TemplateContext.nav","text":"","title":"nav"},{"location":"dev-guide/api/#mkdocs.utils.templates.TemplateContext.pages","text":"","title":"pages"},{"location":"dev-guide/api/#mkdocs.utils.templates.TemplateContext.base_url","text":"","title":"base_url"},{"location":"dev-guide/api/#mkdocs.utils.templates.TemplateContext.extra_css","text":"","title":"extra_css"},{"location":"dev-guide/api/#mkdocs.utils.templates.TemplateContext.extra_javascript","text":"","title":"extra_javascript"},{"location":"dev-guide/api/#mkdocs.utils.templates.TemplateContext.mkdocs_version","text":"","title":"mkdocs_version"},{"location":"dev-guide/api/#mkdocs.utils.templates.TemplateContext.build_date_utc","text":"","title":"build_date_utc"},{"location":"dev-guide/api/#mkdocs.utils.templates.TemplateContext.config","text":"","title":"config"},{"location":"dev-guide/api/#mkdocs.utils.templates.TemplateContext.page","text":"","title":"page"},{"location":"dev-guide/api/#mkdocs.livereload.LiveReloadServer","text":"Bases: ThreadingMixIn , WSGIServer","title":"LiveReloadServer"},{"location":"dev-guide/api/#mkdocs.livereload.LiveReloadServer.watch","text":"Add the 'path' to watched paths, call the function and reload when any file changes under it.","title":"watch()"},{"location":"dev-guide/api/#mkdocs.livereload.LiveReloadServer.unwatch","text":"Stop watching file changes for path. Raises if there was no corresponding watch call.","title":"unwatch()"},{"location":"dev-guide/plugins/","text":"MkDocs Plugins \uf0c1 A Guide to installing, using and creating MkDocs Plugins Installing Plugins \uf0c1 Before a plugin can be used, it must be installed on the system. If you are using a plugin which comes with MkDocs, then it was installed when you installed MkDocs. However, to install third party plugins, you need to determine the appropriate package name and install it using pip : pip install mkdocs-foo-plugin Warning Installing an MkDocs plugin means installing a Python package and executing any code that the author has put in there. So, exercise the usual caution; there's no attempt at sandboxing. Once a plugin has been successfully installed, it is ready to use. It just needs to be enabled in the configuration file. The Catalog repository has a large ranked list of plugins that you can install and use. Using Plugins \uf0c1 The plugins configuration option should contain a list of plugins to use when building the site. Each \"plugin\" must be a string name assigned to the plugin (see the documentation for a given plugin to determine its \"name\"). A plugin listed here must already be installed . plugins: - search Some plugins may provide configuration options of their own. If you would like to set any configuration options, then you can nest a key/value mapping ( option_name: option value ) of any options that a given plugin supports. Note that a colon ( : ) must follow the plugin name and then on a new line the option name and value must be indented and separated by a colon. If you would like to define multiple options for a single plugin, each option must be defined on a separate line. plugins: - search: lang: en foo: bar For information regarding the configuration options available for a given plugin, see that plugin's documentation. For a list of default plugins and how to override them, see the configuration documentation. Developing Plugins \uf0c1 Like MkDocs, plugins must be written in Python. It is generally expected that each plugin would be distributed as a separate Python module, although it is possible to define multiple plugins in the same module. At a minimum, a MkDocs Plugin must consist of a BasePlugin subclass and an entry point which points to it. BasePlugin \uf0c1 A subclass of mkdocs.plugins.BasePlugin should define the behavior of the plugin. The class generally consists of actions to perform on specific events in the build process as well as a configuration scheme for the plugin. All BasePlugin subclasses contain the following attributes: config_scheme \uf0c1 A tuple of configuration validation instances. Each item must consist of a two item tuple in which the first item is the string name of the configuration option and the second item is an instance of mkdocs.config.config_options.BaseConfigOption or any of its subclasses. For example, the following config_scheme defines three configuration options: foo , which accepts a string; bar , which accepts an integer; and baz , which accepts a boolean value. class MyPlugin(mkdocs.plugins.BasePlugin): config_scheme = ( ('foo', mkdocs.config.config_options.Type(str, default='a default value')), ('bar', mkdocs.config.config_options.Type(int, default=0)), ('baz', mkdocs.config.config_options.Type(bool, default=True)) ) New in version 1.4 Subclassing Config to specify the config schema \uf0c1 To get type safety benefits, if you're targeting only MkDocs 1.4+, define the config schema as a class instead: class MyPluginConfig(mkdocs.config.base.Config): foo = mkdocs.config.config_options.Type(str, default='a default value') bar = mkdocs.config.config_options.Type(int, default=0) baz = mkdocs.config.config_options.Type(bool, default=True) class MyPlugin(mkdocs.plugins.BasePlugin[MyPluginConfig]): ... Examples of config definitions \uf0c1 Example from mkdocs.config import base, config_options as c class _ValidationOptions(base.Config): enabled = c.Type(bool, default=True) verbose = c.Type(bool, default=False) skip_checks = c.ListOfItems(c.Choice(('foo', 'bar', 'baz')), default=[]) class MyPluginConfig(base.Config): definition_file = c.File(exists=True) # required checksum_file = c.Optional(c.File(exists=True)) # can be None but must exist if specified validation = c.SubConfig(_ValidationOptions) From the user's point of view SubConfig is similar to Type(dict) , it's just that it also retains full ability for validation: you define all valid keys and what each value should adhere to. And ListOfItems is similar to Type(list) , but again, we define the constraint that each value must adhere to. This accepts a config as follows: my_plugin: definition_file: configs/test.ini # relative to mkdocs.yml validation: enabled: !ENV [CI, false] verbose: true skip_checks: - foo - baz Example import numbers from mkdocs.config import base, config_options as c class _Rectangle(base.Config): width = c.Type(numbers.Real) # required height = c.Type(numbers.Real) # required class MyPluginConfig(base.Config): add_rectangles = c.ListOfItems(c.SubConfig(_Rectangle)) # required In this example we define a list of complex items, and that's achieved by passing a concrete SubConfig to ListOfItems . This accepts a config as follows: my_plugin: add_rectangles: - width: 5 height: 7 - width: 12 height: 2 When the user's configuration is loaded, the above scheme will be used to validate the configuration and fill in any defaults for settings not provided by the user. The validation classes may be any of the classes provided in mkdocs.config.config_options or a third party subclass defined in the plugin. Any settings provided by the user which fail validation or are not defined in the config_scheme will raise a mkdocs.config.base.ValidationError . config \uf0c1 A dictionary of configuration options for the plugin, which is populated by the load_config method after configuration validation has completed. Use this attribute to access options provided by the user. def on_pre_build(self, config, **kwargs): if self.config['baz']: # implement \"baz\" functionality here... New in version 1.4 Safe attribute-based access \uf0c1 To get type safety benefits, if you're targeting only MkDocs 1.4+, access options as attributes instead: def on_pre_build(self, config, **kwargs): if self.config.baz: print(self.config.bar ** 2) # OK, `int ** 2` is valid. All BasePlugin subclasses contain the following method(s): load_config(options) \uf0c1 Loads configuration from a dictionary of options. Returns a tuple of (errors, warnings) . This method is called by MkDocs during configuration validation and should not need to be called by the plugin. on_<event_name>() \uf0c1 Optional methods which define the behavior for specific events . The plugin should define its behavior within these methods. Replace <event_name> with the actual name of the event. For example, the pre_build event would be defined in the on_pre_build method. Most events accept one positional argument and various keyword arguments. It is generally expected that the positional argument would be modified (or replaced) by the plugin and returned. If nothing is returned (the method returns None ), then the original, unmodified object is used. The keyword arguments are simply provided to give context and/or supply data which may be used to determine how the positional argument should be modified. It is good practice to accept keyword arguments as **kwargs . In the event that additional keywords are provided to an event in a future version of MkDocs, there will be no need to alter your plugin. For example, the following event would add an additional static_template to the theme config: class MyPlugin(BasePlugin): def on_config(self, config, **kwargs): config['theme'].static_templates.add('my_template.html') return config New in version 1.4 To get type safety benefits, if you're targeting only MkDocs 1.4+, access config options as attributes instead: def on_config(self, config: MkDocsConfig): config.theme.static_templates.add('my_template.html') return config Events \uf0c1 There are three kinds of events: Global Events , Page Events and Template Events . See a diagram with relations between all the plugin events The events themselves are shown in yellow, with their parameters. Arrows show the flow of arguments and outputs of each event. Sometimes they're omitted. The events are chronologically ordered from top to bottom. Dotted lines appear at splits from global events to per-page events. Click the events' titles to jump to their description. MkDocs cluster_on_startup on_startup cluster_build build cluster_on_config on_config cluster_on_pre_build on_pre_build cluster_on_files on_files cluster_on_nav on_nav cluster_populate_page populate_page cluster_on_pre_page on_pre_page cluster_on_page_read_source on_page_read_source cluster_on_page_markdown on_page_markdown cluster_on_page_content on_page_content cluster_on_env on_env cluster_populate_page_2 populate_page cluster_populate_page_3 populate_page cluster_build_page build_page cluster_on_page_context on_page_context cluster_on_post_page on_post_page cluster_build_page_2 build_page cluster_build_page_3 build_page cluster_on_post_build on_post_build cluster_on_serve on_serve cluster_on_shutdown on_shutdown on_startup command dirty load_config load_config on_config config on_pre_build config on_config:s->on_pre_build:n get_files get_files on_config:s->get_files on_files files config on_nav nav config files on_files:s->on_nav:n get_nav get_nav on_files:s->get_nav render_p render pages_point_a on_nav:s->pages_point_a get_context get_context on_nav:s->get_context load_config->on_config:n get_files->on_files:n get_nav->on_nav:n on_pre_page page config files on_page_read_source page config on_pre_page:s->on_page_read_source:n on_page_markdown markdown page config files on_page_read_source:s->on_page_markdown:n on_page_markdown:s->render_p on_page_content html page config files pages_point_b on_page_content:s->pages_point_b on_env env config files render_p->on_page_content:n pages_point_a->on_pre_page:n pages_point_a->render_p placeholder_cluster_populate_page_2 ... pages_point_a->placeholder_cluster_populate_page_2:n placeholder_cluster_populate_page_3 ... pages_point_a->placeholder_cluster_populate_page_3:n placeholder_cluster_populate_page_2:s->pages_point_b pages_point_b->on_env:n pages_point_c pages_point_b->pages_point_c placeholder_cluster_populate_page_3:s->pages_point_b on_env:s->get_context on_page_context context page config nav pages_point_c->on_page_context:n placeholder_cluster_build_page_2 ... pages_point_c->placeholder_cluster_build_page_2:n placeholder_cluster_build_page_3 ... pages_point_c->placeholder_cluster_build_page_3:n render render on_page_context:s->render on_post_page output page config write_file write_file on_post_page:s->write_file get_context->on_page_context:n render->on_post_page:n get_template get_template get_template->render on_post_build config on_serve server config on_shutdown One-time Events \uf0c1 One-time events run once per mkdocs invocation. The only case where these tangibly differ from global events is for mkdocs serve : global events, unlike these, will run multiple times -- once per build . on_startup \uf0c1 The startup event runs once at the very beginning of an mkdocs invocation. New in MkDocs 1.4. The presence of an on_startup method (even if empty) migrates the plugin to the new system where the plugin object is kept across builds within one mkdocs serve . Note that for initializing variables, the __init__ method is still preferred. For initializing per-build variables (and whenever in doubt), use the on_config event. Parameters: command ( Literal ['build', 'gh-deploy', 'serve'] ) \u2013 the command that MkDocs was invoked with, e.g. \"serve\" for mkdocs serve . dirty ( bool ) \u2013 whether --dirty flag was passed. on_shutdown \uf0c1 The shutdown event runs once at the very end of an mkdocs invocation, before exiting. This event is relevant only for support of mkdocs serve , otherwise within a single build it's undistinguishable from on_post_build . New in MkDocs 1.4. The presence of an on_shutdown method (even if empty) migrates the plugin to the new system where the plugin object is kept across builds within one mkdocs serve . Note the on_post_build method is still preferred for cleanups, when possible, as it has a much higher chance of actually triggering. on_shutdown is \"best effort\" because it relies on detecting a graceful shutdown of MkDocs. on_serve \uf0c1 The serve event is only called when the serve command is used during development. It runs only once, after the first build finishes. It is passed the Server instance which can be modified before it is activated. For example, additional files or directories could be added to the list of \"watched\" files for auto-reloading. Parameters: server ( LiveReloadServer ) \u2013 livereload.Server instance config ( MkDocsConfig ) \u2013 global configuration object builder ( Callable ) \u2013 a callable which gets passed to each call to server.watch Returns: LiveReloadServer | None \u2013 livereload.Server instance Global Events \uf0c1 Global events are called once per build at either the beginning or end of the build process. Any changes made in these events will have a global effect on the entire site. on_config \uf0c1 The config event is the first event called on build and is run immediately after the user configuration is loaded and validated. Any alterations to the config should be made here. Parameters: config ( MkDocsConfig ) \u2013 global configuration object Returns: MkDocsConfig | None \u2013 global configuration object on_pre_build \uf0c1 The pre_build event does not alter any variables. Use this event to call pre-build scripts. Parameters: config ( MkDocsConfig ) \u2013 global configuration object on_files \uf0c1 The files event is called after the files collection is populated from the docs_dir . Use this event to add, remove, or alter files in the collection. Note that Page objects have not yet been associated with the file objects in the collection. Use Page Events to manipulate page specific data. Parameters: files ( Files ) \u2013 global files collection config ( MkDocsConfig ) \u2013 global configuration object Returns: Files | None \u2013 global files collection on_nav \uf0c1 The nav event is called after the site navigation is created and can be used to alter the site navigation. Parameters: nav ( Navigation ) \u2013 global navigation object config ( MkDocsConfig ) \u2013 global configuration object files ( Files ) \u2013 global files collection Returns: Navigation | None \u2013 global navigation object on_env \uf0c1 The env event is called after the Jinja template environment is created and can be used to alter the Jinja environment . Parameters: env ( Environment ) \u2013 global Jinja environment config ( MkDocsConfig ) \u2013 global configuration object files ( Files ) \u2013 global files collection Returns: Environment | None \u2013 global Jinja Environment on_post_build \uf0c1 The post_build event does not alter any variables. Use this event to call post-build scripts. Parameters: config ( MkDocsConfig ) \u2013 global configuration object on_build_error \uf0c1 The build_error event is called after an exception of any kind is caught by MkDocs during the build process. Use this event to clean things up before MkDocs terminates. Note that any other events which were scheduled to run after the error will have been skipped. See Handling Errors for more details. Parameters: error ( Exception ) \u2013 exception raised Template Events \uf0c1 Template events are called once for each non-page template. Each template event will be called for each template defined in the extra_templates config setting as well as any static_templates defined in the theme. All template events are called after the env event and before any page events . on_pre_template \uf0c1 The pre_template event is called immediately after the subject template is loaded and can be used to alter the template. Parameters: template ( Template ) \u2013 a Jinja2 Template object template_name ( str ) \u2013 string filename of template config ( MkDocsConfig ) \u2013 global configuration object Returns: Template | None \u2013 a Jinja2 Template object on_template_context \uf0c1 The template_context event is called immediately after the context is created for the subject template and can be used to alter the context for that specific template only. Parameters: context ( TemplateContext ) \u2013 dict of template context variables template_name ( str ) \u2013 string filename of template config ( MkDocsConfig ) \u2013 global configuration object Returns: TemplateContext | None \u2013 dict of template context variables on_post_template \uf0c1 The post_template event is called after the template is rendered, but before it is written to disc and can be used to alter the output of the template. If an empty string is returned, the template is skipped and nothing is is written to disc. Parameters: output_content ( str ) \u2013 output of rendered template as string template_name ( str ) \u2013 string filename of template config ( MkDocsConfig ) \u2013 global configuration object Returns: str | None \u2013 output of rendered template as string Page Events \uf0c1 Page events are called once for each Markdown page included in the site. All page events are called after the post_template event and before the post_build event. on_pre_page \uf0c1 The pre_page event is called before any actions are taken on the subject page and can be used to alter the Page instance. Parameters: page ( Page ) \u2013 mkdocs.structure.pages.Page instance config ( MkDocsConfig ) \u2013 global configuration object files ( Files ) \u2013 global files collection Returns: Page | None \u2013 mkdocs.structure.pages.Page instance on_page_read_source \uf0c1 Deprecated Instead of this event, prefer one of these alternatives: Since MkDocs 1.6, instead set content_bytes / content_string of a File inside on_files . Usually (although it's not an exact alternative), on_page_markdown can serve the same purpose. The on_page_read_source event can replace the default mechanism to read the contents of a page's source from the filesystem. Parameters: page ( Page ) \u2013 mkdocs.structure.pages.Page instance config ( MkDocsConfig ) \u2013 global configuration object Returns: str | None \u2013 The raw source for a page as unicode string. If None is returned, the default loading from a file will be performed. on_page_markdown \uf0c1 The page_markdown event is called after the page's markdown is loaded from file and can be used to alter the Markdown source text. The meta- data has been stripped off and is available as page.meta at this point. Parameters: markdown ( str ) \u2013 Markdown source text of page as string page ( Page ) \u2013 mkdocs.structure.pages.Page instance config ( MkDocsConfig ) \u2013 global configuration object files ( Files ) \u2013 global files collection Returns: str | None \u2013 Markdown source text of page as string on_page_content \uf0c1 The page_content event is called after the Markdown text is rendered to HTML (but before being passed to a template) and can be used to alter the HTML body of the page. Parameters: html ( str ) \u2013 HTML rendered from Markdown source as string page ( Page ) \u2013 mkdocs.structure.pages.Page instance config ( MkDocsConfig ) \u2013 global configuration object files ( Files ) \u2013 global files collection Returns: str | None \u2013 HTML rendered from Markdown source as string on_page_context \uf0c1 The page_context event is called after the context for a page is created and can be used to alter the context for that specific page only. Parameters: context ( TemplateContext ) \u2013 dict of template context variables page ( Page ) \u2013 mkdocs.structure.pages.Page instance config ( MkDocsConfig ) \u2013 global configuration object nav ( Navigation ) \u2013 global navigation object Returns: TemplateContext | None \u2013 dict of template context variables on_post_page \uf0c1 The post_page event is called after the template is rendered, but before it is written to disc and can be used to alter the output of the page. If an empty string is returned, the page is skipped and nothing is written to disc. Parameters: output ( str ) \u2013 output of rendered template as string page ( Page ) \u2013 mkdocs.structure.pages.Page instance config ( MkDocsConfig ) \u2013 global configuration object Returns: str | None \u2013 output of rendered template as string Event Priorities \uf0c1 For each event type, corresponding methods of plugins are called in the order that the plugins appear in the plugins config . Since MkDocs 1.4, plugins can choose to set a priority value for their events. Events with higher priority are called first. Events without a chosen priority get a default of 0. Events that have the same priority are ordered as they appear in the config. mkdocs.plugins.event_priority(priority: float) -> Callable[[T], T] \uf0c1 A decorator to set an event priority for an event handler method. Recommended priority values: 100 \"first\", 50 \"early\", 0 \"default\", -50 \"late\", -100 \"last\". As different plugins discover more precise relations to each other, the values should be further tweaked. Usage example: @plugins.event_priority(-100) # Wishing to run this after all other plugins' `on_files` events. def on_files(self, files, config, **kwargs): ... New in MkDocs 1.4. Recommended shim for backwards compatibility: try: from mkdocs.plugins import event_priority except ImportError: event_priority = lambda priority: lambda f: f # No-op fallback New in version 1.6 There may also arise a need to register a handler for the same event at multiple different priorities. CombinedEvent makes this possible. mkdocs.plugins.CombinedEvent \uf0c1 Bases: Generic [ P , T ] A descriptor that allows defining multiple event handlers and declaring them under one event's name. Usage example: @plugins.event_priority(100) def _on_page_markdown_1(self, markdown: str, **kwargs): ... @plugins.event_priority(-50) def _on_page_markdown_2(self, markdown: str, **kwargs): ... on_page_markdown = plugins.CombinedEvent(_on_page_markdown_1, _on_page_markdown_2) Note The names of the sub-methods can't start with on_ ; instead they can start with _on_ like in the the above example, or anything else. Handling Errors \uf0c1 MkDocs defines four error types: mkdocs.exceptions.MkDocsException \uf0c1 Bases: ClickException The base class which all MkDocs exceptions inherit from. This should not be raised directly. One of the subclasses should be raised instead. mkdocs.exceptions.ConfigurationError \uf0c1 Bases: MkDocsException This error is raised by configuration validation when a validation error is encountered. This error should be raised by any configuration options defined in a plugin's config_scheme . mkdocs.exceptions.BuildError \uf0c1 Bases: MkDocsException This error may be raised by MkDocs during the build process. Plugins should not raise this error. mkdocs.exceptions.PluginError \uf0c1 Bases: BuildError A subclass of mkdocs.exceptions.BuildError which can be raised by plugin events. Unexpected and uncaught exceptions will interrupt the build process and produce typical Python tracebacks, which are useful for debugging your code. However, users generally find tracebacks overwhelming and often miss the helpful error message. Therefore, MkDocs will catch any of the errors listed above, retrieve the error message, and exit immediately with only the helpful message displayed to the user. Therefore, you might want to catch any exceptions within your plugin and raise a PluginError , passing in your own custom-crafted message, so that the build process is aborted with a helpful message. The on_build_error event will be triggered for any exception. For example: from mkdocs.exceptions import PluginError from mkdocs.plugins import BasePlugin class MyPlugin(BasePlugin): def on_post_page(self, output, page, config, **kwargs): try: # some code that could throw a KeyError ... except KeyError as error: raise PluginError(f\"Failed to find the item by key: '{error}'\") def on_build_error(self, error, **kwargs): # some code to clean things up ... Logging in plugins \uf0c1 To ensure that your plugins' log messages adhere with MkDocs' formatting and --verbose / --debug flags, please write the logs to a logger under the mkdocs.plugins. namespace. Example import logging log = logging.getLogger(f\"mkdocs.plugins.{__name__}\") log.warning(\"File '%s' not found. Breaks the build if --strict is passed\", my_file_name) log.info(\"Shown normally\") log.debug(\"Shown only with `--verbose`\") if log.getEffectiveLevel() <= logging.DEBUG: log.debug(\"Very expensive calculation only for debugging: %s\", get_my_diagnostics()) log.error() is another logging level that is differentiated by its look, but in all other ways it functions the same as warning , so it's strange to use it. If your plugin encounters an actual error, it is best to just interrupt the build by raising mkdocs.exceptions.PluginError (which will also log an ERROR message). New in version 1.5 MkDocs now provides a get_plugin_logger() convenience function that returns a logger like the above that is also prefixed with the plugin's name. mkdocs.plugins.get_plugin_logger(name: str) -> PrefixedLogger \uf0c1 Return a logger for plugins. Parameters: name ( str ) \u2013 The name to use with logging.getLogger . Returns: PrefixedLogger \u2013 A logger configured to work well in MkDocs, prefixing each message with the plugin package name. Example from mkdocs.plugins import get_plugin_logger log = get_plugin_logger(__name__) log.info(\"My plugin message\") Entry Point \uf0c1 Plugins need to be packaged as Python libraries (distributed on PyPI separate from MkDocs) and each must register as a Plugin via a setuptools entry_points . Add the following to your setup.py script: entry_points={ 'mkdocs.plugins': [ 'pluginname = path.to.some_plugin:SomePluginClass', ] } The pluginname would be the name used by users (in the config file) and path.to.some_plugin:SomePluginClass would be the importable plugin itself ( from path.to.some_plugin import SomePluginClass ) where SomePluginClass is a subclass of BasePlugin which defines the plugin behavior. Naturally, multiple Plugin classes could exist in the same module. Simply define each as a separate entry point. entry_points={ 'mkdocs.plugins': [ 'featureA = path.to.my_plugins:PluginA', 'featureB = path.to.my_plugins:PluginB' ] } Note that registering a plugin does not activate it. The user still needs to tell MkDocs to use it via the config. Publishing a Plugin \uf0c1 You should publish a package on PyPI , then add it to the Catalog for discoverability. Plugins are strongly recommended to have a unique plugin name (entry point name) according to the catalog.","title":"Plugins"},{"location":"dev-guide/plugins/#mkdocs-plugins","text":"A Guide to installing, using and creating MkDocs Plugins","title":"MkDocs Plugins"},{"location":"dev-guide/plugins/#installing-plugins","text":"Before a plugin can be used, it must be installed on the system. If you are using a plugin which comes with MkDocs, then it was installed when you installed MkDocs. However, to install third party plugins, you need to determine the appropriate package name and install it using pip : pip install mkdocs-foo-plugin Warning Installing an MkDocs plugin means installing a Python package and executing any code that the author has put in there. So, exercise the usual caution; there's no attempt at sandboxing. Once a plugin has been successfully installed, it is ready to use. It just needs to be enabled in the configuration file. The Catalog repository has a large ranked list of plugins that you can install and use.","title":"Installing Plugins"},{"location":"dev-guide/plugins/#using-plugins","text":"The plugins configuration option should contain a list of plugins to use when building the site. Each \"plugin\" must be a string name assigned to the plugin (see the documentation for a given plugin to determine its \"name\"). A plugin listed here must already be installed . plugins: - search Some plugins may provide configuration options of their own. If you would like to set any configuration options, then you can nest a key/value mapping ( option_name: option value ) of any options that a given plugin supports. Note that a colon ( : ) must follow the plugin name and then on a new line the option name and value must be indented and separated by a colon. If you would like to define multiple options for a single plugin, each option must be defined on a separate line. plugins: - search: lang: en foo: bar For information regarding the configuration options available for a given plugin, see that plugin's documentation. For a list of default plugins and how to override them, see the configuration documentation.","title":"Using Plugins"},{"location":"dev-guide/plugins/#developing-plugins","text":"Like MkDocs, plugins must be written in Python. It is generally expected that each plugin would be distributed as a separate Python module, although it is possible to define multiple plugins in the same module. At a minimum, a MkDocs Plugin must consist of a BasePlugin subclass and an entry point which points to it.","title":"Developing Plugins"},{"location":"dev-guide/plugins/#baseplugin","text":"A subclass of mkdocs.plugins.BasePlugin should define the behavior of the plugin. The class generally consists of actions to perform on specific events in the build process as well as a configuration scheme for the plugin. All BasePlugin subclasses contain the following attributes:","title":"BasePlugin"},{"location":"dev-guide/plugins/#config_scheme","text":"A tuple of configuration validation instances. Each item must consist of a two item tuple in which the first item is the string name of the configuration option and the second item is an instance of mkdocs.config.config_options.BaseConfigOption or any of its subclasses. For example, the following config_scheme defines three configuration options: foo , which accepts a string; bar , which accepts an integer; and baz , which accepts a boolean value. class MyPlugin(mkdocs.plugins.BasePlugin): config_scheme = ( ('foo', mkdocs.config.config_options.Type(str, default='a default value')), ('bar', mkdocs.config.config_options.Type(int, default=0)), ('baz', mkdocs.config.config_options.Type(bool, default=True)) ) New in version 1.4","title":"config_scheme"},{"location":"dev-guide/plugins/#subclassing-config-to-specify-the-config-schema","text":"To get type safety benefits, if you're targeting only MkDocs 1.4+, define the config schema as a class instead: class MyPluginConfig(mkdocs.config.base.Config): foo = mkdocs.config.config_options.Type(str, default='a default value') bar = mkdocs.config.config_options.Type(int, default=0) baz = mkdocs.config.config_options.Type(bool, default=True) class MyPlugin(mkdocs.plugins.BasePlugin[MyPluginConfig]): ...","title":"Subclassing Config to specify the config schema"},{"location":"dev-guide/plugins/#examples-of-config-definitions","text":"Example from mkdocs.config import base, config_options as c class _ValidationOptions(base.Config): enabled = c.Type(bool, default=True) verbose = c.Type(bool, default=False) skip_checks = c.ListOfItems(c.Choice(('foo', 'bar', 'baz')), default=[]) class MyPluginConfig(base.Config): definition_file = c.File(exists=True) # required checksum_file = c.Optional(c.File(exists=True)) # can be None but must exist if specified validation = c.SubConfig(_ValidationOptions) From the user's point of view SubConfig is similar to Type(dict) , it's just that it also retains full ability for validation: you define all valid keys and what each value should adhere to. And ListOfItems is similar to Type(list) , but again, we define the constraint that each value must adhere to. This accepts a config as follows: my_plugin: definition_file: configs/test.ini # relative to mkdocs.yml validation: enabled: !ENV [CI, false] verbose: true skip_checks: - foo - baz Example import numbers from mkdocs.config import base, config_options as c class _Rectangle(base.Config): width = c.Type(numbers.Real) # required height = c.Type(numbers.Real) # required class MyPluginConfig(base.Config): add_rectangles = c.ListOfItems(c.SubConfig(_Rectangle)) # required In this example we define a list of complex items, and that's achieved by passing a concrete SubConfig to ListOfItems . This accepts a config as follows: my_plugin: add_rectangles: - width: 5 height: 7 - width: 12 height: 2 When the user's configuration is loaded, the above scheme will be used to validate the configuration and fill in any defaults for settings not provided by the user. The validation classes may be any of the classes provided in mkdocs.config.config_options or a third party subclass defined in the plugin. Any settings provided by the user which fail validation or are not defined in the config_scheme will raise a mkdocs.config.base.ValidationError .","title":"Examples of config definitions"},{"location":"dev-guide/plugins/#config","text":"A dictionary of configuration options for the plugin, which is populated by the load_config method after configuration validation has completed. Use this attribute to access options provided by the user. def on_pre_build(self, config, **kwargs): if self.config['baz']: # implement \"baz\" functionality here... New in version 1.4","title":"config"},{"location":"dev-guide/plugins/#safe-attribute-based-access","text":"To get type safety benefits, if you're targeting only MkDocs 1.4+, access options as attributes instead: def on_pre_build(self, config, **kwargs): if self.config.baz: print(self.config.bar ** 2) # OK, `int ** 2` is valid. All BasePlugin subclasses contain the following method(s):","title":"Safe attribute-based access"},{"location":"dev-guide/plugins/#load_configoptions","text":"Loads configuration from a dictionary of options. Returns a tuple of (errors, warnings) . This method is called by MkDocs during configuration validation and should not need to be called by the plugin.","title":"load_config(options)"},{"location":"dev-guide/plugins/#on_event_name","text":"Optional methods which define the behavior for specific events . The plugin should define its behavior within these methods. Replace <event_name> with the actual name of the event. For example, the pre_build event would be defined in the on_pre_build method. Most events accept one positional argument and various keyword arguments. It is generally expected that the positional argument would be modified (or replaced) by the plugin and returned. If nothing is returned (the method returns None ), then the original, unmodified object is used. The keyword arguments are simply provided to give context and/or supply data which may be used to determine how the positional argument should be modified. It is good practice to accept keyword arguments as **kwargs . In the event that additional keywords are provided to an event in a future version of MkDocs, there will be no need to alter your plugin. For example, the following event would add an additional static_template to the theme config: class MyPlugin(BasePlugin): def on_config(self, config, **kwargs): config['theme'].static_templates.add('my_template.html') return config New in version 1.4 To get type safety benefits, if you're targeting only MkDocs 1.4+, access config options as attributes instead: def on_config(self, config: MkDocsConfig): config.theme.static_templates.add('my_template.html') return config","title":"on_&lt;event_name&gt;()"},{"location":"dev-guide/plugins/#events","text":"There are three kinds of events: Global Events , Page Events and Template Events . See a diagram with relations between all the plugin events The events themselves are shown in yellow, with their parameters. Arrows show the flow of arguments and outputs of each event. Sometimes they're omitted. The events are chronologically ordered from top to bottom. Dotted lines appear at splits from global events to per-page events. Click the events' titles to jump to their description. MkDocs cluster_on_startup on_startup cluster_build build cluster_on_config on_config cluster_on_pre_build on_pre_build cluster_on_files on_files cluster_on_nav on_nav cluster_populate_page populate_page cluster_on_pre_page on_pre_page cluster_on_page_read_source on_page_read_source cluster_on_page_markdown on_page_markdown cluster_on_page_content on_page_content cluster_on_env on_env cluster_populate_page_2 populate_page cluster_populate_page_3 populate_page cluster_build_page build_page cluster_on_page_context on_page_context cluster_on_post_page on_post_page cluster_build_page_2 build_page cluster_build_page_3 build_page cluster_on_post_build on_post_build cluster_on_serve on_serve cluster_on_shutdown on_shutdown on_startup command dirty load_config load_config on_config config on_pre_build config on_config:s->on_pre_build:n get_files get_files on_config:s->get_files on_files files config on_nav nav config files on_files:s->on_nav:n get_nav get_nav on_files:s->get_nav render_p render pages_point_a on_nav:s->pages_point_a get_context get_context on_nav:s->get_context load_config->on_config:n get_files->on_files:n get_nav->on_nav:n on_pre_page page config files on_page_read_source page config on_pre_page:s->on_page_read_source:n on_page_markdown markdown page config files on_page_read_source:s->on_page_markdown:n on_page_markdown:s->render_p on_page_content html page config files pages_point_b on_page_content:s->pages_point_b on_env env config files render_p->on_page_content:n pages_point_a->on_pre_page:n pages_point_a->render_p placeholder_cluster_populate_page_2 ... pages_point_a->placeholder_cluster_populate_page_2:n placeholder_cluster_populate_page_3 ... pages_point_a->placeholder_cluster_populate_page_3:n placeholder_cluster_populate_page_2:s->pages_point_b pages_point_b->on_env:n pages_point_c pages_point_b->pages_point_c placeholder_cluster_populate_page_3:s->pages_point_b on_env:s->get_context on_page_context context page config nav pages_point_c->on_page_context:n placeholder_cluster_build_page_2 ... pages_point_c->placeholder_cluster_build_page_2:n placeholder_cluster_build_page_3 ... pages_point_c->placeholder_cluster_build_page_3:n render render on_page_context:s->render on_post_page output page config write_file write_file on_post_page:s->write_file get_context->on_page_context:n render->on_post_page:n get_template get_template get_template->render on_post_build config on_serve server config on_shutdown","title":"Events"},{"location":"dev-guide/plugins/#one-time-events","text":"One-time events run once per mkdocs invocation. The only case where these tangibly differ from global events is for mkdocs serve : global events, unlike these, will run multiple times -- once per build .","title":"One-time Events"},{"location":"dev-guide/plugins/#on_startup","text":"The startup event runs once at the very beginning of an mkdocs invocation. New in MkDocs 1.4. The presence of an on_startup method (even if empty) migrates the plugin to the new system where the plugin object is kept across builds within one mkdocs serve . Note that for initializing variables, the __init__ method is still preferred. For initializing per-build variables (and whenever in doubt), use the on_config event. Parameters: command ( Literal ['build', 'gh-deploy', 'serve'] ) \u2013 the command that MkDocs was invoked with, e.g. \"serve\" for mkdocs serve . dirty ( bool ) \u2013 whether --dirty flag was passed.","title":"on_startup"},{"location":"dev-guide/plugins/#on_shutdown","text":"The shutdown event runs once at the very end of an mkdocs invocation, before exiting. This event is relevant only for support of mkdocs serve , otherwise within a single build it's undistinguishable from on_post_build . New in MkDocs 1.4. The presence of an on_shutdown method (even if empty) migrates the plugin to the new system where the plugin object is kept across builds within one mkdocs serve . Note the on_post_build method is still preferred for cleanups, when possible, as it has a much higher chance of actually triggering. on_shutdown is \"best effort\" because it relies on detecting a graceful shutdown of MkDocs.","title":"on_shutdown"},{"location":"dev-guide/plugins/#on_serve","text":"The serve event is only called when the serve command is used during development. It runs only once, after the first build finishes. It is passed the Server instance which can be modified before it is activated. For example, additional files or directories could be added to the list of \"watched\" files for auto-reloading. Parameters: server ( LiveReloadServer ) \u2013 livereload.Server instance config ( MkDocsConfig ) \u2013 global configuration object builder ( Callable ) \u2013 a callable which gets passed to each call to server.watch Returns: LiveReloadServer | None \u2013 livereload.Server instance","title":"on_serve"},{"location":"dev-guide/plugins/#global-events","text":"Global events are called once per build at either the beginning or end of the build process. Any changes made in these events will have a global effect on the entire site.","title":"Global Events"},{"location":"dev-guide/plugins/#on_config","text":"The config event is the first event called on build and is run immediately after the user configuration is loaded and validated. Any alterations to the config should be made here. Parameters: config ( MkDocsConfig ) \u2013 global configuration object Returns: MkDocsConfig | None \u2013 global configuration object","title":"on_config"},{"location":"dev-guide/plugins/#on_pre_build","text":"The pre_build event does not alter any variables. Use this event to call pre-build scripts. Parameters: config ( MkDocsConfig ) \u2013 global configuration object","title":"on_pre_build"},{"location":"dev-guide/plugins/#on_files","text":"The files event is called after the files collection is populated from the docs_dir . Use this event to add, remove, or alter files in the collection. Note that Page objects have not yet been associated with the file objects in the collection. Use Page Events to manipulate page specific data. Parameters: files ( Files ) \u2013 global files collection config ( MkDocsConfig ) \u2013 global configuration object Returns: Files | None \u2013 global files collection","title":"on_files"},{"location":"dev-guide/plugins/#on_nav","text":"The nav event is called after the site navigation is created and can be used to alter the site navigation. Parameters: nav ( Navigation ) \u2013 global navigation object config ( MkDocsConfig ) \u2013 global configuration object files ( Files ) \u2013 global files collection Returns: Navigation | None \u2013 global navigation object","title":"on_nav"},{"location":"dev-guide/plugins/#on_env","text":"The env event is called after the Jinja template environment is created and can be used to alter the Jinja environment . Parameters: env ( Environment ) \u2013 global Jinja environment config ( MkDocsConfig ) \u2013 global configuration object files ( Files ) \u2013 global files collection Returns: Environment | None \u2013 global Jinja Environment","title":"on_env"},{"location":"dev-guide/plugins/#on_post_build","text":"The post_build event does not alter any variables. Use this event to call post-build scripts. Parameters: config ( MkDocsConfig ) \u2013 global configuration object","title":"on_post_build"},{"location":"dev-guide/plugins/#on_build_error","text":"The build_error event is called after an exception of any kind is caught by MkDocs during the build process. Use this event to clean things up before MkDocs terminates. Note that any other events which were scheduled to run after the error will have been skipped. See Handling Errors for more details. Parameters: error ( Exception ) \u2013 exception raised","title":"on_build_error"},{"location":"dev-guide/plugins/#template-events","text":"Template events are called once for each non-page template. Each template event will be called for each template defined in the extra_templates config setting as well as any static_templates defined in the theme. All template events are called after the env event and before any page events .","title":"Template Events"},{"location":"dev-guide/plugins/#on_pre_template","text":"The pre_template event is called immediately after the subject template is loaded and can be used to alter the template. Parameters: template ( Template ) \u2013 a Jinja2 Template object template_name ( str ) \u2013 string filename of template config ( MkDocsConfig ) \u2013 global configuration object Returns: Template | None \u2013 a Jinja2 Template object","title":"on_pre_template"},{"location":"dev-guide/plugins/#on_template_context","text":"The template_context event is called immediately after the context is created for the subject template and can be used to alter the context for that specific template only. Parameters: context ( TemplateContext ) \u2013 dict of template context variables template_name ( str ) \u2013 string filename of template config ( MkDocsConfig ) \u2013 global configuration object Returns: TemplateContext | None \u2013 dict of template context variables","title":"on_template_context"},{"location":"dev-guide/plugins/#on_post_template","text":"The post_template event is called after the template is rendered, but before it is written to disc and can be used to alter the output of the template. If an empty string is returned, the template is skipped and nothing is is written to disc. Parameters: output_content ( str ) \u2013 output of rendered template as string template_name ( str ) \u2013 string filename of template config ( MkDocsConfig ) \u2013 global configuration object Returns: str | None \u2013 output of rendered template as string","title":"on_post_template"},{"location":"dev-guide/plugins/#page-events","text":"Page events are called once for each Markdown page included in the site. All page events are called after the post_template event and before the post_build event.","title":"Page Events"},{"location":"dev-guide/plugins/#on_pre_page","text":"The pre_page event is called before any actions are taken on the subject page and can be used to alter the Page instance. Parameters: page ( Page ) \u2013 mkdocs.structure.pages.Page instance config ( MkDocsConfig ) \u2013 global configuration object files ( Files ) \u2013 global files collection Returns: Page | None \u2013 mkdocs.structure.pages.Page instance","title":"on_pre_page"},{"location":"dev-guide/plugins/#on_page_read_source","text":"Deprecated Instead of this event, prefer one of these alternatives: Since MkDocs 1.6, instead set content_bytes / content_string of a File inside on_files . Usually (although it's not an exact alternative), on_page_markdown can serve the same purpose. The on_page_read_source event can replace the default mechanism to read the contents of a page's source from the filesystem. Parameters: page ( Page ) \u2013 mkdocs.structure.pages.Page instance config ( MkDocsConfig ) \u2013 global configuration object Returns: str | None \u2013 The raw source for a page as unicode string. If None is returned, the default loading from a file will be performed.","title":"on_page_read_source"},{"location":"dev-guide/plugins/#on_page_markdown","text":"The page_markdown event is called after the page's markdown is loaded from file and can be used to alter the Markdown source text. The meta- data has been stripped off and is available as page.meta at this point. Parameters: markdown ( str ) \u2013 Markdown source text of page as string page ( Page ) \u2013 mkdocs.structure.pages.Page instance config ( MkDocsConfig ) \u2013 global configuration object files ( Files ) \u2013 global files collection Returns: str | None \u2013 Markdown source text of page as string","title":"on_page_markdown"},{"location":"dev-guide/plugins/#on_page_content","text":"The page_content event is called after the Markdown text is rendered to HTML (but before being passed to a template) and can be used to alter the HTML body of the page. Parameters: html ( str ) \u2013 HTML rendered from Markdown source as string page ( Page ) \u2013 mkdocs.structure.pages.Page instance config ( MkDocsConfig ) \u2013 global configuration object files ( Files ) \u2013 global files collection Returns: str | None \u2013 HTML rendered from Markdown source as string","title":"on_page_content"},{"location":"dev-guide/plugins/#on_page_context","text":"The page_context event is called after the context for a page is created and can be used to alter the context for that specific page only. Parameters: context ( TemplateContext ) \u2013 dict of template context variables page ( Page ) \u2013 mkdocs.structure.pages.Page instance config ( MkDocsConfig ) \u2013 global configuration object nav ( Navigation ) \u2013 global navigation object Returns: TemplateContext | None \u2013 dict of template context variables","title":"on_page_context"},{"location":"dev-guide/plugins/#on_post_page","text":"The post_page event is called after the template is rendered, but before it is written to disc and can be used to alter the output of the page. If an empty string is returned, the page is skipped and nothing is written to disc. Parameters: output ( str ) \u2013 output of rendered template as string page ( Page ) \u2013 mkdocs.structure.pages.Page instance config ( MkDocsConfig ) \u2013 global configuration object Returns: str | None \u2013 output of rendered template as string","title":"on_post_page"},{"location":"dev-guide/plugins/#event-priorities","text":"For each event type, corresponding methods of plugins are called in the order that the plugins appear in the plugins config . Since MkDocs 1.4, plugins can choose to set a priority value for their events. Events with higher priority are called first. Events without a chosen priority get a default of 0. Events that have the same priority are ordered as they appear in the config.","title":"Event Priorities"},{"location":"dev-guide/plugins/#mkdocs.plugins.event_priority","text":"A decorator to set an event priority for an event handler method. Recommended priority values: 100 \"first\", 50 \"early\", 0 \"default\", -50 \"late\", -100 \"last\". As different plugins discover more precise relations to each other, the values should be further tweaked. Usage example: @plugins.event_priority(-100) # Wishing to run this after all other plugins' `on_files` events. def on_files(self, files, config, **kwargs): ... New in MkDocs 1.4. Recommended shim for backwards compatibility: try: from mkdocs.plugins import event_priority except ImportError: event_priority = lambda priority: lambda f: f # No-op fallback New in version 1.6 There may also arise a need to register a handler for the same event at multiple different priorities. CombinedEvent makes this possible.","title":"event_priority()"},{"location":"dev-guide/plugins/#mkdocs.plugins.CombinedEvent","text":"Bases: Generic [ P , T ] A descriptor that allows defining multiple event handlers and declaring them under one event's name. Usage example: @plugins.event_priority(100) def _on_page_markdown_1(self, markdown: str, **kwargs): ... @plugins.event_priority(-50) def _on_page_markdown_2(self, markdown: str, **kwargs): ... on_page_markdown = plugins.CombinedEvent(_on_page_markdown_1, _on_page_markdown_2) Note The names of the sub-methods can't start with on_ ; instead they can start with _on_ like in the the above example, or anything else.","title":"CombinedEvent"},{"location":"dev-guide/plugins/#handling-errors","text":"MkDocs defines four error types:","title":"Handling Errors"},{"location":"dev-guide/plugins/#mkdocs.exceptions.MkDocsException","text":"Bases: ClickException The base class which all MkDocs exceptions inherit from. This should not be raised directly. One of the subclasses should be raised instead.","title":"MkDocsException"},{"location":"dev-guide/plugins/#mkdocs.exceptions.ConfigurationError","text":"Bases: MkDocsException This error is raised by configuration validation when a validation error is encountered. This error should be raised by any configuration options defined in a plugin's config_scheme .","title":"ConfigurationError"},{"location":"dev-guide/plugins/#mkdocs.exceptions.BuildError","text":"Bases: MkDocsException This error may be raised by MkDocs during the build process. Plugins should not raise this error.","title":"BuildError"},{"location":"dev-guide/plugins/#mkdocs.exceptions.PluginError","text":"Bases: BuildError A subclass of mkdocs.exceptions.BuildError which can be raised by plugin events. Unexpected and uncaught exceptions will interrupt the build process and produce typical Python tracebacks, which are useful for debugging your code. However, users generally find tracebacks overwhelming and often miss the helpful error message. Therefore, MkDocs will catch any of the errors listed above, retrieve the error message, and exit immediately with only the helpful message displayed to the user. Therefore, you might want to catch any exceptions within your plugin and raise a PluginError , passing in your own custom-crafted message, so that the build process is aborted with a helpful message. The on_build_error event will be triggered for any exception. For example: from mkdocs.exceptions import PluginError from mkdocs.plugins import BasePlugin class MyPlugin(BasePlugin): def on_post_page(self, output, page, config, **kwargs): try: # some code that could throw a KeyError ... except KeyError as error: raise PluginError(f\"Failed to find the item by key: '{error}'\") def on_build_error(self, error, **kwargs): # some code to clean things up ...","title":"PluginError"},{"location":"dev-guide/plugins/#logging-in-plugins","text":"To ensure that your plugins' log messages adhere with MkDocs' formatting and --verbose / --debug flags, please write the logs to a logger under the mkdocs.plugins. namespace. Example import logging log = logging.getLogger(f\"mkdocs.plugins.{__name__}\") log.warning(\"File '%s' not found. Breaks the build if --strict is passed\", my_file_name) log.info(\"Shown normally\") log.debug(\"Shown only with `--verbose`\") if log.getEffectiveLevel() <= logging.DEBUG: log.debug(\"Very expensive calculation only for debugging: %s\", get_my_diagnostics()) log.error() is another logging level that is differentiated by its look, but in all other ways it functions the same as warning , so it's strange to use it. If your plugin encounters an actual error, it is best to just interrupt the build by raising mkdocs.exceptions.PluginError (which will also log an ERROR message). New in version 1.5 MkDocs now provides a get_plugin_logger() convenience function that returns a logger like the above that is also prefixed with the plugin's name.","title":"Logging in plugins"},{"location":"dev-guide/plugins/#mkdocs.plugins.get_plugin_logger","text":"Return a logger for plugins. Parameters: name ( str ) \u2013 The name to use with logging.getLogger . Returns: PrefixedLogger \u2013 A logger configured to work well in MkDocs, prefixing each message with the plugin package name. Example from mkdocs.plugins import get_plugin_logger log = get_plugin_logger(__name__) log.info(\"My plugin message\")","title":"get_plugin_logger()"},{"location":"dev-guide/plugins/#entry-point","text":"Plugins need to be packaged as Python libraries (distributed on PyPI separate from MkDocs) and each must register as a Plugin via a setuptools entry_points . Add the following to your setup.py script: entry_points={ 'mkdocs.plugins': [ 'pluginname = path.to.some_plugin:SomePluginClass', ] } The pluginname would be the name used by users (in the config file) and path.to.some_plugin:SomePluginClass would be the importable plugin itself ( from path.to.some_plugin import SomePluginClass ) where SomePluginClass is a subclass of BasePlugin which defines the plugin behavior. Naturally, multiple Plugin classes could exist in the same module. Simply define each as a separate entry point. entry_points={ 'mkdocs.plugins': [ 'featureA = path.to.my_plugins:PluginA', 'featureB = path.to.my_plugins:PluginB' ] } Note that registering a plugin does not activate it. The user still needs to tell MkDocs to use it via the config.","title":"Entry Point"},{"location":"dev-guide/plugins/#publishing-a-plugin","text":"You should publish a package on PyPI , then add it to the Catalog for discoverability. Plugins are strongly recommended to have a unique plugin name (entry point name) according to the catalog.","title":"Publishing a Plugin"},{"location":"dev-guide/themes/","text":"Developing Themes \uf0c1 A guide to creating and distributing custom themes. Note If you are looking for existing third party themes, they are listed in the community wiki page and the MkDocs project catalog . If you want to share a theme you create, you should list it there. When creating a new theme, you can either follow the steps in this guide to create one from scratch or you can download the mkdocs-basic-theme as a basic, yet complete, theme with all the boilerplate required. You can find this base theme on GitHub . It contains detailed comments in the code to describe the different features and their usage. Creating a custom theme \uf0c1 The bare minimum required for a custom theme is a main.html Jinja2 template file which is placed in a directory that is not a child of the docs_dir . Within mkdocs.yml , set the theme.custom_dir option to the path of the directory containing main.html . The path should be relative to the configuration file. For example, given this example project layout: mkdocs.yml docs/ index.md about.md custom_theme/ main.html ... ... you would include the following settings in mkdocs.yml to use the custom theme directory: theme: name: null custom_dir: 'custom_theme/' Note Generally, when building your own custom theme, the theme. name configuration setting would be set to null . However, if the theme. custom_dir configuration value is used in combination with an existing theme, the theme. custom_dir can be used to replace only specific parts of a built-in theme. For example, with the above layout and if you set name: \"mkdocs\" then the main.html file in the theme. custom_dir would replace the file of the same name in the mkdocs theme but otherwise the mkdocs theme would remain unchanged. This is useful if you want to make small adjustments to an existing theme. For more specific information, see Customizing Your Theme . Warning A theme's configuration defined in a mkdocs_theme.yml file is not loaded from theme.custom_dir . When an entire theme exists in theme.custom_dir and theme.name is set to null , then the entire theme configuration must be defined in the theme configuration option in the mkdocs.yml file. However, when a theme is packaged up for distribution, and loaded using the theme.name configuration option, then a mkdocs_theme.yml file is required for the theme. Basic theme \uf0c1 The simplest main.html file is the following: <!DOCTYPE html> <html> <head> <title>{% if page.title %}{{ page.title }} - {% endif %}{{ config.site_name }}</title> {%- for path in config.extra_css %} <link href=\"{{ path | url }}\" rel=\"stylesheet\"> {%- endfor %} </head> <body> {{ page.content }} {%- for script in config.extra_javascript %} {{ script | script_tag }} {%- endfor %} </body> </html> The body content from each page specified in mkdocs.yml is inserted using the {{ page.content }} tag. Style-sheets and scripts can be brought into this theme as with a normal HTML file. Navbars and tables of contents can also be generated and included automatically, through the nav and toc objects, respectively. If you wish to write your own theme, it is recommended to start with one of the built-in themes and modify it accordingly. Note As MkDocs uses Jinja as its template engine, you have access to all the power of Jinja, including template inheritance . You may notice that the themes included with MkDocs make extensive use of template inheritance and blocks, allowing users to easily override small bits and pieces of the templates from the theme custom_dir . Therefore, the built-in themes are implemented in a base.html file, which main.html extends. Although not required, third party template authors are encouraged to follow a similar pattern and may want to define the same blocks as are used in the built-in themes for consistency. Picking up CSS and JavaScript from the config \uf0c1 MkDocs defines the top-level extra_css and extra_javascript configs. These are lists of files. The theme must include the HTML that links the items from these configs, otherwise the configs will be non-functional. You can see the recommended way to render both of them in the base example above . Changed in version 1.5: The items of the config.extra_javascript list used to be simple strings but now became objects that have these fields: path , type , async , defer . In that version, MkDocs also gained the script_tag filter . Obsolete style: {%- for path in extra_javascript %} <script src=\"{{ path }}\"></script> {%- endfor %} This old-style example even uses the obsolete top-level extra_javascript list. Please always use config.extra_javascript instead. So, a slightly more modern approach is the following, but it is still obsolete because it ignores the extra attributes of the script: {%- for path in config.extra_javascript %} <script src=\"{{ path | url }}\"></script> {%- endfor %} ? EXAMPLE: New style: {%- for script in config.extra_javascript %} {{ script | script_tag }} {%- endfor %} If you wish to be able to pick up the new customizations while keeping your theme compatible with older versions of MkDocs, use this snippet: Backwards-compatible style: {%- for script in config.extra_javascript %} {%- if script.path %} {# Detected MkDocs 1.5+ which has `script.path` and `script_tag` #} {{ script | script_tag }} {%- else %} {# Fallback - examine the file name directly #} <script src=\"{{ script | url }}\"{% if script.endswith(\".mjs\") %} type=\"module\"{% endif %}></script> {%- endif %} {%- endfor %} Theme Files \uf0c1 There are various files which a theme treats special in some way. Any other files are simply copied from the theme directory to the same path in the site_dir when the site it built. For example image and CSS files have no special significance and are copied as-is. Note, however, that if the user provides a file with the same path in their docs_dir , then the user's file will replace the theme file. Template Files \uf0c1 Any files with the .html extension are considered to be template files and are not copied from the theme directory or any subdirectories. Also, any files listed in static_templates are treated as templates regardless of their file extension. Theme Meta Files \uf0c1 The various files required for packaging a theme are also ignored. Specifically, the mkdocs_theme.yml configuration file and any Python files. Dot Files \uf0c1 Theme authors can explicitly force MkDocs to ignore files by starting a file or directory name with a dot. Any of the following files would be ignored: .ignored.txt .ignored/file.txt foo/.ignored.txt foo/.ignored/file.txt Documentation Files \uf0c1 All documentation files are ignored. Specifically, any Markdown files (using any of the file extensions supported by MKDocs). Additionally, any README files which may exist in the theme directories are ignored. Template Variables \uf0c1 Each template in a theme is built with a template context. These are the variables that are available to themes. The context varies depending on the template that is being built. At the moment templates are either built with the global context or with a page specific context. The global context is used for HTML pages that don't represent an individual Markdown document, for example a 404.html page or search.html. Global Context \uf0c1 The following variables are available globally on any template. config \uf0c1 The config variable is an instance of MkDocs' config object generated from the mkdocs.yml config file. While you can use any config option, some commonly used options include: config.site_name config.site_url config.site_author config.site_description config.theme.locale (See also Theme Configuration below) config.extra_javascript config.extra_css config.repo_url config.repo_name config.copyright nav \uf0c1 The nav variable is used to create the navigation for the documentation. The nav object is an iterable of navigation objects as defined by the nav configuration setting. In addition to the iterable of navigation objects , the nav object contains the following attributes: homepage: Page | None instance-attribute \uf0c1 The page object for the homepage of the site. pages: list[Page] instance-attribute \uf0c1 A flat list of all page objects contained in the navigation. This list is not necessarily a complete list of all site pages as it does not contain pages which are not included in the navigation. This list does match the list and order of pages used for all \"next page\" and \"previous page\" links. For a list of all pages, use the pages template variable. Nav Example \uf0c1 Following is a basic usage example which outputs the first and second level navigation as a nested list. {% if nav|length > 1 %} <ul> {% for nav_item in nav %} {% if nav_item.children %} <li>{{ nav_item.title }} <ul> {% for nav_item in nav_item.children %} <li class=\"{% if nav_item.active %}current{% endif %}\"> <a href=\"{{ nav_item.url|url }}\">{{ nav_item.title }}</a> </li> {% endfor %} </ul> </li> {% else %} <li class=\"{% if nav_item.active %}current{% endif %}\"> <a href=\"{{ nav_item.url|url }}\">{{ nav_item.title }}</a> </li> {% endif %} {% endfor %} </ul> {% endif %} base_url \uf0c1 The base_url provides a relative path to the root of the MkDocs project. While this can be used directly by prepending it to a local relative URL, it is best to use the url template filter, which is smarter about how it applies base_url . mkdocs_version \uf0c1 Contains the current MkDocs version. build_date_utc \uf0c1 A Python datetime object that represents the date and time the documentation was built in UTC. This is useful for showing how recently the documentation was updated. pages \uf0c1 A flat list of File objects for all pages in the project. This list can contain pages not included in the global navigation and may not match the order of pages within that navigation. The page object for each File can be accessed from file.page . page \uf0c1 In templates which are not rendered from a Markdown source file, the page variable is None . In templates which are rendered from a Markdown source file, the page variable contains a page object. The same page objects are used as page navigation objects in the global navigation and in the pages template variable. Bases: StructureItem All page objects contain the following attributes: title() -> str | None \uf0c1 Returns the title for the current page. Before calling read_source() , this value is empty. It can also be updated by render() . Checks these in order and uses the first that returns a valid title: value provided on init (passed in from config) value of metadata 'title' content of the first H1 in Markdown content convert filename to title content: str | None instance-attribute \uf0c1 The rendered Markdown as HTML, this is the contents of the documentation. Populated after .render() . toc: TableOfContents instance-attribute \uf0c1 An iterable object representing the Table of contents for a page. Each item in the toc is an AnchorLink . The following example would display the top two levels of the Table of Contents for a page. <ul> {% for toc_item in page.toc %} <li><a href=\"{{ toc_item.url }}\">{{ toc_item.title }}</a></li> {% for toc_item in toc_item.children %} <li><a href=\"{{ toc_item.url }}\">{{ toc_item.title }}</a></li> {% endfor %} {% endfor %} </ul> meta: MutableMapping[str, Any] instance-attribute \uf0c1 A mapping of the metadata included at the top of the markdown page. In this example we define a source property above the page title: source: generics.py mixins.py # Page title Content... A template can access this metadata for the page with the meta.source variable. This could then be used to link to source files related to the documentation page. {% for filename in page.meta.source %} <a class=\"github\" href=\"https://github.com/.../{{ filename }}\"> <span class=\"label label-info\">{{ filename }}</span> </a> {% endfor %} url: str property \uf0c1 The URL of the page relative to the MkDocs site_dir . It is expected that this be used with the url filter to ensure the URL is relative to the current page. <a href=\"{{ page.url|url }}\">{{ page.title }}</a> file: File instance-attribute \uf0c1 The documentation File that the page is being rendered from. abs_url: str | None instance-attribute \uf0c1 The absolute URL of the page from the server root as determined by the value assigned to the site_url configuration setting. The value includes any subdirectory included in the site_url , but not the domain. base_url should not be used with this variable. For example, if site_url: https://example.com/ , then the value of page.abs_url for the page foo.md would be /foo/ . However, if site_url: https://example.com/bar/ , then the value of page.abs_url for the page foo.md would be /bar/foo/ . canonical_url: str | None instance-attribute \uf0c1 The full, canonical URL to the current page as determined by the value assigned to the site_url configuration setting. The value includes the domain and any subdirectory included in the site_url . base_url should not be used with this variable. edit_url: str | None instance-attribute \uf0c1 The full URL to the source page in the source repository. Typically used to provide a link to edit the source page. base_url should not be used with this variable. is_homepage: bool property \uf0c1 Evaluates to True for the homepage of the site and False for all other pages. This can be used in conjunction with other attributes of the page object to alter the behavior. For example, to display a different title on the homepage: {% if not page.is_homepage %}{{ page.title }} - {% endif %}{{ site_name }} previous_page: Page | None instance-attribute \uf0c1 The page object for the previous page or None . The value will be None if the current page is the first item in the site navigation or if the current page is not included in the navigation at all. next_page: Page | None instance-attribute \uf0c1 The page object for the next page or None . The value will be None if the current page is the last item in the site navigation or if the current page is not included in the navigation at all. parent: Section | None = None class-attribute instance-attribute \uf0c1 The immediate parent of the item in the site navigation. None if it's at the top level. children: None = None class-attribute instance-attribute \uf0c1 Pages do not contain children and the attribute is always None . active: bool property writable \uf0c1 When True , indicates that this page is the currently viewed page. Defaults to False . is_section: bool = False class-attribute instance-attribute \uf0c1 Indicates that the navigation object is a \"section\" object. Always False for page objects. is_page: bool = True class-attribute instance-attribute \uf0c1 Indicates that the navigation object is a \"page\" object. Always True for page objects. is_link: bool = False class-attribute instance-attribute \uf0c1 Indicates that the navigation object is a \"link\" object. Always False for page objects. AnchorLink \uf0c1 A single entry in the table of contents. title: str instance-attribute \uf0c1 The text of the item, as HTML. url: str property \uf0c1 The hash fragment of a URL pointing to the item. level: int instance-attribute \uf0c1 The zero-based level of the item. children: list[AnchorLink] instance-attribute \uf0c1 An iterable of any child items. Navigation Objects \uf0c1 Navigation objects contained in the nav template variable may be one of section objects, page objects, and link objects. While section objects may contain nested navigation objects, pages and links do not. Page objects are the full page object as used for the current page with all of the same attributes available. Section and Link objects contain a subset of those attributes as defined below: Section \uf0c1 A section navigation object defines a named section in the navigation and contains a list of child navigation objects. Note that sections do not contain URLs and are not links of any kind. However, by default, MkDocs sorts index pages to the top and the first child might be used as the URL for a section if a theme chooses to do so. Bases: StructureItem The following attributes are available on section objects: title: str instance-attribute \uf0c1 The title of the section. parent: Section | None = None class-attribute instance-attribute \uf0c1 The immediate parent of the item in the site navigation. None if it's at the top level. children: list[StructureItem] instance-attribute \uf0c1 An iterable of all child navigation objects. Children may include nested sections, pages and links. active: bool property writable \uf0c1 When True , indicates that a child page of this section is the current page and can be used to highlight the section as the currently viewed section. Defaults to False . is_section: bool = True class-attribute instance-attribute \uf0c1 Indicates that the navigation object is a \"section\" object. Always True for section objects. is_page: bool = False class-attribute instance-attribute \uf0c1 Indicates that the navigation object is a \"page\" object. Always False for section objects. is_link: bool = False class-attribute instance-attribute \uf0c1 Indicates that the navigation object is a \"link\" object. Always False for section objects. Link \uf0c1 A link navigation object contains a link which does not point to an internal MkDocs page. Bases: StructureItem The following attributes are available on link objects: title: str instance-attribute \uf0c1 The title of the link. This would generally be used as the label of the link. url: str instance-attribute \uf0c1 The URL that the link points to. The URL should always be an absolute URLs and should not need to have base_url prepended. parent: Section | None = None class-attribute instance-attribute \uf0c1 The immediate parent of the item in the site navigation. None if it's at the top level. children: None = None class-attribute instance-attribute \uf0c1 Links do not contain children and the attribute is always None . active: bool = False class-attribute instance-attribute \uf0c1 External links cannot be \"active\" and the attribute is always False . is_section: bool = False class-attribute instance-attribute \uf0c1 Indicates that the navigation object is a \"section\" object. Always False for link objects. is_page: bool = False class-attribute instance-attribute \uf0c1 Indicates that the navigation object is a \"page\" object. Always False for link objects. is_link: bool = True class-attribute instance-attribute \uf0c1 Indicates that the navigation object is a \"link\" object. Always True for link objects. Extra Context \uf0c1 Additional variables can be passed to the template with the extra configuration option. This is a set of key value pairs that can make custom templates far more flexible. For example, this could be used to include the project version of all pages and a list of links related to the project. This can be achieved with the following extra configuration: extra: version: 0.13.0 links: - https://github.com/mkdocs - https://docs.readthedocs.org/en/latest/builds.html#mkdocs - https://www.mkdocs.org/ And then displayed with this HTML in the custom theme. {{ config.extra.version }} {% if config.extra.links %} <ul> {% for link in config.extra.links %} <li>{{ link }}</li> {% endfor %} </ul> {% endif %} Template Filters \uf0c1 In addition to Jinja's default filters , the following custom filters are available to use in MkDocs templates: url \uf0c1 Normalizes a URL. Absolute URLs are passed through unaltered. If the URL is relative and the template context includes a page object, then the URL is returned relative to the page object. Otherwise, the URL is returned with base_url prepended. <a href=\"{{ page.url|url }}\">{{ page.title }}</a> tojson \uf0c1 Safely convert a Python object to a value in a JavaScript script. <script> var mkdocs_page_name = {{ page.title|tojson|safe }}; </script> script_tag \uf0c1 New in version 1.5 Convert an item from extra_javascript to a <script> tag that takes into account all customizations of this config and has the equivalent of |url behavior built-in. See how to use it in the base example above Search and themes \uf0c1 As of MkDocs version 0.17 client side search support has been added to MkDocs via the search plugin. A theme needs to provide a few things for the plugin to work with the theme. While the search plugin is activated by default, users can disable the plugin and themes should account for this. It is recommended that theme templates wrap search specific markup with a check for the plugin: {% if 'search' in config.plugins %} search stuff here... {% endif %} At its most basic functionality, the search plugin will simply provide an index file which is no more than a JSON file containing the content of all pages. The theme would need to implement its own search functionality client-side. However, with a few settings and the necessary templates, the plugin can provide a complete functioning client-side search tool based on lunr.js . The following HTML needs to be added to the theme so that the provided JavaScript is able to properly load the search scripts and make relative links to the search results from the current page. <script>var base_url = {{ base_url|tojson }};</script> With properly configured settings, the following HTML in a template will add a full search implementation to your theme. <h1 id=\"search\">Search Results</h1> <form action=\"search.html\"> <input name=\"q\" id=\"mkdocs-search-query\" type=\"text\" > </form> <div id=\"mkdocs-search-results\"> Sorry, page not found. </div> The JavaScript in the plugin works by looking for the specific ID's used in the above HTML. The form input for the user to type the search query must be identified with id=\"mkdocs-search-query\" and the div where the results will be placed must be identified with id=\"mkdocs-search-results\" . The plugin supports the following options being set in the theme's configuration file , mkdocs_theme.yml : include_search_page \uf0c1 Determines whether the search plugin expects the theme to provide a dedicated search page via a template located at search/search.html . When include_search_page is set to true , the search template will be built and available at search/search.html . This method is used by the readthedocs theme. When include_search_page is set to false or not defined, it is expected that the theme provide some other mechanisms for displaying search results. For example, the mkdocs theme displays results on any page via a modal. search_index_only \uf0c1 Determines whether the search plugin should only generate a search index or a complete search solution. When search_index_only is set to false , then the search plugin modifies the Jinja environment by adding its own templates directory (with a lower precedence than the theme) and adds its scripts to the extra_javascript config setting. When search_index_only is set to true or not defined, the search plugin makes no modifications to the Jinja environment. A complete solution using the provided index file is the responsibility of the theme. The search index is written to a JSON file at search/search_index.json in the site_dir . The JSON object contained within the file may contain up to three objects. { config: {...}, docs: [...], index: {...} } If present, the config object contains the key/value pairs of config options defined for the plugin in the user's mkdocs.yml config file under plugings.search . The config object was new in MkDocs version 1.0 . The docs object contains a list of document objects. Each document object is made up of a location (URL), a title , and text which can be used to create a search index and/or display search results. If present, the index object contains a pre-built index which offers performance improvements for larger sites. Note that the pre-built index is only created if the user explicitly enables the prebuild_index config option. Themes should expect the index to not be present, but can choose to use the index when it is available. The index object was new in MkDocs version 1.0 . Packaging Themes \uf0c1 MkDocs makes use of Python packaging to distribute themes. This comes with a few requirements. To see an example of a package containing one theme, see the MkDocs Bootstrap theme and to see a package that contains many themes, see the MkDocs Bootswatch theme . Note It is not strictly necessary to package a theme, as the entire theme can be contained in the custom_dir . If you have created a \"one-off theme,\" that should be sufficient. However, if you intend to distribute your theme for others to use, packaging the theme has some advantages. By packaging your theme, your users can more easily install it, they can rely on a default configuration being defined, and they can then take advantage of the custom_dir to make tweaks to your theme to better suit their needs. Package Layout \uf0c1 The following layout is recommended for themes. Two files at the top level directory called MANIFEST.in and setup.py beside the theme directory which contains an empty __init__.py file, a theme configuration file ( mkdocs_theme.yml ), and your template and media files. . |-- MANIFEST.in |-- theme_name | |-- __init__.py | |-- mkdocs_theme.yml | |-- main.html | |-- styles.css `-- setup.py The MANIFEST.in file should contain the following contents but with theme_name updated and any extra file extensions added to the include. recursive-include theme_name *.ico *.js *.css *.png *.html *.eot *.svg *.ttf *.woff recursive-exclude * __pycache__ recursive-exclude * *.py[co] The setup.py should include the following text with the modifications described below. from setuptools import setup, find_packages VERSION = '0.0.1' setup( name=\"mkdocs-themename\", version=VERSION, url='', license='', description='', author='', author_email='', packages=find_packages(), include_package_data=True, entry_points={ 'mkdocs.themes': [ 'themename = theme_name', ] }, zip_safe=False ) Fill in the URL, license, description, author and author email address. The name should follow the convention mkdocs-themename (like mkdocs-bootstrap and mkdocs-bootswatch ), starting with MkDocs, using hyphens to separate words and including the name of your theme. Most of the rest of the file can be left unedited. The last section we need to change is the entry_points. This is how MkDocs finds the theme(s) you are including in the package. The name on the left is the one that users will use in their mkdocs.yml and the one on the right is the directory containing your theme files. The directory you created at the start of this section with the main.html file should contain all of the other theme files. The minimum requirement is that it includes a main.html for the theme. It must also include a __init__.py file which should be empty, this file tells Python that the directory is a package. Theme Configuration \uf0c1 A packaged theme is required to include a configuration file named mkdocs_theme.yml which is placed in the root of your template files. The file should contain default configuration options for the theme. However, if the theme offers no configuration options, the file is still required and can be left blank. A theme which is not packaged does not need a mkdocs_theme.yml file as that file is not loaded from theme.custom_dir . The theme author is free to define any arbitrary options deemed necessary and those options will be made available in the templates to control behavior. For example, a theme might want to make a sidebar optional and include the following in the mkdocs_theme.yml file: show_sidebar: true Then in a template, that config option could be referenced: {% if config.theme.show_sidebar %} <div id=\"sidebar\">...</div> {% endif %} And the user could override the default in their project's mkdocs.yml config file: theme: name: themename show_sidebar: false In addition to arbitrary options defined by the theme, MkDocs defines a few special options which alters its behavior: Block locale \uf0c1 This option mirrors the theme config option of the same name. If this value is not defined in the mkdocs_theme.yml file and the user does not set it in mkdocs.yml then it will default to en (English). The value is expected to match the language used in the text provided by the theme (such a \"next\" and \"previous\" links) and should be used as the value of the <html> tag's lang attribute. See Supporting theme localization/ translation for more information. Note that during configuration validation, the provided string is converted to a Locale object. The object contains Locale.language and Locale.territory attributes and will resolve as a string from within a template. Therefore, the following will work fine: <html lang=\"{ config.theme.locale }\"> If the locale was set to fr_CA (Canadian French), then the above template would render as: <html lang=\"fr_CA\"> If you did not want the territory attribute to be included, then reference the language attribute directly: <html lang=\"{ config.theme.locale.language }\"> That would render as: <html lang=\"fr\"> static_templates \uf0c1 This option mirrors the theme config option of the same name and allows some defaults to be set by the theme. Note that while the user can add templates to this list, the user cannot remove templates included in the theme's config. extends \uf0c1 Defines a parent theme that this theme inherits from. The value should be the string name of the parent theme. Normal Jinja inheritance rules apply. Plugins may also define some options which allow the theme to inform a plugin about which set of plugin options it expects. See the documentation for any plugins you may wish to support in your theme. Distributing Themes \uf0c1 With the above changes, your theme should now be ready to install. This can be done with pip, using pip install . if you are still in the same directory as the setup.py. Most Python packages, including MkDocs, are distributed on PyPI. To do this, you should run the following command. python setup.py register If you don't have an account setup, you should be prompted to create one. For a much more detailed guide, see the official Python packaging documentation for Packaging and Distributing Projects . Supporting theme Localization/Translation \uf0c1 While the built-in themes provide support for localization/translation of templates, custom themes and third-party themes may choose not to. Regardless, the locale setting of the theme configuration option is always present and is relied upon by other parts of the system. Therefore, it is recommended that all third-party themes use the same setting for designating a language regardless of the system they use for translation. In that way, users will experience consistent behavior regardless of the theme they may choose. The method for managing translations is up to the developers of a theme. However, if a theme developer chooses to use the same mechanisms used by the built-in themes, the sections below outline how to enable and make use of the same commands utilized by MkDocs. Using the Localization/Translation commands \uf0c1 Warning As pybabel is not installed by default and most users will not have pybabel installed, theme developers and/or translators should make sure to have installed the necessary dependencies (using pip install 'mkdocs[i18n]' ) in order for the commands to be available for use. The translation commands should be called from the root of your theme's working tree. For an overview of the workflow used by MkDocs to translate the built-in themes, see the appropriate section of the Contributing Guide and the Translation Guide . Example custom theme Localization/Translation workflow \uf0c1 Note If your theme inherits from an existing theme which already provides translation catalogs, your theme's translations will be merged with the parent theme's translations during a MkDocs build. This means that you only need to concentrate on the added translations. Yet, you will still benefit from the translations of the parent theme. At the same time, you may override any of parent theme's translations! Let's suppose that you're working on your own fork of the mkdocs-basic-theme and want to add translations to it. Edit the templates by wrapping text in your HTML sources with {% trans %} and {% endtrans %} as follows: --- a/basic_theme/base.html +++ b/basic_theme/base.html @@ -88,7 +88,7 @@ <body> - <h1>This is an example theme for MkDocs.</h1> + <h1>{% trans %}This is an example theme for MkDocs.{% endtrans %}</h1> <p> It is designed to be read by looking at the theme HTML which is heavily Then you would follow the Translation Guide as usual to get your translations running. Packaging Translations with your theme \uf0c1 While the Portable Object Template ( pot ) file created by the extract_messages command and the Portable Object ( po ) files created by the init_catalog and update_catalog commands are useful for creating and editing translations, they are not used by MkDocs directly and do not need to be included in a packaged release of a theme. When MkDocs builds a site with translations, it only makes use of the binary mo files(s) for the specified locale. Therefore, when packaging a theme , make sure to include it in the \"wheels\", using a MANIFEST.in file or otherwise. Then, before building your Python package, you will want to ensure that the binary mo file for each locale is up-to-date by running the compile_catalog command for each locale. MkDocs expects the binary mo files to be located at locales/<locale>/LC_MESSAGES/messages.mo , which the compile_catalog command automatically does for you. See Testing theme translations for details. Note As outlined in our Translation Guide , the MkDocs project has chosen to include the pot and po files in our code repository, but not the mo files. This requires us to always run compile_catalog before packaging a new release regardless of whether any changes were made to a translation or not. However, you may chose an alternate workflow for your theme. At a minimum, you need to ensure that up-to-date mo files are included at the correct location in each release. However, you may use a different process for generating those mo files if you chose to do so.","title":"Themes"},{"location":"dev-guide/themes/#developing-themes","text":"A guide to creating and distributing custom themes. Note If you are looking for existing third party themes, they are listed in the community wiki page and the MkDocs project catalog . If you want to share a theme you create, you should list it there. When creating a new theme, you can either follow the steps in this guide to create one from scratch or you can download the mkdocs-basic-theme as a basic, yet complete, theme with all the boilerplate required. You can find this base theme on GitHub . It contains detailed comments in the code to describe the different features and their usage.","title":"Developing Themes"},{"location":"dev-guide/themes/#creating-a-custom-theme","text":"The bare minimum required for a custom theme is a main.html Jinja2 template file which is placed in a directory that is not a child of the docs_dir . Within mkdocs.yml , set the theme.custom_dir option to the path of the directory containing main.html . The path should be relative to the configuration file. For example, given this example project layout: mkdocs.yml docs/ index.md about.md custom_theme/ main.html ... ... you would include the following settings in mkdocs.yml to use the custom theme directory: theme: name: null custom_dir: 'custom_theme/' Note Generally, when building your own custom theme, the theme. name configuration setting would be set to null . However, if the theme. custom_dir configuration value is used in combination with an existing theme, the theme. custom_dir can be used to replace only specific parts of a built-in theme. For example, with the above layout and if you set name: \"mkdocs\" then the main.html file in the theme. custom_dir would replace the file of the same name in the mkdocs theme but otherwise the mkdocs theme would remain unchanged. This is useful if you want to make small adjustments to an existing theme. For more specific information, see Customizing Your Theme . Warning A theme's configuration defined in a mkdocs_theme.yml file is not loaded from theme.custom_dir . When an entire theme exists in theme.custom_dir and theme.name is set to null , then the entire theme configuration must be defined in the theme configuration option in the mkdocs.yml file. However, when a theme is packaged up for distribution, and loaded using the theme.name configuration option, then a mkdocs_theme.yml file is required for the theme.","title":"Creating a custom theme"},{"location":"dev-guide/themes/#basic-theme","text":"The simplest main.html file is the following: <!DOCTYPE html> <html> <head> <title>{% if page.title %}{{ page.title }} - {% endif %}{{ config.site_name }}</title> {%- for path in config.extra_css %} <link href=\"{{ path | url }}\" rel=\"stylesheet\"> {%- endfor %} </head> <body> {{ page.content }} {%- for script in config.extra_javascript %} {{ script | script_tag }} {%- endfor %} </body> </html> The body content from each page specified in mkdocs.yml is inserted using the {{ page.content }} tag. Style-sheets and scripts can be brought into this theme as with a normal HTML file. Navbars and tables of contents can also be generated and included automatically, through the nav and toc objects, respectively. If you wish to write your own theme, it is recommended to start with one of the built-in themes and modify it accordingly. Note As MkDocs uses Jinja as its template engine, you have access to all the power of Jinja, including template inheritance . You may notice that the themes included with MkDocs make extensive use of template inheritance and blocks, allowing users to easily override small bits and pieces of the templates from the theme custom_dir . Therefore, the built-in themes are implemented in a base.html file, which main.html extends. Although not required, third party template authors are encouraged to follow a similar pattern and may want to define the same blocks as are used in the built-in themes for consistency.","title":"Basic theme"},{"location":"dev-guide/themes/#picking-up-css-and-javascript-from-the-config","text":"MkDocs defines the top-level extra_css and extra_javascript configs. These are lists of files. The theme must include the HTML that links the items from these configs, otherwise the configs will be non-functional. You can see the recommended way to render both of them in the base example above . Changed in version 1.5: The items of the config.extra_javascript list used to be simple strings but now became objects that have these fields: path , type , async , defer . In that version, MkDocs also gained the script_tag filter . Obsolete style: {%- for path in extra_javascript %} <script src=\"{{ path }}\"></script> {%- endfor %} This old-style example even uses the obsolete top-level extra_javascript list. Please always use config.extra_javascript instead. So, a slightly more modern approach is the following, but it is still obsolete because it ignores the extra attributes of the script: {%- for path in config.extra_javascript %} <script src=\"{{ path | url }}\"></script> {%- endfor %} ? EXAMPLE: New style: {%- for script in config.extra_javascript %} {{ script | script_tag }} {%- endfor %} If you wish to be able to pick up the new customizations while keeping your theme compatible with older versions of MkDocs, use this snippet: Backwards-compatible style: {%- for script in config.extra_javascript %} {%- if script.path %} {# Detected MkDocs 1.5+ which has `script.path` and `script_tag` #} {{ script | script_tag }} {%- else %} {# Fallback - examine the file name directly #} <script src=\"{{ script | url }}\"{% if script.endswith(\".mjs\") %} type=\"module\"{% endif %}></script> {%- endif %} {%- endfor %}","title":"Picking up CSS and JavaScript from the config"},{"location":"dev-guide/themes/#theme-files","text":"There are various files which a theme treats special in some way. Any other files are simply copied from the theme directory to the same path in the site_dir when the site it built. For example image and CSS files have no special significance and are copied as-is. Note, however, that if the user provides a file with the same path in their docs_dir , then the user's file will replace the theme file.","title":"Theme Files"},{"location":"dev-guide/themes/#template-files","text":"Any files with the .html extension are considered to be template files and are not copied from the theme directory or any subdirectories. Also, any files listed in static_templates are treated as templates regardless of their file extension.","title":"Template Files"},{"location":"dev-guide/themes/#theme-meta-files","text":"The various files required for packaging a theme are also ignored. Specifically, the mkdocs_theme.yml configuration file and any Python files.","title":"Theme Meta Files"},{"location":"dev-guide/themes/#dot-files","text":"Theme authors can explicitly force MkDocs to ignore files by starting a file or directory name with a dot. Any of the following files would be ignored: .ignored.txt .ignored/file.txt foo/.ignored.txt foo/.ignored/file.txt","title":"Dot Files"},{"location":"dev-guide/themes/#documentation-files","text":"All documentation files are ignored. Specifically, any Markdown files (using any of the file extensions supported by MKDocs). Additionally, any README files which may exist in the theme directories are ignored.","title":"Documentation Files"},{"location":"dev-guide/themes/#template-variables","text":"Each template in a theme is built with a template context. These are the variables that are available to themes. The context varies depending on the template that is being built. At the moment templates are either built with the global context or with a page specific context. The global context is used for HTML pages that don't represent an individual Markdown document, for example a 404.html page or search.html.","title":"Template Variables"},{"location":"dev-guide/themes/#global-context","text":"The following variables are available globally on any template.","title":"Global Context"},{"location":"dev-guide/themes/#config","text":"The config variable is an instance of MkDocs' config object generated from the mkdocs.yml config file. While you can use any config option, some commonly used options include: config.site_name config.site_url config.site_author config.site_description config.theme.locale (See also Theme Configuration below) config.extra_javascript config.extra_css config.repo_url config.repo_name config.copyright","title":"config"},{"location":"dev-guide/themes/#nav","text":"The nav variable is used to create the navigation for the documentation. The nav object is an iterable of navigation objects as defined by the nav configuration setting. In addition to the iterable of navigation objects , the nav object contains the following attributes:","title":"nav"},{"location":"dev-guide/themes/#mkdocs.structure.nav.Navigation.homepage","text":"The page object for the homepage of the site.","title":"homepage"},{"location":"dev-guide/themes/#mkdocs.structure.nav.Navigation.pages","text":"A flat list of all page objects contained in the navigation. This list is not necessarily a complete list of all site pages as it does not contain pages which are not included in the navigation. This list does match the list and order of pages used for all \"next page\" and \"previous page\" links. For a list of all pages, use the pages template variable.","title":"pages"},{"location":"dev-guide/themes/#nav-example","text":"Following is a basic usage example which outputs the first and second level navigation as a nested list. {% if nav|length > 1 %} <ul> {% for nav_item in nav %} {% if nav_item.children %} <li>{{ nav_item.title }} <ul> {% for nav_item in nav_item.children %} <li class=\"{% if nav_item.active %}current{% endif %}\"> <a href=\"{{ nav_item.url|url }}\">{{ nav_item.title }}</a> </li> {% endfor %} </ul> </li> {% else %} <li class=\"{% if nav_item.active %}current{% endif %}\"> <a href=\"{{ nav_item.url|url }}\">{{ nav_item.title }}</a> </li> {% endif %} {% endfor %} </ul> {% endif %}","title":"Nav Example"},{"location":"dev-guide/themes/#base_url","text":"The base_url provides a relative path to the root of the MkDocs project. While this can be used directly by prepending it to a local relative URL, it is best to use the url template filter, which is smarter about how it applies base_url .","title":"base_url"},{"location":"dev-guide/themes/#mkdocs_version","text":"Contains the current MkDocs version.","title":"mkdocs_version"},{"location":"dev-guide/themes/#build_date_utc","text":"A Python datetime object that represents the date and time the documentation was built in UTC. This is useful for showing how recently the documentation was updated.","title":"build_date_utc"},{"location":"dev-guide/themes/#pages","text":"A flat list of File objects for all pages in the project. This list can contain pages not included in the global navigation and may not match the order of pages within that navigation. The page object for each File can be accessed from file.page .","title":"pages"},{"location":"dev-guide/themes/#page","text":"In templates which are not rendered from a Markdown source file, the page variable is None . In templates which are rendered from a Markdown source file, the page variable contains a page object. The same page objects are used as page navigation objects in the global navigation and in the pages template variable. Bases: StructureItem All page objects contain the following attributes:","title":"page"},{"location":"dev-guide/themes/#mkdocs.structure.pages.Page.title","text":"Returns the title for the current page. Before calling read_source() , this value is empty. It can also be updated by render() . Checks these in order and uses the first that returns a valid title: value provided on init (passed in from config) value of metadata 'title' content of the first H1 in Markdown content convert filename to title","title":"title()"},{"location":"dev-guide/themes/#mkdocs.structure.pages.Page.content","text":"The rendered Markdown as HTML, this is the contents of the documentation. Populated after .render() .","title":"content"},{"location":"dev-guide/themes/#mkdocs.structure.pages.Page.toc","text":"An iterable object representing the Table of contents for a page. Each item in the toc is an AnchorLink . The following example would display the top two levels of the Table of Contents for a page. <ul> {% for toc_item in page.toc %} <li><a href=\"{{ toc_item.url }}\">{{ toc_item.title }}</a></li> {% for toc_item in toc_item.children %} <li><a href=\"{{ toc_item.url }}\">{{ toc_item.title }}</a></li> {% endfor %} {% endfor %} </ul>","title":"toc"},{"location":"dev-guide/themes/#mkdocs.structure.pages.Page.meta","text":"A mapping of the metadata included at the top of the markdown page. In this example we define a source property above the page title: source: generics.py mixins.py # Page title Content... A template can access this metadata for the page with the meta.source variable. This could then be used to link to source files related to the documentation page. {% for filename in page.meta.source %} <a class=\"github\" href=\"https://github.com/.../{{ filename }}\"> <span class=\"label label-info\">{{ filename }}</span> </a> {% endfor %}","title":"meta"},{"location":"dev-guide/themes/#mkdocs.structure.pages.Page.url","text":"The URL of the page relative to the MkDocs site_dir . It is expected that this be used with the url filter to ensure the URL is relative to the current page. <a href=\"{{ page.url|url }}\">{{ page.title }}</a>","title":"url"},{"location":"dev-guide/themes/#mkdocs.structure.pages.Page.file","text":"The documentation File that the page is being rendered from.","title":"file"},{"location":"dev-guide/themes/#mkdocs.structure.pages.Page.abs_url","text":"The absolute URL of the page from the server root as determined by the value assigned to the site_url configuration setting. The value includes any subdirectory included in the site_url , but not the domain. base_url should not be used with this variable. For example, if site_url: https://example.com/ , then the value of page.abs_url for the page foo.md would be /foo/ . However, if site_url: https://example.com/bar/ , then the value of page.abs_url for the page foo.md would be /bar/foo/ .","title":"abs_url"},{"location":"dev-guide/themes/#mkdocs.structure.pages.Page.canonical_url","text":"The full, canonical URL to the current page as determined by the value assigned to the site_url configuration setting. The value includes the domain and any subdirectory included in the site_url . base_url should not be used with this variable.","title":"canonical_url"},{"location":"dev-guide/themes/#mkdocs.structure.pages.Page.edit_url","text":"The full URL to the source page in the source repository. Typically used to provide a link to edit the source page. base_url should not be used with this variable.","title":"edit_url"},{"location":"dev-guide/themes/#mkdocs.structure.pages.Page.is_homepage","text":"Evaluates to True for the homepage of the site and False for all other pages. This can be used in conjunction with other attributes of the page object to alter the behavior. For example, to display a different title on the homepage: {% if not page.is_homepage %}{{ page.title }} - {% endif %}{{ site_name }}","title":"is_homepage"},{"location":"dev-guide/themes/#mkdocs.structure.pages.Page.previous_page","text":"The page object for the previous page or None . The value will be None if the current page is the first item in the site navigation or if the current page is not included in the navigation at all.","title":"previous_page"},{"location":"dev-guide/themes/#mkdocs.structure.pages.Page.next_page","text":"The page object for the next page or None . The value will be None if the current page is the last item in the site navigation or if the current page is not included in the navigation at all.","title":"next_page"},{"location":"dev-guide/themes/#mkdocs.structure.StructureItem.parent","text":"The immediate parent of the item in the site navigation. None if it's at the top level.","title":"parent"},{"location":"dev-guide/themes/#mkdocs.structure.pages.Page.children","text":"Pages do not contain children and the attribute is always None .","title":"children"},{"location":"dev-guide/themes/#mkdocs.structure.pages.Page.active","text":"When True , indicates that this page is the currently viewed page. Defaults to False .","title":"active"},{"location":"dev-guide/themes/#mkdocs.structure.pages.Page.is_section","text":"Indicates that the navigation object is a \"section\" object. Always False for page objects.","title":"is_section"},{"location":"dev-guide/themes/#mkdocs.structure.pages.Page.is_page","text":"Indicates that the navigation object is a \"page\" object. Always True for page objects.","title":"is_page"},{"location":"dev-guide/themes/#mkdocs.structure.pages.Page.is_link","text":"Indicates that the navigation object is a \"link\" object. Always False for page objects.","title":"is_link"},{"location":"dev-guide/themes/#anchorlink","text":"A single entry in the table of contents.","title":"AnchorLink"},{"location":"dev-guide/themes/#mkdocs.structure.toc.AnchorLink.title","text":"The text of the item, as HTML.","title":"title"},{"location":"dev-guide/themes/#mkdocs.structure.toc.AnchorLink.url","text":"The hash fragment of a URL pointing to the item.","title":"url"},{"location":"dev-guide/themes/#mkdocs.structure.toc.AnchorLink.level","text":"The zero-based level of the item.","title":"level"},{"location":"dev-guide/themes/#mkdocs.structure.toc.AnchorLink.children","text":"An iterable of any child items.","title":"children"},{"location":"dev-guide/themes/#navigation-objects","text":"Navigation objects contained in the nav template variable may be one of section objects, page objects, and link objects. While section objects may contain nested navigation objects, pages and links do not. Page objects are the full page object as used for the current page with all of the same attributes available. Section and Link objects contain a subset of those attributes as defined below:","title":"Navigation Objects"},{"location":"dev-guide/themes/#section","text":"A section navigation object defines a named section in the navigation and contains a list of child navigation objects. Note that sections do not contain URLs and are not links of any kind. However, by default, MkDocs sorts index pages to the top and the first child might be used as the URL for a section if a theme chooses to do so. Bases: StructureItem The following attributes are available on section objects:","title":"Section"},{"location":"dev-guide/themes/#mkdocs.structure.nav.Section.title","text":"The title of the section.","title":"title"},{"location":"dev-guide/themes/#mkdocs.structure.StructureItem.parent","text":"The immediate parent of the item in the site navigation. None if it's at the top level.","title":"parent"},{"location":"dev-guide/themes/#mkdocs.structure.nav.Section.children","text":"An iterable of all child navigation objects. Children may include nested sections, pages and links.","title":"children"},{"location":"dev-guide/themes/#mkdocs.structure.nav.Section.active","text":"When True , indicates that a child page of this section is the current page and can be used to highlight the section as the currently viewed section. Defaults to False .","title":"active"},{"location":"dev-guide/themes/#mkdocs.structure.nav.Section.is_section","text":"Indicates that the navigation object is a \"section\" object. Always True for section objects.","title":"is_section"},{"location":"dev-guide/themes/#mkdocs.structure.nav.Section.is_page","text":"Indicates that the navigation object is a \"page\" object. Always False for section objects.","title":"is_page"},{"location":"dev-guide/themes/#mkdocs.structure.nav.Section.is_link","text":"Indicates that the navigation object is a \"link\" object. Always False for section objects.","title":"is_link"},{"location":"dev-guide/themes/#link","text":"A link navigation object contains a link which does not point to an internal MkDocs page. Bases: StructureItem The following attributes are available on link objects:","title":"Link"},{"location":"dev-guide/themes/#mkdocs.structure.nav.Link.title","text":"The title of the link. This would generally be used as the label of the link.","title":"title"},{"location":"dev-guide/themes/#mkdocs.structure.nav.Link.url","text":"The URL that the link points to. The URL should always be an absolute URLs and should not need to have base_url prepended.","title":"url"},{"location":"dev-guide/themes/#mkdocs.structure.StructureItem.parent","text":"The immediate parent of the item in the site navigation. None if it's at the top level.","title":"parent"},{"location":"dev-guide/themes/#mkdocs.structure.nav.Link.children","text":"Links do not contain children and the attribute is always None .","title":"children"},{"location":"dev-guide/themes/#mkdocs.structure.nav.Link.active","text":"External links cannot be \"active\" and the attribute is always False .","title":"active"},{"location":"dev-guide/themes/#mkdocs.structure.nav.Link.is_section","text":"Indicates that the navigation object is a \"section\" object. Always False for link objects.","title":"is_section"},{"location":"dev-guide/themes/#mkdocs.structure.nav.Link.is_page","text":"Indicates that the navigation object is a \"page\" object. Always False for link objects.","title":"is_page"},{"location":"dev-guide/themes/#mkdocs.structure.nav.Link.is_link","text":"Indicates that the navigation object is a \"link\" object. Always True for link objects.","title":"is_link"},{"location":"dev-guide/themes/#extra-context","text":"Additional variables can be passed to the template with the extra configuration option. This is a set of key value pairs that can make custom templates far more flexible. For example, this could be used to include the project version of all pages and a list of links related to the project. This can be achieved with the following extra configuration: extra: version: 0.13.0 links: - https://github.com/mkdocs - https://docs.readthedocs.org/en/latest/builds.html#mkdocs - https://www.mkdocs.org/ And then displayed with this HTML in the custom theme. {{ config.extra.version }} {% if config.extra.links %} <ul> {% for link in config.extra.links %} <li>{{ link }}</li> {% endfor %} </ul> {% endif %}","title":"Extra Context"},{"location":"dev-guide/themes/#template-filters","text":"In addition to Jinja's default filters , the following custom filters are available to use in MkDocs templates:","title":"Template Filters"},{"location":"dev-guide/themes/#url","text":"Normalizes a URL. Absolute URLs are passed through unaltered. If the URL is relative and the template context includes a page object, then the URL is returned relative to the page object. Otherwise, the URL is returned with base_url prepended. <a href=\"{{ page.url|url }}\">{{ page.title }}</a>","title":"url"},{"location":"dev-guide/themes/#tojson","text":"Safely convert a Python object to a value in a JavaScript script. <script> var mkdocs_page_name = {{ page.title|tojson|safe }}; </script>","title":"tojson"},{"location":"dev-guide/themes/#script_tag","text":"New in version 1.5 Convert an item from extra_javascript to a <script> tag that takes into account all customizations of this config and has the equivalent of |url behavior built-in. See how to use it in the base example above","title":"script_tag"},{"location":"dev-guide/themes/#search-and-themes","text":"As of MkDocs version 0.17 client side search support has been added to MkDocs via the search plugin. A theme needs to provide a few things for the plugin to work with the theme. While the search plugin is activated by default, users can disable the plugin and themes should account for this. It is recommended that theme templates wrap search specific markup with a check for the plugin: {% if 'search' in config.plugins %} search stuff here... {% endif %} At its most basic functionality, the search plugin will simply provide an index file which is no more than a JSON file containing the content of all pages. The theme would need to implement its own search functionality client-side. However, with a few settings and the necessary templates, the plugin can provide a complete functioning client-side search tool based on lunr.js . The following HTML needs to be added to the theme so that the provided JavaScript is able to properly load the search scripts and make relative links to the search results from the current page. <script>var base_url = {{ base_url|tojson }};</script> With properly configured settings, the following HTML in a template will add a full search implementation to your theme. <h1 id=\"search\">Search Results</h1> <form action=\"search.html\"> <input name=\"q\" id=\"mkdocs-search-query\" type=\"text\" > </form> <div id=\"mkdocs-search-results\"> Sorry, page not found. </div> The JavaScript in the plugin works by looking for the specific ID's used in the above HTML. The form input for the user to type the search query must be identified with id=\"mkdocs-search-query\" and the div where the results will be placed must be identified with id=\"mkdocs-search-results\" . The plugin supports the following options being set in the theme's configuration file , mkdocs_theme.yml :","title":"Search and themes"},{"location":"dev-guide/themes/#include_search_page","text":"Determines whether the search plugin expects the theme to provide a dedicated search page via a template located at search/search.html . When include_search_page is set to true , the search template will be built and available at search/search.html . This method is used by the readthedocs theme. When include_search_page is set to false or not defined, it is expected that the theme provide some other mechanisms for displaying search results. For example, the mkdocs theme displays results on any page via a modal.","title":"include_search_page"},{"location":"dev-guide/themes/#search_index_only","text":"Determines whether the search plugin should only generate a search index or a complete search solution. When search_index_only is set to false , then the search plugin modifies the Jinja environment by adding its own templates directory (with a lower precedence than the theme) and adds its scripts to the extra_javascript config setting. When search_index_only is set to true or not defined, the search plugin makes no modifications to the Jinja environment. A complete solution using the provided index file is the responsibility of the theme. The search index is written to a JSON file at search/search_index.json in the site_dir . The JSON object contained within the file may contain up to three objects. { config: {...}, docs: [...], index: {...} } If present, the config object contains the key/value pairs of config options defined for the plugin in the user's mkdocs.yml config file under plugings.search . The config object was new in MkDocs version 1.0 . The docs object contains a list of document objects. Each document object is made up of a location (URL), a title , and text which can be used to create a search index and/or display search results. If present, the index object contains a pre-built index which offers performance improvements for larger sites. Note that the pre-built index is only created if the user explicitly enables the prebuild_index config option. Themes should expect the index to not be present, but can choose to use the index when it is available. The index object was new in MkDocs version 1.0 .","title":"search_index_only"},{"location":"dev-guide/themes/#packaging-themes","text":"MkDocs makes use of Python packaging to distribute themes. This comes with a few requirements. To see an example of a package containing one theme, see the MkDocs Bootstrap theme and to see a package that contains many themes, see the MkDocs Bootswatch theme . Note It is not strictly necessary to package a theme, as the entire theme can be contained in the custom_dir . If you have created a \"one-off theme,\" that should be sufficient. However, if you intend to distribute your theme for others to use, packaging the theme has some advantages. By packaging your theme, your users can more easily install it, they can rely on a default configuration being defined, and they can then take advantage of the custom_dir to make tweaks to your theme to better suit their needs.","title":"Packaging Themes"},{"location":"dev-guide/themes/#package-layout","text":"The following layout is recommended for themes. Two files at the top level directory called MANIFEST.in and setup.py beside the theme directory which contains an empty __init__.py file, a theme configuration file ( mkdocs_theme.yml ), and your template and media files. . |-- MANIFEST.in |-- theme_name | |-- __init__.py | |-- mkdocs_theme.yml | |-- main.html | |-- styles.css `-- setup.py The MANIFEST.in file should contain the following contents but with theme_name updated and any extra file extensions added to the include. recursive-include theme_name *.ico *.js *.css *.png *.html *.eot *.svg *.ttf *.woff recursive-exclude * __pycache__ recursive-exclude * *.py[co] The setup.py should include the following text with the modifications described below. from setuptools import setup, find_packages VERSION = '0.0.1' setup( name=\"mkdocs-themename\", version=VERSION, url='', license='', description='', author='', author_email='', packages=find_packages(), include_package_data=True, entry_points={ 'mkdocs.themes': [ 'themename = theme_name', ] }, zip_safe=False ) Fill in the URL, license, description, author and author email address. The name should follow the convention mkdocs-themename (like mkdocs-bootstrap and mkdocs-bootswatch ), starting with MkDocs, using hyphens to separate words and including the name of your theme. Most of the rest of the file can be left unedited. The last section we need to change is the entry_points. This is how MkDocs finds the theme(s) you are including in the package. The name on the left is the one that users will use in their mkdocs.yml and the one on the right is the directory containing your theme files. The directory you created at the start of this section with the main.html file should contain all of the other theme files. The minimum requirement is that it includes a main.html for the theme. It must also include a __init__.py file which should be empty, this file tells Python that the directory is a package.","title":"Package Layout"},{"location":"dev-guide/themes/#theme-configuration","text":"A packaged theme is required to include a configuration file named mkdocs_theme.yml which is placed in the root of your template files. The file should contain default configuration options for the theme. However, if the theme offers no configuration options, the file is still required and can be left blank. A theme which is not packaged does not need a mkdocs_theme.yml file as that file is not loaded from theme.custom_dir . The theme author is free to define any arbitrary options deemed necessary and those options will be made available in the templates to control behavior. For example, a theme might want to make a sidebar optional and include the following in the mkdocs_theme.yml file: show_sidebar: true Then in a template, that config option could be referenced: {% if config.theme.show_sidebar %} <div id=\"sidebar\">...</div> {% endif %} And the user could override the default in their project's mkdocs.yml config file: theme: name: themename show_sidebar: false In addition to arbitrary options defined by the theme, MkDocs defines a few special options which alters its behavior: Block","title":"Theme Configuration"},{"location":"dev-guide/themes/#locale","text":"This option mirrors the theme config option of the same name. If this value is not defined in the mkdocs_theme.yml file and the user does not set it in mkdocs.yml then it will default to en (English). The value is expected to match the language used in the text provided by the theme (such a \"next\" and \"previous\" links) and should be used as the value of the <html> tag's lang attribute. See Supporting theme localization/ translation for more information. Note that during configuration validation, the provided string is converted to a Locale object. The object contains Locale.language and Locale.territory attributes and will resolve as a string from within a template. Therefore, the following will work fine: <html lang=\"{ config.theme.locale }\"> If the locale was set to fr_CA (Canadian French), then the above template would render as: <html lang=\"fr_CA\"> If you did not want the territory attribute to be included, then reference the language attribute directly: <html lang=\"{ config.theme.locale.language }\"> That would render as: <html lang=\"fr\">","title":"locale"},{"location":"dev-guide/themes/#static_templates","text":"This option mirrors the theme config option of the same name and allows some defaults to be set by the theme. Note that while the user can add templates to this list, the user cannot remove templates included in the theme's config.","title":"static_templates"},{"location":"dev-guide/themes/#extends","text":"Defines a parent theme that this theme inherits from. The value should be the string name of the parent theme. Normal Jinja inheritance rules apply. Plugins may also define some options which allow the theme to inform a plugin about which set of plugin options it expects. See the documentation for any plugins you may wish to support in your theme.","title":"extends"},{"location":"dev-guide/themes/#distributing-themes","text":"With the above changes, your theme should now be ready to install. This can be done with pip, using pip install . if you are still in the same directory as the setup.py. Most Python packages, including MkDocs, are distributed on PyPI. To do this, you should run the following command. python setup.py register If you don't have an account setup, you should be prompted to create one. For a much more detailed guide, see the official Python packaging documentation for Packaging and Distributing Projects .","title":"Distributing Themes"},{"location":"dev-guide/themes/#supporting-theme-localizationtranslation","text":"While the built-in themes provide support for localization/translation of templates, custom themes and third-party themes may choose not to. Regardless, the locale setting of the theme configuration option is always present and is relied upon by other parts of the system. Therefore, it is recommended that all third-party themes use the same setting for designating a language regardless of the system they use for translation. In that way, users will experience consistent behavior regardless of the theme they may choose. The method for managing translations is up to the developers of a theme. However, if a theme developer chooses to use the same mechanisms used by the built-in themes, the sections below outline how to enable and make use of the same commands utilized by MkDocs.","title":"Supporting theme Localization/Translation"},{"location":"dev-guide/themes/#using-the-localizationtranslation-commands","text":"Warning As pybabel is not installed by default and most users will not have pybabel installed, theme developers and/or translators should make sure to have installed the necessary dependencies (using pip install 'mkdocs[i18n]' ) in order for the commands to be available for use. The translation commands should be called from the root of your theme's working tree. For an overview of the workflow used by MkDocs to translate the built-in themes, see the appropriate section of the Contributing Guide and the Translation Guide .","title":"Using the Localization/Translation commands"},{"location":"dev-guide/themes/#example-custom-theme-localizationtranslation-workflow","text":"Note If your theme inherits from an existing theme which already provides translation catalogs, your theme's translations will be merged with the parent theme's translations during a MkDocs build. This means that you only need to concentrate on the added translations. Yet, you will still benefit from the translations of the parent theme. At the same time, you may override any of parent theme's translations! Let's suppose that you're working on your own fork of the mkdocs-basic-theme and want to add translations to it. Edit the templates by wrapping text in your HTML sources with {% trans %} and {% endtrans %} as follows: --- a/basic_theme/base.html +++ b/basic_theme/base.html @@ -88,7 +88,7 @@ <body> - <h1>This is an example theme for MkDocs.</h1> + <h1>{% trans %}This is an example theme for MkDocs.{% endtrans %}</h1> <p> It is designed to be read by looking at the theme HTML which is heavily Then you would follow the Translation Guide as usual to get your translations running.","title":"Example custom theme Localization/Translation workflow"},{"location":"dev-guide/themes/#packaging-translations-with-your-theme","text":"While the Portable Object Template ( pot ) file created by the extract_messages command and the Portable Object ( po ) files created by the init_catalog and update_catalog commands are useful for creating and editing translations, they are not used by MkDocs directly and do not need to be included in a packaged release of a theme. When MkDocs builds a site with translations, it only makes use of the binary mo files(s) for the specified locale. Therefore, when packaging a theme , make sure to include it in the \"wheels\", using a MANIFEST.in file or otherwise. Then, before building your Python package, you will want to ensure that the binary mo file for each locale is up-to-date by running the compile_catalog command for each locale. MkDocs expects the binary mo files to be located at locales/<locale>/LC_MESSAGES/messages.mo , which the compile_catalog command automatically does for you. See Testing theme translations for details. Note As outlined in our Translation Guide , the MkDocs project has chosen to include the pot and po files in our code repository, but not the mo files. This requires us to always run compile_catalog before packaging a new release regardless of whether any changes were made to a translation or not. However, you may chose an alternate workflow for your theme. At a minimum, you need to ensure that up-to-date mo files are included at the correct location in each release. However, you may use a different process for generating those mo files if you chose to do so.","title":"Packaging Translations with your theme"},{"location":"dev-guide/translations/","text":"Translations \uf0c1 Theme localization guide. The built-in themes that are included with MkDocs provide support for translations. This is a guide for translators, which documents the process for contributing new translations and/or updating existing translations. For guidance on modifying the existing themes, see the Contributing Guide . To enable a specific translation see the documentation about the specific theme you are using in the User Guide . For translations of third-party themes, please see the documentation for those themes. For a third-party theme to make use of MkDocs' translation tools and methods, that theme must be properly configured to make use of those tools. Note Translations only apply to text contained within a theme's template, such as \"next\" and \"previous\" links. The Markdown content of a page is not translated. If you wish to create multilingual documentation, you need to combine theme localization with a third-party internationalization/localization plugin. Localization tooling prerequisites \uf0c1 Theme localization makes use of the babel project for generation and compilation of localization files. You will need to be working from the git working tree on your local machine to make use of the translation commands. See the Contributing Guide for direction on how to Install for Development and Submit a Pull Request . The instructions in this document assume that you are working from a properly configured development environment. Make sure translation requirements are installed in your environment: pip install 'mkdocs[i18n]' Adding language translations to themes \uf0c1 If your favorite language locale is not yet supported on one (or both) of the built-in themes ( mkdocs and readthedocs ), you can easily contribute a translation by following the steps below. Here is a quick summary of what you'll need to do: Fork and clone the MkDocs repository and then install MkDocs for development for adding and testing translations. Initialize new localization catalogs for your language (if a translation for your locale already exists, follow the instructions for updating theme localization files instead). Add a translation for every text placeholder in the localized catalogs. Locally serve and test the translated themes for your language. Update the documentation about supported translations for each translated theme. Contribute your translation through a Pull Request. Note Translation locales are usually identified using the ISO-639-1 (2-letter) language codes. While territory/region/county codes are also supported, location specific translations should only be added after the general language translation has been completed and the regional dialect requires use of a term which differs from the general language translation. Fork and clone the MkDocs repository \uf0c1 In the following steps you'll work with a fork of the MkDocs repository. Follow the instructions for forking and cloning the MkDocs repository . To test the translations you also need to install MkDocs for development from your fork. Initializing the localization catalogs \uf0c1 The templates for each theme contain text placeholders that have been extracted into a Portable Object Template ( messages.pot ) file, which is present in each theme's folder. Initializing a catalog consists of running a command which will create a directory structure for your desired language and prepare a Portable Object ( messages.po ) file derived from the pot file of the theme. Use the init_catalog command on each theme's directory and provide the appropriate language code ( -l <language> ). The language code is almost always just two lowercase letters, such as sv , but in some cases it needs to be further disambiguated. See: Already translated languages for built-in themes ISO 639 Language List Language subtag registry In particular, the way to know that the pt language should be disambiguated as pt_PT and pt_BR is that the Language subtag registry page contains pt- if you search for it. Whereas sv should remain just sv , because that page does not contain sv- . So, if we pick es (Spanish) as our example language code, to add a translation for it to both built-in themes, run these commands: pybabel init --input-file mkdocs/themes/mkdocs/messages.pot --output-dir mkdocs/themes/mkdocs/locales -l es pybabel init --input-file mkdocs/themes/readthedocs/messages.pot --output-dir mkdocs/themes/readthedocs/locales -l es The above command will create a file structure as follows: mkdocs/themes/mkdocs/locales \u251c\u2500\u2500 es \u2502 \u2514\u2500\u2500 LC_MESSAGES \u2502 \u2514\u2500\u2500 messages.po You can now move on to the next step and add a translation for every text placeholder in the localized catalog. Updating a theme translation \uf0c1 If a theme's messages.pot template file has been updated since the messages.po was last updated for your locale, follow the steps below to update the theme's messages.po file: Update the theme's translation catalog to refresh the translatable text placeholders of each theme. Translate the newly added translatable text placeholders on every messages.po catalog file language you can. Locally serve and test the translated themes for your language. Contribute your translation through a Pull Request. Updating the translation catalogs \uf0c1 This step should be completed after a theme template have been updated for each language that you are comfortable contributing a translation for. To update the fr translation catalog of both built-in themes, use the following commands: pybabel update --ignore-obsolete --input-file mkdocs/themes/mkdocs/messages.pot --output-dir mkdocs/themes/mkdocs/locales -l fr pybabel update --ignore-obsolete --input-file mkdocs/themes/readthedocs/messages.pot --output-dir mkdocs/themes/readthedocs/locales -l fr You can now move on to the next step and add a translation for every updated text placeholder in the localized catalog. Translating the MkDocs themes \uf0c1 Now that your localized messages.po files are ready, all you need to do is add a translation in each msgstr item for each msgid item in the file. msgid \"Next\" msgstr \"Siguiente\" Warning Do not modify the msgid as it is common to all translations. Just add its translation in the msgstr item. Once you have finished translating all of the terms listed in the po file, you'll want to test your localized theme . Testing theme translations \uf0c1 To test a theme with translations, you need to first compile the messages.po files of your theme into messages.mo files. The following commands will compile the es translation for both built-in themes: pybabel compile --statistics --directory mkdocs/themes/mkdocs/locales -l es pybabel compile --statistics --directory mkdocs/themes/readthedocs/locales -l es The above command results in the following file structure: mkdocs/themes/mkdocs/locales \u251c\u2500\u2500 es \u2502 \u2514\u2500\u2500 LC_MESSAGES \u2502 \u251c\u2500\u2500 messages.mo \u2502 \u2514\u2500\u2500 messages.po Note that the compiled messages.mo file was generated based on the messages.po file that you just edited. Then modify the mkdocs.yml file at the root of the project to test the new and/or updated locale: theme: name: mkdocs locale: es Finally, run mkdocs serve to check out your new localized version of the theme. Note The build and release process takes care of compiling and distributing all locales to end users so you only have to worry about contributing the actual text translation messages.po files (the rest is ignored by git). After you have finished testing your work, be sure to undo the change to the locale setting in the mkdocs.yml file before submitting your changes. Updating theme documentation \uf0c1 The page Choosing your theme updates by itself with all available locale options. Contributing translations \uf0c1 It is now time for you to contribute your nice work to the project. Thank you!","title":"Translations"},{"location":"dev-guide/translations/#translations","text":"Theme localization guide. The built-in themes that are included with MkDocs provide support for translations. This is a guide for translators, which documents the process for contributing new translations and/or updating existing translations. For guidance on modifying the existing themes, see the Contributing Guide . To enable a specific translation see the documentation about the specific theme you are using in the User Guide . For translations of third-party themes, please see the documentation for those themes. For a third-party theme to make use of MkDocs' translation tools and methods, that theme must be properly configured to make use of those tools. Note Translations only apply to text contained within a theme's template, such as \"next\" and \"previous\" links. The Markdown content of a page is not translated. If you wish to create multilingual documentation, you need to combine theme localization with a third-party internationalization/localization plugin.","title":"Translations"},{"location":"dev-guide/translations/#localization-tooling-prerequisites","text":"Theme localization makes use of the babel project for generation and compilation of localization files. You will need to be working from the git working tree on your local machine to make use of the translation commands. See the Contributing Guide for direction on how to Install for Development and Submit a Pull Request . The instructions in this document assume that you are working from a properly configured development environment. Make sure translation requirements are installed in your environment: pip install 'mkdocs[i18n]'","title":"Localization tooling prerequisites"},{"location":"dev-guide/translations/#adding-language-translations-to-themes","text":"If your favorite language locale is not yet supported on one (or both) of the built-in themes ( mkdocs and readthedocs ), you can easily contribute a translation by following the steps below. Here is a quick summary of what you'll need to do: Fork and clone the MkDocs repository and then install MkDocs for development for adding and testing translations. Initialize new localization catalogs for your language (if a translation for your locale already exists, follow the instructions for updating theme localization files instead). Add a translation for every text placeholder in the localized catalogs. Locally serve and test the translated themes for your language. Update the documentation about supported translations for each translated theme. Contribute your translation through a Pull Request. Note Translation locales are usually identified using the ISO-639-1 (2-letter) language codes. While territory/region/county codes are also supported, location specific translations should only be added after the general language translation has been completed and the regional dialect requires use of a term which differs from the general language translation.","title":"Adding language translations to themes"},{"location":"dev-guide/translations/#fork-and-clone-the-mkdocs-repository","text":"In the following steps you'll work with a fork of the MkDocs repository. Follow the instructions for forking and cloning the MkDocs repository . To test the translations you also need to install MkDocs for development from your fork.","title":"Fork and clone the MkDocs repository"},{"location":"dev-guide/translations/#initializing-the-localization-catalogs","text":"The templates for each theme contain text placeholders that have been extracted into a Portable Object Template ( messages.pot ) file, which is present in each theme's folder. Initializing a catalog consists of running a command which will create a directory structure for your desired language and prepare a Portable Object ( messages.po ) file derived from the pot file of the theme. Use the init_catalog command on each theme's directory and provide the appropriate language code ( -l <language> ). The language code is almost always just two lowercase letters, such as sv , but in some cases it needs to be further disambiguated. See: Already translated languages for built-in themes ISO 639 Language List Language subtag registry In particular, the way to know that the pt language should be disambiguated as pt_PT and pt_BR is that the Language subtag registry page contains pt- if you search for it. Whereas sv should remain just sv , because that page does not contain sv- . So, if we pick es (Spanish) as our example language code, to add a translation for it to both built-in themes, run these commands: pybabel init --input-file mkdocs/themes/mkdocs/messages.pot --output-dir mkdocs/themes/mkdocs/locales -l es pybabel init --input-file mkdocs/themes/readthedocs/messages.pot --output-dir mkdocs/themes/readthedocs/locales -l es The above command will create a file structure as follows: mkdocs/themes/mkdocs/locales \u251c\u2500\u2500 es \u2502 \u2514\u2500\u2500 LC_MESSAGES \u2502 \u2514\u2500\u2500 messages.po You can now move on to the next step and add a translation for every text placeholder in the localized catalog.","title":"Initializing the localization catalogs"},{"location":"dev-guide/translations/#updating-a-theme-translation","text":"If a theme's messages.pot template file has been updated since the messages.po was last updated for your locale, follow the steps below to update the theme's messages.po file: Update the theme's translation catalog to refresh the translatable text placeholders of each theme. Translate the newly added translatable text placeholders on every messages.po catalog file language you can. Locally serve and test the translated themes for your language. Contribute your translation through a Pull Request.","title":"Updating a theme translation"},{"location":"dev-guide/translations/#updating-the-translation-catalogs","text":"This step should be completed after a theme template have been updated for each language that you are comfortable contributing a translation for. To update the fr translation catalog of both built-in themes, use the following commands: pybabel update --ignore-obsolete --input-file mkdocs/themes/mkdocs/messages.pot --output-dir mkdocs/themes/mkdocs/locales -l fr pybabel update --ignore-obsolete --input-file mkdocs/themes/readthedocs/messages.pot --output-dir mkdocs/themes/readthedocs/locales -l fr You can now move on to the next step and add a translation for every updated text placeholder in the localized catalog.","title":"Updating the translation catalogs"},{"location":"dev-guide/translations/#translating-the-mkdocs-themes","text":"Now that your localized messages.po files are ready, all you need to do is add a translation in each msgstr item for each msgid item in the file. msgid \"Next\" msgstr \"Siguiente\" Warning Do not modify the msgid as it is common to all translations. Just add its translation in the msgstr item. Once you have finished translating all of the terms listed in the po file, you'll want to test your localized theme .","title":"Translating the MkDocs themes"},{"location":"dev-guide/translations/#testing-theme-translations","text":"To test a theme with translations, you need to first compile the messages.po files of your theme into messages.mo files. The following commands will compile the es translation for both built-in themes: pybabel compile --statistics --directory mkdocs/themes/mkdocs/locales -l es pybabel compile --statistics --directory mkdocs/themes/readthedocs/locales -l es The above command results in the following file structure: mkdocs/themes/mkdocs/locales \u251c\u2500\u2500 es \u2502 \u2514\u2500\u2500 LC_MESSAGES \u2502 \u251c\u2500\u2500 messages.mo \u2502 \u2514\u2500\u2500 messages.po Note that the compiled messages.mo file was generated based on the messages.po file that you just edited. Then modify the mkdocs.yml file at the root of the project to test the new and/or updated locale: theme: name: mkdocs locale: es Finally, run mkdocs serve to check out your new localized version of the theme. Note The build and release process takes care of compiling and distributing all locales to end users so you only have to worry about contributing the actual text translation messages.po files (the rest is ignored by git). After you have finished testing your work, be sure to undo the change to the locale setting in the mkdocs.yml file before submitting your changes.","title":"Testing theme translations"},{"location":"dev-guide/translations/#updating-theme-documentation","text":"The page Choosing your theme updates by itself with all available locale options.","title":"Updating theme documentation"},{"location":"dev-guide/translations/#contributing-translations","text":"It is now time for you to contribute your nice work to the project. Thank you!","title":"Contributing translations"},{"location":"user-guide/","text":"User Guide \uf0c1 Building Documentation with MkDocs The MkDocs User Guide provides documentation for users of MkDocs. See Getting Started for an introductory tutorial. You can jump directly to a page listed below, or use the next and previous buttons in the navigation bar at the top of the page to move through the documentation in order. Installation Writing Your Docs Choosing Your Theme Customizing Your Theme Localizing Your Theme Configuration Command Line Interface Deploying Your Docs","title":"User Guide"},{"location":"user-guide/#user-guide","text":"Building Documentation with MkDocs The MkDocs User Guide provides documentation for users of MkDocs. See Getting Started for an introductory tutorial. You can jump directly to a page listed below, or use the next and previous buttons in the navigation bar at the top of the page to move through the documentation in order. Installation Writing Your Docs Choosing Your Theme Customizing Your Theme Localizing Your Theme Configuration Command Line Interface Deploying Your Docs","title":"User Guide"},{"location":"user-guide/choosing-your-theme/","text":"Choosing your Theme \uf0c1 Selecting and configuring a theme. MkDocs includes two built-in themes ( mkdocs and readthedocs ), as documented below. However, many third party themes are available to choose from as well. To choose a theme, set the theme configuration option in your mkdocs.yml config file. theme: name: readthedocs mkdocs \uf0c1 The default theme, which was built as a custom Bootstrap theme, supports almost every feature of MkDocs. In addition to the default theme configuration options , the mkdocs theme supports the following options: color_mode : Set the default color mode for the theme to one of light , dark , or auto . The auto mode will switch to light or dark based on the system configuration of the user's device. Default: light . user_color_mode_toggle : Enable a toggle menu in the navigation bar which allows users to select their preferred color_mode (light, dark, auto) from within the browser and save their preference for future page loads. The default selection of the toggle menu on first page load is the value set to color_mode . Default: false . nav_style : Adjust the visual style of the top navigation bar. Set to one of primary , dark or light . Default: primary . This option is independent of the color_mode option and must be defined separately. highlightjs : Enables highlighting of source code in code blocks using the highlight.js JavaScript library. Default: True . hljs_style : The highlight.js library provides many different styles (color variations) for highlighting source code in code blocks. Set this to the name of the desired style when in light mode. Default: github . hljs_style_dark : Set this to the name of the desired highlight.js style when in dark mode. Default: github_dark . hljs_languages : By default, highlight.js only supports 23 common languages. List additional languages here to include support for them. theme: name: mkdocs highlightjs: true hljs_languages: - yaml - rust analytics : Defines configuration options for an analytics service. Currently, only Google Analytics v4 is supported via the gtag option. gtag : To enable Google Analytics, set to a Google Analytics v4 tracking ID, which uses the G- format. See Google's documentation to Set up Analytics for a website and/or app (GA4) or to Upgrade to a Google Analytics 4 property . theme: name: mkdocs analytics: gtag: G-ABC123 When set to the default ( null ) Google Analytics is disabled for the site. shortcuts : Defines keyboard shortcut keys. theme: name: mkdocs shortcuts: help: 191 # ? next: 78 # n previous: 80 # p search: 83 # s All values must be numeric key codes. It is best to use keys that are available on all keyboards. You may use https://keycode.info/ to determine the key code for a given key. help : Display a help modal that lists the keyboard shortcuts. Default: 191 (?) next : Navigate to the \"next\" page. Default: 78 (n) previous : Navigate to the \"previous\" page. Default: 80 (p) search : Display the search modal. Default: 83 (s) navigation_depth : The maximum depth of the navigation tree in the sidebar. Default: 2 . locale : The locale (language/location) used to build the theme. If your locale is not yet supported, it will fall back to the default. The following locales are supported by this theme: en : English (default) de : German es : Spanish fa : Persian fr : French id : Indonesian it : Italian ja : Japanese nb : Norwegian Bokm\u00e5l nl : Dutch nn : Norwegian Nynorsk pl : Polish pt_BR : Portuguese (Brazil) ru : Russian tr : Turkish uk : Ukrainian zh_CN : Chinese (Simplified, China) zh_TW : Chinese (Traditional, Taiwan) See the guide on localizing your theme for more information. readthedocs \uf0c1 A clone of the default theme used by the Read the Docs service, which offers the same restricted feature set as its parent theme. Like its parent theme, only two levels of navigation are supported. In addition to the default theme configuration options , the readthedocs theme supports the following options: highlightjs : Enables highlighting of source code in code blocks using the highlight.js JavaScript library. Default: True . hljs_languages : By default, highlight.js only supports 23 common languages. List additional languages here to include support for them. theme: name: readthedocs highlightjs: true hljs_languages: - yaml - rust analytics : Defines configuration options for an analytics service. gtag : To enable Google Analytics, set to a Google Analytics v4 tracking ID, which uses the G- format. See Google's documentation to Set up Analytics for a website and/or app (GA4) or to Upgrade to a Google Analytics 4 property . theme: name: readthedocs analytics: gtag: G-ABC123 When set to the default ( null ) Google Analytics is disabled for the anonymize_ip : To enable anonymous IP address for Google Analytics, set this to True . Default: False . include_homepage_in_sidebar : Lists the homepage in the sidebar menu. As MkDocs requires that the homepage be listed in the nav configuration option, this setting allows the homepage to be included or excluded from the sidebar. Note that the site name/logo always links to the homepage. Default: True . prev_next_buttons_location : One of bottom , top , both , or none . Displays the \u201cNext\u201d and \u201cPrevious\u201d buttons accordingly. Default: bottom . navigation_depth : The maximum depth of the navigation tree in the sidebar. Default: 4 . collapse_navigation : Only include the page section headers in the sidebar for the current page. Default: True . titles_only : Only include page titles in the sidebar, excluding all section headers for all pages. Default: False . sticky_navigation : If True, causes the sidebar to scroll with the main page content as you scroll the page. Default: True . locale : The locale (language/location) used to build the theme. If your locale is not yet supported, it will fall back to the default. The following locales are supported by this theme: en : English (default) de : German es : Spanish fa : Persian fr : French id : Indonesian it : Italian ja : Japanese nl : Dutch pl : Polish pt_BR : Portuguese (Brazil) ru : Russian tr : Turkish uk : Ukrainian zh_CN : Chinese (Simplified, China) zh_TW : Chinese (Traditional, Taiwan) See the guide on localizing your theme for more information. logo : To set a logo on your project instead of the plain text site_name , set this variable to be the location of your image. Default: null . Third Party Themes \uf0c1 A list of third party themes can be found at the community wiki page and the ranked catalog . If you have created your own, please add them there. Warning Installing an MkDocs theme means installing a Python package and executing any code that the author has put in there. So, exercise the usual caution; there's no attempt at sandboxing.","title":"Choosing Your Theme"},{"location":"user-guide/choosing-your-theme/#choosing-your-theme","text":"Selecting and configuring a theme. MkDocs includes two built-in themes ( mkdocs and readthedocs ), as documented below. However, many third party themes are available to choose from as well. To choose a theme, set the theme configuration option in your mkdocs.yml config file. theme: name: readthedocs","title":"Choosing your Theme"},{"location":"user-guide/choosing-your-theme/#mkdocs","text":"The default theme, which was built as a custom Bootstrap theme, supports almost every feature of MkDocs. In addition to the default theme configuration options , the mkdocs theme supports the following options: color_mode : Set the default color mode for the theme to one of light , dark , or auto . The auto mode will switch to light or dark based on the system configuration of the user's device. Default: light . user_color_mode_toggle : Enable a toggle menu in the navigation bar which allows users to select their preferred color_mode (light, dark, auto) from within the browser and save their preference for future page loads. The default selection of the toggle menu on first page load is the value set to color_mode . Default: false . nav_style : Adjust the visual style of the top navigation bar. Set to one of primary , dark or light . Default: primary . This option is independent of the color_mode option and must be defined separately. highlightjs : Enables highlighting of source code in code blocks using the highlight.js JavaScript library. Default: True . hljs_style : The highlight.js library provides many different styles (color variations) for highlighting source code in code blocks. Set this to the name of the desired style when in light mode. Default: github . hljs_style_dark : Set this to the name of the desired highlight.js style when in dark mode. Default: github_dark . hljs_languages : By default, highlight.js only supports 23 common languages. List additional languages here to include support for them. theme: name: mkdocs highlightjs: true hljs_languages: - yaml - rust analytics : Defines configuration options for an analytics service. Currently, only Google Analytics v4 is supported via the gtag option. gtag : To enable Google Analytics, set to a Google Analytics v4 tracking ID, which uses the G- format. See Google's documentation to Set up Analytics for a website and/or app (GA4) or to Upgrade to a Google Analytics 4 property . theme: name: mkdocs analytics: gtag: G-ABC123 When set to the default ( null ) Google Analytics is disabled for the site. shortcuts : Defines keyboard shortcut keys. theme: name: mkdocs shortcuts: help: 191 # ? next: 78 # n previous: 80 # p search: 83 # s All values must be numeric key codes. It is best to use keys that are available on all keyboards. You may use https://keycode.info/ to determine the key code for a given key. help : Display a help modal that lists the keyboard shortcuts. Default: 191 (?) next : Navigate to the \"next\" page. Default: 78 (n) previous : Navigate to the \"previous\" page. Default: 80 (p) search : Display the search modal. Default: 83 (s) navigation_depth : The maximum depth of the navigation tree in the sidebar. Default: 2 . locale : The locale (language/location) used to build the theme. If your locale is not yet supported, it will fall back to the default. The following locales are supported by this theme: en : English (default) de : German es : Spanish fa : Persian fr : French id : Indonesian it : Italian ja : Japanese nb : Norwegian Bokm\u00e5l nl : Dutch nn : Norwegian Nynorsk pl : Polish pt_BR : Portuguese (Brazil) ru : Russian tr : Turkish uk : Ukrainian zh_CN : Chinese (Simplified, China) zh_TW : Chinese (Traditional, Taiwan) See the guide on localizing your theme for more information.","title":"mkdocs"},{"location":"user-guide/choosing-your-theme/#readthedocs","text":"A clone of the default theme used by the Read the Docs service, which offers the same restricted feature set as its parent theme. Like its parent theme, only two levels of navigation are supported. In addition to the default theme configuration options , the readthedocs theme supports the following options: highlightjs : Enables highlighting of source code in code blocks using the highlight.js JavaScript library. Default: True . hljs_languages : By default, highlight.js only supports 23 common languages. List additional languages here to include support for them. theme: name: readthedocs highlightjs: true hljs_languages: - yaml - rust analytics : Defines configuration options for an analytics service. gtag : To enable Google Analytics, set to a Google Analytics v4 tracking ID, which uses the G- format. See Google's documentation to Set up Analytics for a website and/or app (GA4) or to Upgrade to a Google Analytics 4 property . theme: name: readthedocs analytics: gtag: G-ABC123 When set to the default ( null ) Google Analytics is disabled for the anonymize_ip : To enable anonymous IP address for Google Analytics, set this to True . Default: False . include_homepage_in_sidebar : Lists the homepage in the sidebar menu. As MkDocs requires that the homepage be listed in the nav configuration option, this setting allows the homepage to be included or excluded from the sidebar. Note that the site name/logo always links to the homepage. Default: True . prev_next_buttons_location : One of bottom , top , both , or none . Displays the \u201cNext\u201d and \u201cPrevious\u201d buttons accordingly. Default: bottom . navigation_depth : The maximum depth of the navigation tree in the sidebar. Default: 4 . collapse_navigation : Only include the page section headers in the sidebar for the current page. Default: True . titles_only : Only include page titles in the sidebar, excluding all section headers for all pages. Default: False . sticky_navigation : If True, causes the sidebar to scroll with the main page content as you scroll the page. Default: True . locale : The locale (language/location) used to build the theme. If your locale is not yet supported, it will fall back to the default. The following locales are supported by this theme: en : English (default) de : German es : Spanish fa : Persian fr : French id : Indonesian it : Italian ja : Japanese nl : Dutch pl : Polish pt_BR : Portuguese (Brazil) ru : Russian tr : Turkish uk : Ukrainian zh_CN : Chinese (Simplified, China) zh_TW : Chinese (Traditional, Taiwan) See the guide on localizing your theme for more information. logo : To set a logo on your project instead of the plain text site_name , set this variable to be the location of your image. Default: null .","title":"readthedocs"},{"location":"user-guide/choosing-your-theme/#third-party-themes","text":"A list of third party themes can be found at the community wiki page and the ranked catalog . If you have created your own, please add them there. Warning Installing an MkDocs theme means installing a Python package and executing any code that the author has put in there. So, exercise the usual caution; there's no attempt at sandboxing.","title":"Third Party Themes"},{"location":"user-guide/cli/","text":"Command Line Interface \uf0c1 mkdocs \uf0c1 MkDocs - Project documentation with Markdown. Usage: mkdocs [OPTIONS] COMMAND [ARGS]... Options: Name Type Description Default -V , --version boolean Show the version and exit. False -q , --quiet boolean Silence warnings False -v , --verbose boolean Enable verbose output False --color / --no-color boolean Force enable or disable color and wrapping for the output. Default is auto-detect. None --help boolean Show this message and exit. False Subcommands build : Build the MkDocs documentation get-deps : Show required PyPI packages inferred from plugins in mkdocs.yml gh-deploy : Deploy your documentation to GitHub Pages new : Create a new MkDocs project serve : Run the builtin development server mkdocs build \uf0c1 Build the MkDocs documentation Usage: mkdocs build [OPTIONS] Options: Name Type Description Default -c , --clean / --dirty boolean Remove old files from the site_dir before building (the default). True -f , --config-file filename Provide a specific MkDocs config. This can be a file name, or '-' to read from stdin. None -s , --strict / --no-strict boolean Enable strict mode. This will cause MkDocs to abort the build on any warnings. None -t , --theme choice ( mkdocs | readthedocs ) The theme to use when building your documentation. None --use-directory-urls / --no-directory-urls boolean Use directory URLs when building pages (the default). None -d , --site-dir path The directory to output the result of the documentation build. None -q , --quiet boolean Silence warnings False -v , --verbose boolean Enable verbose output False --help boolean Show this message and exit. False mkdocs get-deps \uf0c1 Show required PyPI packages inferred from plugins in mkdocs.yml Usage: mkdocs get-deps [OPTIONS] Options: Name Type Description Default -v , --verbose boolean Enable verbose output False -f , --config-file filename Provide a specific MkDocs config. This can be a file name, or '-' to read from stdin. None -p , --projects-file text URL or local path of the registry file that declares all known MkDocs-related projects. https://raw.githubusercontent.com/mkdocs/catalog/main/projects.yaml --help boolean Show this message and exit. False mkdocs gh-deploy \uf0c1 Deploy your documentation to GitHub Pages Usage: mkdocs gh-deploy [OPTIONS] Options: Name Type Description Default -c , --clean / --dirty boolean Remove old files from the site_dir before building (the default). True -m , --message text A commit message to use when committing to the GitHub Pages remote branch. Commit {sha} and MkDocs {version} are available as expansions None -b , --remote-branch text The remote branch to commit to for GitHub Pages. This overrides the value specified in config None -r , --remote-name text The remote name to commit to for GitHub Pages. This overrides the value specified in config None --force boolean Force the push to the repository. False --no-history boolean Replace the whole Git history with one new commit. False --ignore-version boolean Ignore check that build is not being deployed with an older version of MkDocs. False --shell boolean Use the shell when invoking Git. False -f , --config-file filename Provide a specific MkDocs config. This can be a file name, or '-' to read from stdin. None -s , --strict / --no-strict boolean Enable strict mode. This will cause MkDocs to abort the build on any warnings. None -t , --theme choice ( mkdocs | readthedocs ) The theme to use when building your documentation. None --use-directory-urls / --no-directory-urls boolean Use directory URLs when building pages (the default). None -d , --site-dir path The directory to output the result of the documentation build. None -q , --quiet boolean Silence warnings False -v , --verbose boolean Enable verbose output False --help boolean Show this message and exit. False mkdocs new \uf0c1 Create a new MkDocs project Usage: mkdocs new [OPTIONS] PROJECT_DIRECTORY Options: Name Type Description Default -q , --quiet boolean Silence warnings False -v , --verbose boolean Enable verbose output False --help boolean Show this message and exit. False mkdocs serve \uf0c1 Run the builtin development server Usage: mkdocs serve [OPTIONS] Options: Name Type Description Default -a , --dev-addr text IP address and port to serve documentation locally (default: localhost:8000) None --no-livereload boolean Disable the live reloading in the development server. False --dirty text Only re-build files that have changed. False -c , --clean text Build the site without any effects of mkdocs serve - pure mkdocs build , then serve. False --watch-theme boolean Include the theme in list of files to watch for live reloading. Ignored when live reload is not used. False -w , --watch path A directory or file to watch for live reloading. Can be supplied multiple times. [] -f , --config-file filename Provide a specific MkDocs config. This can be a file name, or '-' to read from stdin. None -s , --strict / --no-strict boolean Enable strict mode. This will cause MkDocs to abort the build on any warnings. None -t , --theme choice ( mkdocs | readthedocs ) The theme to use when building your documentation. None --use-directory-urls / --no-directory-urls boolean Use directory URLs when building pages (the default). None -q , --quiet boolean Silence warnings False -v , --verbose boolean Enable verbose output False --help boolean Show this message and exit. False","title":"Command Line Interface"},{"location":"user-guide/cli/#command-line-interface","text":"","title":"Command Line Interface"},{"location":"user-guide/cli/#mkdocs","text":"MkDocs - Project documentation with Markdown. Usage: mkdocs [OPTIONS] COMMAND [ARGS]... Options: Name Type Description Default -V , --version boolean Show the version and exit. False -q , --quiet boolean Silence warnings False -v , --verbose boolean Enable verbose output False --color / --no-color boolean Force enable or disable color and wrapping for the output. Default is auto-detect. None --help boolean Show this message and exit. False Subcommands build : Build the MkDocs documentation get-deps : Show required PyPI packages inferred from plugins in mkdocs.yml gh-deploy : Deploy your documentation to GitHub Pages new : Create a new MkDocs project serve : Run the builtin development server","title":"mkdocs"},{"location":"user-guide/cli/#mkdocs-build","text":"Build the MkDocs documentation Usage: mkdocs build [OPTIONS] Options: Name Type Description Default -c , --clean / --dirty boolean Remove old files from the site_dir before building (the default). True -f , --config-file filename Provide a specific MkDocs config. This can be a file name, or '-' to read from stdin. None -s , --strict / --no-strict boolean Enable strict mode. This will cause MkDocs to abort the build on any warnings. None -t , --theme choice ( mkdocs | readthedocs ) The theme to use when building your documentation. None --use-directory-urls / --no-directory-urls boolean Use directory URLs when building pages (the default). None -d , --site-dir path The directory to output the result of the documentation build. None -q , --quiet boolean Silence warnings False -v , --verbose boolean Enable verbose output False --help boolean Show this message and exit. False","title":"build"},{"location":"user-guide/cli/#mkdocs-get-deps","text":"Show required PyPI packages inferred from plugins in mkdocs.yml Usage: mkdocs get-deps [OPTIONS] Options: Name Type Description Default -v , --verbose boolean Enable verbose output False -f , --config-file filename Provide a specific MkDocs config. This can be a file name, or '-' to read from stdin. None -p , --projects-file text URL or local path of the registry file that declares all known MkDocs-related projects. https://raw.githubusercontent.com/mkdocs/catalog/main/projects.yaml --help boolean Show this message and exit. False","title":"get-deps"},{"location":"user-guide/cli/#mkdocs-gh-deploy","text":"Deploy your documentation to GitHub Pages Usage: mkdocs gh-deploy [OPTIONS] Options: Name Type Description Default -c , --clean / --dirty boolean Remove old files from the site_dir before building (the default). True -m , --message text A commit message to use when committing to the GitHub Pages remote branch. Commit {sha} and MkDocs {version} are available as expansions None -b , --remote-branch text The remote branch to commit to for GitHub Pages. This overrides the value specified in config None -r , --remote-name text The remote name to commit to for GitHub Pages. This overrides the value specified in config None --force boolean Force the push to the repository. False --no-history boolean Replace the whole Git history with one new commit. False --ignore-version boolean Ignore check that build is not being deployed with an older version of MkDocs. False --shell boolean Use the shell when invoking Git. False -f , --config-file filename Provide a specific MkDocs config. This can be a file name, or '-' to read from stdin. None -s , --strict / --no-strict boolean Enable strict mode. This will cause MkDocs to abort the build on any warnings. None -t , --theme choice ( mkdocs | readthedocs ) The theme to use when building your documentation. None --use-directory-urls / --no-directory-urls boolean Use directory URLs when building pages (the default). None -d , --site-dir path The directory to output the result of the documentation build. None -q , --quiet boolean Silence warnings False -v , --verbose boolean Enable verbose output False --help boolean Show this message and exit. False","title":"gh-deploy"},{"location":"user-guide/cli/#mkdocs-new","text":"Create a new MkDocs project Usage: mkdocs new [OPTIONS] PROJECT_DIRECTORY Options: Name Type Description Default -q , --quiet boolean Silence warnings False -v , --verbose boolean Enable verbose output False --help boolean Show this message and exit. False","title":"new"},{"location":"user-guide/cli/#mkdocs-serve","text":"Run the builtin development server Usage: mkdocs serve [OPTIONS] Options: Name Type Description Default -a , --dev-addr text IP address and port to serve documentation locally (default: localhost:8000) None --no-livereload boolean Disable the live reloading in the development server. False --dirty text Only re-build files that have changed. False -c , --clean text Build the site without any effects of mkdocs serve - pure mkdocs build , then serve. False --watch-theme boolean Include the theme in list of files to watch for live reloading. Ignored when live reload is not used. False -w , --watch path A directory or file to watch for live reloading. Can be supplied multiple times. [] -f , --config-file filename Provide a specific MkDocs config. This can be a file name, or '-' to read from stdin. None -s , --strict / --no-strict boolean Enable strict mode. This will cause MkDocs to abort the build on any warnings. None -t , --theme choice ( mkdocs | readthedocs ) The theme to use when building your documentation. None --use-directory-urls / --no-directory-urls boolean Use directory URLs when building pages (the default). None -q , --quiet boolean Silence warnings False -v , --verbose boolean Enable verbose output False --help boolean Show this message and exit. False","title":"serve"},{"location":"user-guide/configuration/","text":"Configuration \uf0c1 Guide to all available configuration settings. Introduction \uf0c1 Project settings are configured by default using a YAML configuration file in the project directory named mkdocs.yml . You can specify another path for it by using the -f / --config-file option (see mkdocs build --help ). At a minimum, this configuration file must contain the site_name . All other settings are optional. Project information \uf0c1 site_name \uf0c1 This is a required setting , and should be a string that is used as the main title for the project documentation. For example: site_name: Marshmallow Generator When rendering the theme this setting will be passed as the site_name context variable. site_url \uf0c1 Set the canonical URL of the site. This will add a link tag with the canonical URL to the head section of each HTML page. If the 'root' of the MkDocs site will be within a subdirectory of a domain, be sure to include that subdirectory in the setting ( https://example.com/foo/ ). This setting is also used for mkdocs serve : the server will be mounted onto a path taken from the path component of the URL, e.g. some/page.md will be served from http://127.0.0.1:8000/foo/some/page/ to mimic the expected remote layout. default : null repo_url \uf0c1 When set, provides a link to your repository (GitHub, Bitbucket, GitLab, ...) on each page. repo_url: https://github.com/example/repository/ default : null repo_name \uf0c1 When set, provides the name for the link to your repository on each page. default : 'GitHub' , 'Bitbucket' or 'GitLab' if the repo_url matches those domains, otherwise the hostname from the repo_url . edit_uri \uf0c1 The path from the base repo_url to the docs directory when directly viewing a page, accounting for specifics of the repository host (e.g. GitHub, Bitbucket, etc), the branch, and the docs directory itself. MkDocs concatenates repo_url and edit_uri , and appends the input path of the page. When set, and if your theme supports it, provides a link directly to the page in your source repository. This makes it easier to find and edit the source for the page. If repo_url is not set, this option is ignored. On some themes, setting this option may cause an edit link to be used in place of a repository link. Other themes may show both links. The edit_uri supports query ('?') and fragment ('#') characters. For repository hosts that use a query or a fragment to access the files, the edit_uri might be set as follows. (Note the ? and # in the URI...) # Query string example edit_uri: '?query=root/path/docs/' # Hash fragment example edit_uri: '#root/path/docs/' For other repository hosts, simply specify the relative path to the docs directory. # Query string example edit_uri: root/path/docs/ For example, having this config: repo_url: https://example.com/project/repo edit_uri: blob/main/docs/ means that a page named 'foo/bar.md' will have its edit link lead to: https://example.com/project/repo/blob/main/docs/foo/bar.md edit_uri can actually be just an absolute URL, not necessarily relative to repo_url , so this can achieve the same result: edit_uri: https://example.com/project/repo/blob/main/docs/ For more flexibility, see edit_uri_template below. Note On a few known hosts (specifically GitHub, Bitbucket and GitLab), the edit_uri is derived from the 'repo_url' and does not need to be set manually. Simply defining a repo_url will automatically populate the edit_uri configs setting. For example, for a GitHub- or GitLab-hosted repository, the edit_uri would be automatically set as edit/master/docs/ (Note the edit path and master branch). For a Bitbucket-hosted repository, the equivalent edit_uri would be automatically set as src/default/docs/ (note the src path and default branch). To use a different URI than the default (for example a different branch), simply set the edit_uri to your desired string. If you do not want any \"edit URL link\" displayed on your pages, then set edit_uri to an empty string to disable the automatic setting. Warning On GitHub and GitLab, the default \"edit\" path ( edit/master/docs/ ) opens the page in the online editor. This functionality requires that the user have and be logged in to a GitHub/GitLab account. Otherwise, the user will be redirected to a login/signup page. Alternatively, use the \"blob\" path ( blob/master/docs/ ) to open a read-only view, which supports anonymous access. default : edit/master/docs/ for GitHub and GitLab repos or src/default/docs/ for a Bitbucket repo, if repo_url matches those domains, otherwise null edit_uri_template \uf0c1 The more flexible variant of edit_uri . These two are equivalent: edit_uri: 'blob/main/docs/' edit_uri_template: 'blob/main/docs/{path}' (they are also mutually exclusive -- don't specify both). Starting from here, you can change the positioning or formatting of the path, in case the default behavior of appending the path isn't enough. The contents of edit_uri_template are normal Python format strings , with only these fields available: {path} , e.g. foo/bar.md {path_noext} , e.g. foo/bar And the conversion flag !q is available, to percent-encode the field: {path!q} , e.g. foo%2Fbar.md Suggested useful configurations: GitHub Wiki: (e.g. https://github.com/project/repo/wiki/foo/bar/_edit ) repo_url: 'https://github.com/project/repo/wiki' edit_uri_template: '{path_noext}/_edit' BitBucket editor: (e.g. https://bitbucket.org/project/repo/src/master/docs/foo/bar.md?mode=edit ) repo_url: 'https://bitbucket.org/project/repo/' edit_uri_template: 'src/master/docs/{path}?mode=edit' GitLab Static Site Editor: (e.g. https://gitlab.com/project/repo/-/sse/master/docs%2Ffoo%2bar.md ) repo_url: 'https://gitlab.com/project/repo' edit_uri_template: '-/sse/master/docs%2F{path!q}' GitLab Web IDE: (e.g. https://gitlab.com/-/ide/project/repo/edit/master/-/docs/foo/bar.md ) edit_uri_template: 'https://gitlab.com/-/ide/project/repo/edit/master/-/docs/{path}' default : null site_description \uf0c1 Set the site description. This will add a meta tag to the generated HTML header. default : null site_author \uf0c1 Set the name of the author. This will add a meta tag to the generated HTML header. default : null copyright \uf0c1 Set the copyright information to be included in the documentation by the theme. default : null remote_branch \uf0c1 Set the remote branch to commit to when using gh-deploy to deploy to GitHub Pages. This option can be overridden by a command line option in gh-deploy . default : gh-pages remote_name \uf0c1 Set the remote name to push to when using gh-deploy to deploy to GitHub Pages. This option can be overridden by a command line option in gh-deploy . default : origin Documentation layout \uf0c1 nav \uf0c1 This setting is used to determine the format and layout of the global navigation for the site. A minimal navigation configuration could look like this: nav: - 'index.md' - 'about.md' All paths in the navigation configuration must be relative to the docs_dir configuration option. See the section on configuring pages and navigation for a more detailed breakdown, including how to create sub-sections. Navigation items may also include links to external sites. While titles are optional for internal links, they are required for external links. An external link may be a full URL or a relative URL. Any path which is not found in the files is assumed to be an external link. See the section about Meta-Data on how MkDocs determines the page title of a document. nav: - Introduction: 'index.md' - 'about.md' - 'Issue Tracker': 'https://example.com/' In the above example, the first two items point to local files while the third points to an external site. However, sometimes the MkDocs site is hosted in a subdirectory of a project's site and you may want to link to other parts of the same site without including the full domain. In that case, you may use an appropriate relative URL. site_url: https://example.com/foo/ nav: - Home: '../' - 'User Guide': 'user-guide.md' - 'Bug Tracker': '/bugs/' In the above example, two different styles of external links are used. First, note that the site_url indicates that the MkDocs site is hosted in the /foo/ subdirectory of the domain. Therefore, the Home navigation item is a relative link that steps up one level to the server root and effectively points to https://example.com/ . The Bug Tracker item uses an absolute path from the server root and effectively points to https://example.com/bugs/ . Of course, the User Guide points to a local MkDocs page. default : By default nav will contain an alphanumerically sorted, nested list of all the Markdown files found within the docs_dir and its sub-directories. Index files will always be listed first within a sub-section. exclude_docs \uf0c1 New in version 1.5 Changed in version 1.6: This config no longer applies the \"drafts\" functionality for mkdocs serve . If you have draft documents that you want available in \"serve\" and not \"build\", replace exclude_docs with the new draft_docs config option. This config defines patterns of files (under docs_dir ) to not be picked up into the built site. Example: exclude_docs: | # A file with this name anywhere. api-config.json # Top-level \"docs/requirements.txt\". /requirements.txt # Any file with this extension anywhere. *.py # But keep this particular file. !/foo/example.py This follows the .gitignore pattern format . The following defaults are always implicitly prepended - to exclude dot-files (and directories) as well as the top-level templates directory: exclude_docs: | .* /templates/ So, in order to really start this config fresh, you'd need to specify a negated version of these entries first. Otherwise you could for example opt only certain dot-files back into the site: exclude_docs: | # Don't exclude '.assets' although all other '.*' are excluded !.assets draft_docs \uf0c1 New in version 1.6 This config defines patterns of files (under docs_dir ) to be treated as a draft. Draft files are available during mkdocs serve and include a \"DRAFT\" mark but will not be included in the build. To prevent this effect and make \"serve\" behave the same as \"build\", you can run mkdocs serve --clean . Example: draft_docs: | # A \"drafts\" directory anywhere. drafts/ # A Markdown file ending in _unpublished.md anywhere. *_unpublished.md # But keep this particular file. !/foo_unpublished.md This follows the .gitignore pattern format . not_in_nav \uf0c1 New in version 1.5 New in version 1.6: If the nav config is not specified at all, pages specified in this config will now be excluded from the inferred navigation. If you want to include some docs into the site but intentionally exclude them from the nav, normally MkDocs warns about this. Adding such patterns of files (relative to docs_dir ) into the not_in_nav config will prevent such warnings. Example: nav: - Foo: foo.md - Bar: bar.md not_in_nav: | /private.md As the previous option, this follows the .gitignore pattern format. Note Adding a given file to exclude_docs takes precedence over and implies not_in_nav . validation \uf0c1 New in version 1.5 Configure the strictness of MkDocs' diagnostic messages when validating links to documents. This is a tree of configs, and for each one the value can be one of the three: warn , info , ignore . Which cause a logging message of the corresponding severity to be produced. The warn level is, of course, intended for use with mkdocs build --strict (where it becomes an error), which you can employ in continuous testing. The config validation.links.absolute_links additionally has a special value relative_to_docs , for validation of absolute links . Defaults of this config as of MkDocs 1.6: validation: nav: omitted_files: info not_found: warn absolute_links: info links: not_found: warn anchors: info absolute_links: info unrecognized_links: info (Note: you shouldn't copy this whole example, because it only duplicates the defaults. Only individual items that differ should be set.) The defaults of some of the behaviors already differ from MkDocs 1.4 and below - they were ignored before. Configure MkDocs 1.6 to behave like MkDocs 1.4 and below (reduce strictness): validation: absolute_links: ignore unrecognized_links: ignore anchors: ignore Recommended settings for most sites (maximal strictness): validation: omitted_files: warn absolute_links: warn # Or 'relative_to_docs' - new in MkDocs 1.6 unrecognized_links: warn anchors: warn # New in MkDocs 1.6 Note how in the above examples we omitted the 'nav' and 'links' keys. Here absolute_links: means setting both nav: absolute_links: and links: absolute_links: . Full list of values and examples of log messages that they can hide or make more prominent: validation.nav.omitted_files The following pages exist in the docs directory, but are not included in the \"nav\" configuration: ... validation.nav.not_found A reference to 'foo/bar.md' is included in the 'nav' configuration, which is not found in the documentation files. A reference to 'foo/bar.md' is included in the 'nav' configuration, but this file is excluded from the built site. validation.nav.absolute_links An absolute path to '/foo/bar.html' is included in the 'nav' configuration, which presumably points to an external resource. validation.links.not_found Doc file 'example.md' contains a link '../foo/bar.md', but the target is not found among documentation files. Doc file 'example.md' contains a link to 'foo/bar.md' which is excluded from the built site. validation.links.anchors Doc file 'example.md' contains a link '../foo/bar.md#some-heading', but the doc 'foo/bar.md' does not contain an anchor '#some-heading'. Doc file 'example.md' contains a link '#some-heading', but there is no such anchor on this page. validation.links.absolute_links Doc file 'example.md' contains an absolute link '/foo/bar.html', it was left as is. Did you mean 'foo/bar.md'? validation.links.unrecognized_links Doc file 'example.md' contains an unrecognized relative link '../foo/bar/', it was left as is. Did you mean 'foo/bar.md'? Doc file 'example.md' contains an unrecognized relative link 'mail@example.com', it was left as is. Did you mean 'mailto:mail@example.com'? Validation of absolute links \uf0c1 New in version 1.6 Historically, within Markdown, MkDocs only recognized relative links that lead to another physical *.md document (or media file). This is a good convention to follow because then the source pages are also freely browsable without MkDocs, for example on GitHub. Whereas absolute links were left unmodified (making them often not work as expected) or, more recently, warned against. If you dislike having to always use relative links, now you can opt into absolute links and have them work correctly. If you set the setting validation.links.absolute_links to the new value relative_to_docs , all Markdown links starting with / will be understood as being relative to the docs_dir root. The links will then be validated for correctness according to all the other rules that were already working for relative links in prior versions of MkDocs. For the HTML output, these links will still be turned relative so that the site still works reliably. So, now any document (e.g. \"dir1/foo.md\") can link to the document \"dir2/bar.md\" as [link](/dir2/bar.md) , in addition to the previously only correct way [link](../dir2/bar.md) . You have to enable the setting, though. The default is still to just skip the link. Settings to recognize absolute links and validate them: validation: links: absolute_links: relative_to_docs anchors: warn unrecognized_links: warn Build directories \uf0c1 theme \uf0c1 Sets the theme and theme specific configuration of your documentation site. May be either a string or a set of key/value pairs. If a string, it must be the string name of a known installed theme. For a list of available themes visit Choosing Your Theme . An example set of key/value pairs might look something like this: theme: name: mkdocs locale: en custom_dir: my_theme_customizations/ static_templates: - sitemap.html include_sidebar: false If a set of key/value pairs, the following nested keys can be defined: Block name \uf0c1 The string name of a known installed theme. For a list of available themes visit Choosing Your Theme . locale \uf0c1 A code representing the language of your site. See Localizing your theme for details. custom_dir \uf0c1 A directory containing a custom theme. This can either be a relative directory, in which case it is resolved relative to the directory containing your configuration file or it can be an absolute directory path from the root of your local file system. See Customizing Your Theme for details if you would like to tweak an existing theme. See the Theme Developer Guide if you would like to build your own theme from the ground up. static_templates \uf0c1 A list of templates to render as static pages. The templates must be located in either the theme's template directory or in the custom_dir defined in the theme configuration. (theme specific keywords) \uf0c1 Any additional keywords supported by the theme can also be defined. See the documentation for the theme you are using for details. default : 'mkdocs' docs_dir \uf0c1 The directory containing the documentation source markdown files. This can either be a relative directory, in which case it is resolved relative to the directory containing your configuration file, or it can be an absolute directory path from the root of your local file system. default : 'docs' site_dir \uf0c1 The directory where the output HTML and other files are created. This can either be a relative directory, in which case it is resolved relative to the directory containing your configuration file, or it can be an absolute directory path from the root of your local file system. default : 'site' Note If you are using source code control you will normally want to ensure that your build output files are not committed into the repository, and only keep the source files under version control. For example, if using git you might add the following line to your .gitignore file: site/ If you're using another source code control tool, you'll want to check its documentation on how to ignore specific directories. extra_css \uf0c1 Set a list of CSS files (relative to docs_dir ) to be included by the theme, typically as <link> tags. Example: extra_css: - css/extra.css - css/second_extra.css default : [] (an empty list). extra_javascript \uf0c1 Set a list of JavaScript files in your docs_dir to be included by the theme, as <script> tags. Changed in version 1.5: Older versions of MkDocs supported only a plain list of strings, but now several additional config keys are available: type , async , defer . See the examples and what they produce: extra_javascript: - some_plain_javascript.js # <script src=\"some_plain_javascript.js\"></script> # New behavior in MkDocs 1.5: - implicitly_as_module.mjs # <script src=\"implicitly_as_module.mjs\" type=\"module\"></script> # Config keys only supported since MkDocs 1.5: - path: explicitly_as_module.mjs # <script src=\"explicitly_as_module.mjs\" type=\"module\"></script> type: module - path: deferred_plain.js # <script src=\"deferred_plain.js\" defer></script> defer: true - path: scripts/async_module.mjs # <script src=\"scripts/async_module.mjs\" type=\"module\" async></script> type: module async: true So, each item can be either: a plain string, or a mapping that has the required path key and 3 optional keys type (string), async (boolean), defer (boolean). Only the plain string variant detects the .mjs extension and adds type=\"module\" , otherwise type: module must be written out regardless of extension. default : [] (an empty list). Note *.js and *.css files, just like any other type of file, are always copied from docs_dir into the site's deployed copy, regardless if they're linked to the pages via the above configs or not. extra_templates \uf0c1 Set a list of templates in your docs_dir to be built by MkDocs. To see more about writing templates for MkDocs read the documentation about custom themes and specifically the section about the available variables to templates. See the example in extra_css for usage. default : [] (an empty list). extra \uf0c1 A set of key-value pairs, where the values can be any valid YAML construct, that will be passed to the template. This allows for great flexibility when creating custom themes. For example, if you are using a theme that supports displaying the project version, you can pass it to the theme like this: extra: version: 1.0 default : By default extra will be an empty key-value mapping. Preview controls \uf0c1 Live Reloading \uf0c1 watch \uf0c1 Determines additional directories to watch when running mkdocs serve . Configuration is a YAML list. watch: - directory_a - directory_b Allows a custom default to be set without the need to pass it through the -w / --watch option every time the mkdocs serve command is called. Note The paths provided via the configuration file are relative to the configuration file. The paths provided via the -w / --watch CLI parameters are not. use_directory_urls \uf0c1 This setting controls the directory structure of the generated documentation, and thereby the URL format used for linking to pages. The following tables demonstrate how the directory structure and URLs used on the site differ when setting use_directory_urls to true or false . use_directory_urls: false This setting is needed when the documentation is hosted on systems that can't access the file X/index.html when given the URL X . When set to false , no additional X directory is created, and the file is simply stored as X.html . Links are created that point directly to the target file rather than a target directory . Source file Generated File URL Format index.md index.html /index.html api-guide.md api-guide.html /api-guide.html about/license.md about/license.html /about/license.html For example, this needs to be set to false when: opening pages directly from the file system publishing the documentation to a static S3 website. use_directory_urls: true The default style of use_directory_urls: true creates more user friendly URLs, and is usually what you'll want to use. Source file Generated File URL Format index.md /index.html / api-guide.md /api-guide/index.html /api-guide/ about/license.md /about/license/index.html /about/license default : true strict \uf0c1 Determines how warnings are handled. Set to true to halt processing when a warning is raised. Set to false to print a warning and continue processing. This is also available as a command line flag: --strict . default : false dev_addr \uf0c1 Determines the address used when running mkdocs serve . Must be of the format IP:PORT . Allows a custom default to be set without the need to pass it through the --dev-addr option every time the mkdocs serve command is called. default : '127.0.0.1:8000' See also: site_url . Formatting options \uf0c1 markdown_extensions \uf0c1 MkDocs uses the Python Markdown library to translate Markdown files into HTML. Python Markdown supports a variety of extensions that customize how pages are formatted. This setting lets you enable a list of extensions beyond the ones that MkDocs uses by default ( meta , toc , tables , and fenced_code ). For example, to enable the SmartyPants typography extension , use: markdown_extensions: - smarty Some extensions provide configuration options of their own. If you would like to set any configuration options, then you can nest a key/value mapping ( option_name: option value ) of any options that a given extension supports. See the documentation for the extension you are using to determine what options they support. For example, to enable permalinks in the (included) toc extension, use: markdown_extensions: - toc: permalink: true Note that a colon ( : ) must follow the extension name ( toc ) and then on a new line the option name and value must be indented and separated by a colon. If you would like to define multiple options for a single extension, each option must be defined on a separate line: markdown_extensions: - toc: permalink: true separator: \"_\" Add an additional item to the list for each extension. If you have no configuration options to set for a specific extension, then simply omit options for that extension: markdown_extensions: - smarty - toc: permalink: true - sane_lists Dynamic config values To dynamically configure the extensions, you can get the config values from environment variables or obtain paths of the currently rendered Markdown file or the overall MkDocs site. In the above examples, each extension is a list item (starts with a - ). As an alternative, key/value pairs can be used instead. However, in that case an empty value must be provided for extensions for which no options are defined. Therefore, the last example above could also be defined as follows: markdown_extensions: smarty: {} toc: permalink: true sane_lists: {} This alternative syntax is required if you intend to override some options via inheritance . More extensions The Python-Markdown documentation provides a list of extensions which are available out-of-the-box. For a list of configuration options available for a given extension, see the documentation for that extension. You may also install and use various third party extensions ( Python-Markdown wiki , MkDocs project catalog ). Consult the documentation provided by those extensions for installation instructions and available configuration options. default : [] (an empty list). hooks \uf0c1 New in version 1.4 A list of paths to Python scripts (relative to mkdocs.yml ) that are loaded and used as plugin instances. For example: hooks: - my_hooks.py Then the file my_hooks.py can contain any plugin event handlers (without self ), e.g.: def on_page_markdown(markdown, **kwargs): return markdown.replace('a', 'z') Advanced example: This produces warnings based on the Markdown content (and warnings are fatal in strict mode): import logging, re import mkdocs.plugins log = logging.getLogger('mkdocs') @mkdocs.plugins.event_priority(-50) def on_page_markdown(markdown, page, **kwargs): path = page.file.src_uri for m in re.finditer(r'\\bhttp://[^) ]+', markdown): log.warning(f\"Documentation file '{path}' contains a non-HTTPS link: {m[0]}\") This does not enable any new abilities compared to plugins , it only simplifies one-off usages, as these don't need to be installed like plugins do. Note that for mkdocs serve the hook module will not be reloaded on each build. You might have seen this feature in the mkdocs-simple-hooks plugin . If using standard method names, it can be directly replaced, e.g.: -plugins: - - mkdocs-simple-hooks: - hooks: - on_page_markdown: 'my_hooks:on_page_markdown' +hooks: + - my_hooks.py New in MkDocs 1.6 If a hook file has a file foo.py adjacent to it, it can use the normal Python syntax import foo to access its functions. In older versions of MkDocs, a workaround was necessary to make this work - adding the path to sys.path . plugins \uf0c1 A list of plugins (with optional configuration settings) to use when building the site. See the Plugins documentation for full details. default : ['search'] (the \"search\" plugin included with MkDocs). If the plugins config setting is defined in the mkdocs.yml config file, then any defaults (such as search ) are ignored and you need to explicitly re-enable the defaults if you would like to continue using them: plugins: - search - your_other_plugin To define options for a given plugin, use a nested set of key/value pairs: plugins: - search - your_other_plugin: option1: value option2: other value To completely disable all plugins, including any defaults, set the plugins setting to an empty list: plugins: [] enabled option \uf0c1 New in MkDocs 1.6 Each plugin has its own options keys. However MkDocs also ensures that each plugin has the enabled boolean option. This can be used to conditionally enable a particular plugin, as in the following example: plugins: - search - code-validator: enabled: !ENV [LINT, false] See: Environment variables Alternate syntax \uf0c1 In the above examples, each plugin is a list item (starts with a - ). As an alternative, key/value pairs can be used instead. However, in that case an empty value must be provided for plugins for which no options are defined. Therefore, the last example above could also be defined as follows: plugins: search: {} your_other_plugin: option1: value option2: other value This alternative syntax is required if you intend to override some options via inheritance . Search \uf0c1 A search plugin is provided by default with MkDocs which uses lunr.js as a search engine. The following config options are available to alter the behavior of the search plugin: separator \uf0c1 A regular expression which matches the characters used as word separators when building the index. By default whitespace and the hyphen ( - ) are used. To add the dot ( . ) as a word separator you might do this: plugins: - search: separator: '[\\s\\-\\.]+' default : '[\\s\\-]+' min_search_length \uf0c1 An integer value that defines the minimum length for a search query. By default searches shorter than 3 chars in length are ignored as search result quality with short search terms are poor. However, for some use cases (such as documentation about Message Queues which might generate searches for 'MQ') it may be preferable to set a shorter limit. plugins: - search: min_search_length: 2 default : 3 lang \uf0c1 A list of languages to use when building the search index as identified by their ISO 639-1 language codes. With Lunr Languages , the following languages are supported: ar : Arabic da : Danish nl : Dutch en : English fi : Finnish fr : French de : German hu : Hungarian it : Italian ja : Japanese no : Norwegian pt : Portuguese ro : Romanian ru : Russian es : Spanish sv : Swedish th : Thai tr : Turkish vi : Vietnamese You may contribute additional languages . Warning While search does support using multiple languages together, it is best not to add additional languages unless you really need them. Each additional language adds significant bandwidth requirements and uses more browser resources. Generally, it is best to keep each instance of MkDocs to a single language. Note Lunr Languages does not currently include support for Chinese or other Asian languages. However, some users have reported decent results using Japanese. default : The value of theme.locale if set, otherwise [en] . prebuild_index \uf0c1 Optionally generates a pre-built index of all pages, which provides some performance improvements for larger sites. Before enabling, confirm that the theme you are using explicitly supports using a prebuilt index (the builtin themes do). Set to true to enable. Warning This option requires that Node.js be installed and the command node be on the system path. If the call to node fails for any reason, a warning is issued and the build continues uninterrupted. You may use the --strict flag when building to cause such a failure to raise an error instead. Note On smaller sites, using a pre-built index is not recommended as it creates a significant increase is bandwidth requirements with little to no noticeable improvement to your users. However, for larger sites (hundreds of pages), the bandwidth increase is relatively small and your users will notice a significant improvement in search performance. default : False indexing \uf0c1 Configures what strategy the search indexer will use when building the index for your pages. This property is particularly useful if your project is large in scale, and the index takes up an enormous amount of disk space. plugins: - search: indexing: 'full' Options \uf0c1 Option Description full Indexes the title, section headings, and full text of each page. sections Indexes the title and section headings of each page. titles Indexes only the title of each page. default : full Special YAML tags \uf0c1 Environment variables \uf0c1 In most cases, the value of a configuration option is set directly in the configuration file. However, as an option, the value of a configuration option may be set to the value of an environment variable using the !ENV tag. For example, to set the value of the site_name option to the value of the variable SITE_NAME the YAML file may contain the following: site_name: !ENV SITE_NAME If the environment variable is not defined, then the configuration setting would be assigned a null (or None in Python) value. A default value can be defined as the last value in a list. Like this: site_name: !ENV [SITE_NAME, 'My default site name'] Multiple fallback variables can be used as well. Note that the last value is not an environment variable, but must be a value to use as a default if none of the specified environment variables are defined. site_name: !ENV [SITE_NAME, OTHER_NAME, 'My default site name'] Simple types defined within an environment variable such as string, bool, integer, float, datestamp and null are parsed as if they were defined directly in the YAML file, which means that the value will be converted to the appropriate type. However, complex types such as lists and key/value pairs cannot be defined within a single environment variable. For more details, see the pyyaml_env_tag project. Paths relative to the current file or site \uf0c1 New in version 1.5 Some Markdown extensions can benefit from knowing the path of the Markdown file that's currently being processed, or just the root path of the current site. For that, the special tag !relative can be used in most contexts within the config file, though the only known usecases are within markdown_extensions . Examples of the possible values are: - !relative # Relative to the directory of the current Markdown file - !relative $docs_dir # Path of the docs_dir - !relative $config_dir # Path of the directory that contains the main mkdocs.yml - !relative $config_dir/some/child/dir # Some subdirectory of the root config directory (Here, $docs_dir and $config_dir are currently the only special prefixes that are recognized.) Example: markdown_extensions: - pymdownx.snippets: base_path: !relative # Relative to the current Markdown file This allows the pymdownx.snippets extension to include files relative to the current Markdown file, which without this tag it would have no way of knowing. Note Even for the default case, any extension's base path is technically the current working directory although the assumption is that it's the directory of mkdocs.yml . So even if you don't want the paths to be relative, to improve the default behavior, always prefer to use this idiom: markdown_extensions: - pymdownx.snippets: base_path: !relative $config_dir # Relative to the root directory with mkdocs.yml Configuration Inheritance \uf0c1 Generally, a single file would hold the entire configuration for a site. However, some organizations may maintain multiple sites which all share a common configuration across them. Rather than maintaining separate configurations for each, the common configuration options can be defined in a parent configuration file which each site's primary configuration file inherits. To define the parent for a configuration file, set the INHERIT (all caps) key to the path of the parent file. The path must be relative to the location of the primary file. For configuration options to be merged with a parent configuration, those options must be defined as key/value pairs. Specifically, the markdown_extensions and plugins options must use the alternative syntax which does not use list items (lines which start with - ). For example, suppose the common (parent) configuration is defined in base.yml : theme: name: mkdocs locale: en highlightjs: true markdown_extensions: toc: permalink: true admonition: {} Then, for the \"foo\" site, the primary configuration file would be defined at foo/mkdocs.yml : INHERIT: ../base.yml site_name: Foo Project site_url: https://example.com/foo When running mkdocs build , the file at foo/mkdocs.yml would be passed in as the configuration file. MkDocs will then parse that file, retrieve and parse the parent file base.yml and deep merge the two. This would result in MkDocs receiving the following merged configuration: site_name: Foo Project site_url: https://example.com/foo theme: name: mkdocs locale: en highlightjs: true markdown_extensions: toc: permalink: true admonition: {} Deep merging allows you to add and/or override various values in your primary configuration file. For example, suppose for one site you wanted to add support for definition lists, use a different symbol for permalinks, and define a different separator. In that site's primary configuration file you could do: INHERIT: ../base.yml site_name: Bar Project site_url: https://example.com/bar markdown_extensions: def_list: {} toc: permalink: \uf0c1 separator: \"_\" In that case, the above configuration would be deep merged with base.yml and result in the following configuration: site_name: Bar Project site_url: https://example.com/bar theme: name: mkdocs locale: en highlightjs: true markdown_extensions: def_list: {} toc: permalink: \uf0c1 separator: \"_\" admonition: {} Notice that the admonition extension was retained from the parent configuration, the def_list extension was added, the value of toc.permalink was replaced, and the value of toc.separator was added. You can replace or merge the value of any key. However, any non-key is always replaced. Therefore, you cannot append items to a list. You must redefine the entire list. As the nav configuration is made up of nested lists, this means that you cannot merge navigation items. Of course, you can replace the entire nav configuration with a new one. However, it is generally expected that the entire navigation would be defined in the primary configuration file for a project. Warning As a reminder, all path based configuration options must be relative to the primary configuration file and MkDocs does not alter the paths when merging. Therefore, defining paths in a parent file which is inherited by multiple different sites may not work as expected. It is generally best to define path based options in the primary configuration file only. The inheritance can also be used as a quick way to override keys on the command line - by using stdin as the config file. For example: echo '{INHERIT: mkdocs.yml, site_name: \"Renamed site\"}' | mkdocs build -f -","title":"Configuration"},{"location":"user-guide/configuration/#configuration","text":"Guide to all available configuration settings.","title":"Configuration"},{"location":"user-guide/configuration/#introduction","text":"Project settings are configured by default using a YAML configuration file in the project directory named mkdocs.yml . You can specify another path for it by using the -f / --config-file option (see mkdocs build --help ). At a minimum, this configuration file must contain the site_name . All other settings are optional.","title":"Introduction"},{"location":"user-guide/configuration/#project-information","text":"","title":"Project information"},{"location":"user-guide/configuration/#site_name","text":"This is a required setting , and should be a string that is used as the main title for the project documentation. For example: site_name: Marshmallow Generator When rendering the theme this setting will be passed as the site_name context variable.","title":"site_name"},{"location":"user-guide/configuration/#site_url","text":"Set the canonical URL of the site. This will add a link tag with the canonical URL to the head section of each HTML page. If the 'root' of the MkDocs site will be within a subdirectory of a domain, be sure to include that subdirectory in the setting ( https://example.com/foo/ ). This setting is also used for mkdocs serve : the server will be mounted onto a path taken from the path component of the URL, e.g. some/page.md will be served from http://127.0.0.1:8000/foo/some/page/ to mimic the expected remote layout. default : null","title":"site_url"},{"location":"user-guide/configuration/#repo_url","text":"When set, provides a link to your repository (GitHub, Bitbucket, GitLab, ...) on each page. repo_url: https://github.com/example/repository/ default : null","title":"repo_url"},{"location":"user-guide/configuration/#repo_name","text":"When set, provides the name for the link to your repository on each page. default : 'GitHub' , 'Bitbucket' or 'GitLab' if the repo_url matches those domains, otherwise the hostname from the repo_url .","title":"repo_name"},{"location":"user-guide/configuration/#edit_uri","text":"The path from the base repo_url to the docs directory when directly viewing a page, accounting for specifics of the repository host (e.g. GitHub, Bitbucket, etc), the branch, and the docs directory itself. MkDocs concatenates repo_url and edit_uri , and appends the input path of the page. When set, and if your theme supports it, provides a link directly to the page in your source repository. This makes it easier to find and edit the source for the page. If repo_url is not set, this option is ignored. On some themes, setting this option may cause an edit link to be used in place of a repository link. Other themes may show both links. The edit_uri supports query ('?') and fragment ('#') characters. For repository hosts that use a query or a fragment to access the files, the edit_uri might be set as follows. (Note the ? and # in the URI...) # Query string example edit_uri: '?query=root/path/docs/' # Hash fragment example edit_uri: '#root/path/docs/' For other repository hosts, simply specify the relative path to the docs directory. # Query string example edit_uri: root/path/docs/ For example, having this config: repo_url: https://example.com/project/repo edit_uri: blob/main/docs/ means that a page named 'foo/bar.md' will have its edit link lead to: https://example.com/project/repo/blob/main/docs/foo/bar.md edit_uri can actually be just an absolute URL, not necessarily relative to repo_url , so this can achieve the same result: edit_uri: https://example.com/project/repo/blob/main/docs/ For more flexibility, see edit_uri_template below. Note On a few known hosts (specifically GitHub, Bitbucket and GitLab), the edit_uri is derived from the 'repo_url' and does not need to be set manually. Simply defining a repo_url will automatically populate the edit_uri configs setting. For example, for a GitHub- or GitLab-hosted repository, the edit_uri would be automatically set as edit/master/docs/ (Note the edit path and master branch). For a Bitbucket-hosted repository, the equivalent edit_uri would be automatically set as src/default/docs/ (note the src path and default branch). To use a different URI than the default (for example a different branch), simply set the edit_uri to your desired string. If you do not want any \"edit URL link\" displayed on your pages, then set edit_uri to an empty string to disable the automatic setting. Warning On GitHub and GitLab, the default \"edit\" path ( edit/master/docs/ ) opens the page in the online editor. This functionality requires that the user have and be logged in to a GitHub/GitLab account. Otherwise, the user will be redirected to a login/signup page. Alternatively, use the \"blob\" path ( blob/master/docs/ ) to open a read-only view, which supports anonymous access. default : edit/master/docs/ for GitHub and GitLab repos or src/default/docs/ for a Bitbucket repo, if repo_url matches those domains, otherwise null","title":"edit_uri"},{"location":"user-guide/configuration/#edit_uri_template","text":"The more flexible variant of edit_uri . These two are equivalent: edit_uri: 'blob/main/docs/' edit_uri_template: 'blob/main/docs/{path}' (they are also mutually exclusive -- don't specify both). Starting from here, you can change the positioning or formatting of the path, in case the default behavior of appending the path isn't enough. The contents of edit_uri_template are normal Python format strings , with only these fields available: {path} , e.g. foo/bar.md {path_noext} , e.g. foo/bar And the conversion flag !q is available, to percent-encode the field: {path!q} , e.g. foo%2Fbar.md Suggested useful configurations: GitHub Wiki: (e.g. https://github.com/project/repo/wiki/foo/bar/_edit ) repo_url: 'https://github.com/project/repo/wiki' edit_uri_template: '{path_noext}/_edit' BitBucket editor: (e.g. https://bitbucket.org/project/repo/src/master/docs/foo/bar.md?mode=edit ) repo_url: 'https://bitbucket.org/project/repo/' edit_uri_template: 'src/master/docs/{path}?mode=edit' GitLab Static Site Editor: (e.g. https://gitlab.com/project/repo/-/sse/master/docs%2Ffoo%2bar.md ) repo_url: 'https://gitlab.com/project/repo' edit_uri_template: '-/sse/master/docs%2F{path!q}' GitLab Web IDE: (e.g. https://gitlab.com/-/ide/project/repo/edit/master/-/docs/foo/bar.md ) edit_uri_template: 'https://gitlab.com/-/ide/project/repo/edit/master/-/docs/{path}' default : null","title":"edit_uri_template"},{"location":"user-guide/configuration/#site_description","text":"Set the site description. This will add a meta tag to the generated HTML header. default : null","title":"site_description"},{"location":"user-guide/configuration/#site_author","text":"Set the name of the author. This will add a meta tag to the generated HTML header. default : null","title":"site_author"},{"location":"user-guide/configuration/#copyright","text":"Set the copyright information to be included in the documentation by the theme. default : null","title":"copyright"},{"location":"user-guide/configuration/#remote_branch","text":"Set the remote branch to commit to when using gh-deploy to deploy to GitHub Pages. This option can be overridden by a command line option in gh-deploy . default : gh-pages","title":"remote_branch"},{"location":"user-guide/configuration/#remote_name","text":"Set the remote name to push to when using gh-deploy to deploy to GitHub Pages. This option can be overridden by a command line option in gh-deploy . default : origin","title":"remote_name"},{"location":"user-guide/configuration/#documentation-layout","text":"","title":"Documentation layout"},{"location":"user-guide/configuration/#nav","text":"This setting is used to determine the format and layout of the global navigation for the site. A minimal navigation configuration could look like this: nav: - 'index.md' - 'about.md' All paths in the navigation configuration must be relative to the docs_dir configuration option. See the section on configuring pages and navigation for a more detailed breakdown, including how to create sub-sections. Navigation items may also include links to external sites. While titles are optional for internal links, they are required for external links. An external link may be a full URL or a relative URL. Any path which is not found in the files is assumed to be an external link. See the section about Meta-Data on how MkDocs determines the page title of a document. nav: - Introduction: 'index.md' - 'about.md' - 'Issue Tracker': 'https://example.com/' In the above example, the first two items point to local files while the third points to an external site. However, sometimes the MkDocs site is hosted in a subdirectory of a project's site and you may want to link to other parts of the same site without including the full domain. In that case, you may use an appropriate relative URL. site_url: https://example.com/foo/ nav: - Home: '../' - 'User Guide': 'user-guide.md' - 'Bug Tracker': '/bugs/' In the above example, two different styles of external links are used. First, note that the site_url indicates that the MkDocs site is hosted in the /foo/ subdirectory of the domain. Therefore, the Home navigation item is a relative link that steps up one level to the server root and effectively points to https://example.com/ . The Bug Tracker item uses an absolute path from the server root and effectively points to https://example.com/bugs/ . Of course, the User Guide points to a local MkDocs page. default : By default nav will contain an alphanumerically sorted, nested list of all the Markdown files found within the docs_dir and its sub-directories. Index files will always be listed first within a sub-section.","title":"nav"},{"location":"user-guide/configuration/#exclude_docs","text":"New in version 1.5 Changed in version 1.6: This config no longer applies the \"drafts\" functionality for mkdocs serve . If you have draft documents that you want available in \"serve\" and not \"build\", replace exclude_docs with the new draft_docs config option. This config defines patterns of files (under docs_dir ) to not be picked up into the built site. Example: exclude_docs: | # A file with this name anywhere. api-config.json # Top-level \"docs/requirements.txt\". /requirements.txt # Any file with this extension anywhere. *.py # But keep this particular file. !/foo/example.py This follows the .gitignore pattern format . The following defaults are always implicitly prepended - to exclude dot-files (and directories) as well as the top-level templates directory: exclude_docs: | .* /templates/ So, in order to really start this config fresh, you'd need to specify a negated version of these entries first. Otherwise you could for example opt only certain dot-files back into the site: exclude_docs: | # Don't exclude '.assets' although all other '.*' are excluded !.assets","title":"exclude_docs"},{"location":"user-guide/configuration/#draft_docs","text":"New in version 1.6 This config defines patterns of files (under docs_dir ) to be treated as a draft. Draft files are available during mkdocs serve and include a \"DRAFT\" mark but will not be included in the build. To prevent this effect and make \"serve\" behave the same as \"build\", you can run mkdocs serve --clean . Example: draft_docs: | # A \"drafts\" directory anywhere. drafts/ # A Markdown file ending in _unpublished.md anywhere. *_unpublished.md # But keep this particular file. !/foo_unpublished.md This follows the .gitignore pattern format .","title":"draft_docs"},{"location":"user-guide/configuration/#not_in_nav","text":"New in version 1.5 New in version 1.6: If the nav config is not specified at all, pages specified in this config will now be excluded from the inferred navigation. If you want to include some docs into the site but intentionally exclude them from the nav, normally MkDocs warns about this. Adding such patterns of files (relative to docs_dir ) into the not_in_nav config will prevent such warnings. Example: nav: - Foo: foo.md - Bar: bar.md not_in_nav: | /private.md As the previous option, this follows the .gitignore pattern format. Note Adding a given file to exclude_docs takes precedence over and implies not_in_nav .","title":"not_in_nav"},{"location":"user-guide/configuration/#validation","text":"New in version 1.5 Configure the strictness of MkDocs' diagnostic messages when validating links to documents. This is a tree of configs, and for each one the value can be one of the three: warn , info , ignore . Which cause a logging message of the corresponding severity to be produced. The warn level is, of course, intended for use with mkdocs build --strict (where it becomes an error), which you can employ in continuous testing. The config validation.links.absolute_links additionally has a special value relative_to_docs , for validation of absolute links . Defaults of this config as of MkDocs 1.6: validation: nav: omitted_files: info not_found: warn absolute_links: info links: not_found: warn anchors: info absolute_links: info unrecognized_links: info (Note: you shouldn't copy this whole example, because it only duplicates the defaults. Only individual items that differ should be set.) The defaults of some of the behaviors already differ from MkDocs 1.4 and below - they were ignored before. Configure MkDocs 1.6 to behave like MkDocs 1.4 and below (reduce strictness): validation: absolute_links: ignore unrecognized_links: ignore anchors: ignore Recommended settings for most sites (maximal strictness): validation: omitted_files: warn absolute_links: warn # Or 'relative_to_docs' - new in MkDocs 1.6 unrecognized_links: warn anchors: warn # New in MkDocs 1.6 Note how in the above examples we omitted the 'nav' and 'links' keys. Here absolute_links: means setting both nav: absolute_links: and links: absolute_links: . Full list of values and examples of log messages that they can hide or make more prominent: validation.nav.omitted_files The following pages exist in the docs directory, but are not included in the \"nav\" configuration: ... validation.nav.not_found A reference to 'foo/bar.md' is included in the 'nav' configuration, which is not found in the documentation files. A reference to 'foo/bar.md' is included in the 'nav' configuration, but this file is excluded from the built site. validation.nav.absolute_links An absolute path to '/foo/bar.html' is included in the 'nav' configuration, which presumably points to an external resource. validation.links.not_found Doc file 'example.md' contains a link '../foo/bar.md', but the target is not found among documentation files. Doc file 'example.md' contains a link to 'foo/bar.md' which is excluded from the built site. validation.links.anchors Doc file 'example.md' contains a link '../foo/bar.md#some-heading', but the doc 'foo/bar.md' does not contain an anchor '#some-heading'. Doc file 'example.md' contains a link '#some-heading', but there is no such anchor on this page. validation.links.absolute_links Doc file 'example.md' contains an absolute link '/foo/bar.html', it was left as is. Did you mean 'foo/bar.md'? validation.links.unrecognized_links Doc file 'example.md' contains an unrecognized relative link '../foo/bar/', it was left as is. Did you mean 'foo/bar.md'? Doc file 'example.md' contains an unrecognized relative link 'mail@example.com', it was left as is. Did you mean 'mailto:mail@example.com'?","title":"validation"},{"location":"user-guide/configuration/#validation-of-absolute-links","text":"New in version 1.6 Historically, within Markdown, MkDocs only recognized relative links that lead to another physical *.md document (or media file). This is a good convention to follow because then the source pages are also freely browsable without MkDocs, for example on GitHub. Whereas absolute links were left unmodified (making them often not work as expected) or, more recently, warned against. If you dislike having to always use relative links, now you can opt into absolute links and have them work correctly. If you set the setting validation.links.absolute_links to the new value relative_to_docs , all Markdown links starting with / will be understood as being relative to the docs_dir root. The links will then be validated for correctness according to all the other rules that were already working for relative links in prior versions of MkDocs. For the HTML output, these links will still be turned relative so that the site still works reliably. So, now any document (e.g. \"dir1/foo.md\") can link to the document \"dir2/bar.md\" as [link](/dir2/bar.md) , in addition to the previously only correct way [link](../dir2/bar.md) . You have to enable the setting, though. The default is still to just skip the link. Settings to recognize absolute links and validate them: validation: links: absolute_links: relative_to_docs anchors: warn unrecognized_links: warn","title":"Validation of absolute links"},{"location":"user-guide/configuration/#build-directories","text":"","title":"Build directories"},{"location":"user-guide/configuration/#theme","text":"Sets the theme and theme specific configuration of your documentation site. May be either a string or a set of key/value pairs. If a string, it must be the string name of a known installed theme. For a list of available themes visit Choosing Your Theme . An example set of key/value pairs might look something like this: theme: name: mkdocs locale: en custom_dir: my_theme_customizations/ static_templates: - sitemap.html include_sidebar: false If a set of key/value pairs, the following nested keys can be defined: Block","title":"theme"},{"location":"user-guide/configuration/#name","text":"The string name of a known installed theme. For a list of available themes visit Choosing Your Theme .","title":"name"},{"location":"user-guide/configuration/#locale","text":"A code representing the language of your site. See Localizing your theme for details.","title":"locale"},{"location":"user-guide/configuration/#custom_dir","text":"A directory containing a custom theme. This can either be a relative directory, in which case it is resolved relative to the directory containing your configuration file or it can be an absolute directory path from the root of your local file system. See Customizing Your Theme for details if you would like to tweak an existing theme. See the Theme Developer Guide if you would like to build your own theme from the ground up.","title":"custom_dir"},{"location":"user-guide/configuration/#static_templates","text":"A list of templates to render as static pages. The templates must be located in either the theme's template directory or in the custom_dir defined in the theme configuration.","title":"static_templates"},{"location":"user-guide/configuration/#theme-specific-keywords","text":"Any additional keywords supported by the theme can also be defined. See the documentation for the theme you are using for details. default : 'mkdocs'","title":"(theme specific keywords)"},{"location":"user-guide/configuration/#docs_dir","text":"The directory containing the documentation source markdown files. This can either be a relative directory, in which case it is resolved relative to the directory containing your configuration file, or it can be an absolute directory path from the root of your local file system. default : 'docs'","title":"docs_dir"},{"location":"user-guide/configuration/#site_dir","text":"The directory where the output HTML and other files are created. This can either be a relative directory, in which case it is resolved relative to the directory containing your configuration file, or it can be an absolute directory path from the root of your local file system. default : 'site' Note If you are using source code control you will normally want to ensure that your build output files are not committed into the repository, and only keep the source files under version control. For example, if using git you might add the following line to your .gitignore file: site/ If you're using another source code control tool, you'll want to check its documentation on how to ignore specific directories.","title":"site_dir"},{"location":"user-guide/configuration/#extra_css","text":"Set a list of CSS files (relative to docs_dir ) to be included by the theme, typically as <link> tags. Example: extra_css: - css/extra.css - css/second_extra.css default : [] (an empty list).","title":"extra_css"},{"location":"user-guide/configuration/#extra_javascript","text":"Set a list of JavaScript files in your docs_dir to be included by the theme, as <script> tags. Changed in version 1.5: Older versions of MkDocs supported only a plain list of strings, but now several additional config keys are available: type , async , defer . See the examples and what they produce: extra_javascript: - some_plain_javascript.js # <script src=\"some_plain_javascript.js\"></script> # New behavior in MkDocs 1.5: - implicitly_as_module.mjs # <script src=\"implicitly_as_module.mjs\" type=\"module\"></script> # Config keys only supported since MkDocs 1.5: - path: explicitly_as_module.mjs # <script src=\"explicitly_as_module.mjs\" type=\"module\"></script> type: module - path: deferred_plain.js # <script src=\"deferred_plain.js\" defer></script> defer: true - path: scripts/async_module.mjs # <script src=\"scripts/async_module.mjs\" type=\"module\" async></script> type: module async: true So, each item can be either: a plain string, or a mapping that has the required path key and 3 optional keys type (string), async (boolean), defer (boolean). Only the plain string variant detects the .mjs extension and adds type=\"module\" , otherwise type: module must be written out regardless of extension. default : [] (an empty list). Note *.js and *.css files, just like any other type of file, are always copied from docs_dir into the site's deployed copy, regardless if they're linked to the pages via the above configs or not.","title":"extra_javascript"},{"location":"user-guide/configuration/#extra_templates","text":"Set a list of templates in your docs_dir to be built by MkDocs. To see more about writing templates for MkDocs read the documentation about custom themes and specifically the section about the available variables to templates. See the example in extra_css for usage. default : [] (an empty list).","title":"extra_templates"},{"location":"user-guide/configuration/#extra","text":"A set of key-value pairs, where the values can be any valid YAML construct, that will be passed to the template. This allows for great flexibility when creating custom themes. For example, if you are using a theme that supports displaying the project version, you can pass it to the theme like this: extra: version: 1.0 default : By default extra will be an empty key-value mapping.","title":"extra"},{"location":"user-guide/configuration/#preview-controls","text":"","title":"Preview controls"},{"location":"user-guide/configuration/#live-reloading","text":"","title":"Live Reloading"},{"location":"user-guide/configuration/#watch","text":"Determines additional directories to watch when running mkdocs serve . Configuration is a YAML list. watch: - directory_a - directory_b Allows a custom default to be set without the need to pass it through the -w / --watch option every time the mkdocs serve command is called. Note The paths provided via the configuration file are relative to the configuration file. The paths provided via the -w / --watch CLI parameters are not.","title":"watch"},{"location":"user-guide/configuration/#use_directory_urls","text":"This setting controls the directory structure of the generated documentation, and thereby the URL format used for linking to pages. The following tables demonstrate how the directory structure and URLs used on the site differ when setting use_directory_urls to true or false . use_directory_urls: false This setting is needed when the documentation is hosted on systems that can't access the file X/index.html when given the URL X . When set to false , no additional X directory is created, and the file is simply stored as X.html . Links are created that point directly to the target file rather than a target directory . Source file Generated File URL Format index.md index.html /index.html api-guide.md api-guide.html /api-guide.html about/license.md about/license.html /about/license.html For example, this needs to be set to false when: opening pages directly from the file system publishing the documentation to a static S3 website. use_directory_urls: true The default style of use_directory_urls: true creates more user friendly URLs, and is usually what you'll want to use. Source file Generated File URL Format index.md /index.html / api-guide.md /api-guide/index.html /api-guide/ about/license.md /about/license/index.html /about/license default : true","title":"use_directory_urls"},{"location":"user-guide/configuration/#strict","text":"Determines how warnings are handled. Set to true to halt processing when a warning is raised. Set to false to print a warning and continue processing. This is also available as a command line flag: --strict . default : false","title":"strict"},{"location":"user-guide/configuration/#dev_addr","text":"Determines the address used when running mkdocs serve . Must be of the format IP:PORT . Allows a custom default to be set without the need to pass it through the --dev-addr option every time the mkdocs serve command is called. default : '127.0.0.1:8000' See also: site_url .","title":"dev_addr"},{"location":"user-guide/configuration/#formatting-options","text":"","title":"Formatting options"},{"location":"user-guide/configuration/#markdown_extensions","text":"MkDocs uses the Python Markdown library to translate Markdown files into HTML. Python Markdown supports a variety of extensions that customize how pages are formatted. This setting lets you enable a list of extensions beyond the ones that MkDocs uses by default ( meta , toc , tables , and fenced_code ). For example, to enable the SmartyPants typography extension , use: markdown_extensions: - smarty Some extensions provide configuration options of their own. If you would like to set any configuration options, then you can nest a key/value mapping ( option_name: option value ) of any options that a given extension supports. See the documentation for the extension you are using to determine what options they support. For example, to enable permalinks in the (included) toc extension, use: markdown_extensions: - toc: permalink: true Note that a colon ( : ) must follow the extension name ( toc ) and then on a new line the option name and value must be indented and separated by a colon. If you would like to define multiple options for a single extension, each option must be defined on a separate line: markdown_extensions: - toc: permalink: true separator: \"_\" Add an additional item to the list for each extension. If you have no configuration options to set for a specific extension, then simply omit options for that extension: markdown_extensions: - smarty - toc: permalink: true - sane_lists Dynamic config values To dynamically configure the extensions, you can get the config values from environment variables or obtain paths of the currently rendered Markdown file or the overall MkDocs site. In the above examples, each extension is a list item (starts with a - ). As an alternative, key/value pairs can be used instead. However, in that case an empty value must be provided for extensions for which no options are defined. Therefore, the last example above could also be defined as follows: markdown_extensions: smarty: {} toc: permalink: true sane_lists: {} This alternative syntax is required if you intend to override some options via inheritance . More extensions The Python-Markdown documentation provides a list of extensions which are available out-of-the-box. For a list of configuration options available for a given extension, see the documentation for that extension. You may also install and use various third party extensions ( Python-Markdown wiki , MkDocs project catalog ). Consult the documentation provided by those extensions for installation instructions and available configuration options. default : [] (an empty list).","title":"markdown_extensions"},{"location":"user-guide/configuration/#hooks","text":"New in version 1.4 A list of paths to Python scripts (relative to mkdocs.yml ) that are loaded and used as plugin instances. For example: hooks: - my_hooks.py Then the file my_hooks.py can contain any plugin event handlers (without self ), e.g.: def on_page_markdown(markdown, **kwargs): return markdown.replace('a', 'z') Advanced example: This produces warnings based on the Markdown content (and warnings are fatal in strict mode): import logging, re import mkdocs.plugins log = logging.getLogger('mkdocs') @mkdocs.plugins.event_priority(-50) def on_page_markdown(markdown, page, **kwargs): path = page.file.src_uri for m in re.finditer(r'\\bhttp://[^) ]+', markdown): log.warning(f\"Documentation file '{path}' contains a non-HTTPS link: {m[0]}\") This does not enable any new abilities compared to plugins , it only simplifies one-off usages, as these don't need to be installed like plugins do. Note that for mkdocs serve the hook module will not be reloaded on each build. You might have seen this feature in the mkdocs-simple-hooks plugin . If using standard method names, it can be directly replaced, e.g.: -plugins: - - mkdocs-simple-hooks: - hooks: - on_page_markdown: 'my_hooks:on_page_markdown' +hooks: + - my_hooks.py New in MkDocs 1.6 If a hook file has a file foo.py adjacent to it, it can use the normal Python syntax import foo to access its functions. In older versions of MkDocs, a workaround was necessary to make this work - adding the path to sys.path .","title":"hooks"},{"location":"user-guide/configuration/#plugins","text":"A list of plugins (with optional configuration settings) to use when building the site. See the Plugins documentation for full details. default : ['search'] (the \"search\" plugin included with MkDocs). If the plugins config setting is defined in the mkdocs.yml config file, then any defaults (such as search ) are ignored and you need to explicitly re-enable the defaults if you would like to continue using them: plugins: - search - your_other_plugin To define options for a given plugin, use a nested set of key/value pairs: plugins: - search - your_other_plugin: option1: value option2: other value To completely disable all plugins, including any defaults, set the plugins setting to an empty list: plugins: []","title":"plugins"},{"location":"user-guide/configuration/#enabled-option","text":"New in MkDocs 1.6 Each plugin has its own options keys. However MkDocs also ensures that each plugin has the enabled boolean option. This can be used to conditionally enable a particular plugin, as in the following example: plugins: - search - code-validator: enabled: !ENV [LINT, false] See: Environment variables","title":"enabled option"},{"location":"user-guide/configuration/#alternate-syntax","text":"In the above examples, each plugin is a list item (starts with a - ). As an alternative, key/value pairs can be used instead. However, in that case an empty value must be provided for plugins for which no options are defined. Therefore, the last example above could also be defined as follows: plugins: search: {} your_other_plugin: option1: value option2: other value This alternative syntax is required if you intend to override some options via inheritance .","title":"Alternate syntax"},{"location":"user-guide/configuration/#search","text":"A search plugin is provided by default with MkDocs which uses lunr.js as a search engine. The following config options are available to alter the behavior of the search plugin:","title":"Search"},{"location":"user-guide/configuration/#separator","text":"A regular expression which matches the characters used as word separators when building the index. By default whitespace and the hyphen ( - ) are used. To add the dot ( . ) as a word separator you might do this: plugins: - search: separator: '[\\s\\-\\.]+' default : '[\\s\\-]+'","title":"separator"},{"location":"user-guide/configuration/#min_search_length","text":"An integer value that defines the minimum length for a search query. By default searches shorter than 3 chars in length are ignored as search result quality with short search terms are poor. However, for some use cases (such as documentation about Message Queues which might generate searches for 'MQ') it may be preferable to set a shorter limit. plugins: - search: min_search_length: 2 default : 3","title":"min_search_length"},{"location":"user-guide/configuration/#lang","text":"A list of languages to use when building the search index as identified by their ISO 639-1 language codes. With Lunr Languages , the following languages are supported: ar : Arabic da : Danish nl : Dutch en : English fi : Finnish fr : French de : German hu : Hungarian it : Italian ja : Japanese no : Norwegian pt : Portuguese ro : Romanian ru : Russian es : Spanish sv : Swedish th : Thai tr : Turkish vi : Vietnamese You may contribute additional languages . Warning While search does support using multiple languages together, it is best not to add additional languages unless you really need them. Each additional language adds significant bandwidth requirements and uses more browser resources. Generally, it is best to keep each instance of MkDocs to a single language. Note Lunr Languages does not currently include support for Chinese or other Asian languages. However, some users have reported decent results using Japanese. default : The value of theme.locale if set, otherwise [en] .","title":"lang"},{"location":"user-guide/configuration/#prebuild_index","text":"Optionally generates a pre-built index of all pages, which provides some performance improvements for larger sites. Before enabling, confirm that the theme you are using explicitly supports using a prebuilt index (the builtin themes do). Set to true to enable. Warning This option requires that Node.js be installed and the command node be on the system path. If the call to node fails for any reason, a warning is issued and the build continues uninterrupted. You may use the --strict flag when building to cause such a failure to raise an error instead. Note On smaller sites, using a pre-built index is not recommended as it creates a significant increase is bandwidth requirements with little to no noticeable improvement to your users. However, for larger sites (hundreds of pages), the bandwidth increase is relatively small and your users will notice a significant improvement in search performance. default : False","title":"prebuild_index"},{"location":"user-guide/configuration/#indexing","text":"Configures what strategy the search indexer will use when building the index for your pages. This property is particularly useful if your project is large in scale, and the index takes up an enormous amount of disk space. plugins: - search: indexing: 'full'","title":"indexing"},{"location":"user-guide/configuration/#options","text":"Option Description full Indexes the title, section headings, and full text of each page. sections Indexes the title and section headings of each page. titles Indexes only the title of each page. default : full","title":"Options"},{"location":"user-guide/configuration/#special-yaml-tags","text":"","title":"Special YAML tags"},{"location":"user-guide/configuration/#environment-variables","text":"In most cases, the value of a configuration option is set directly in the configuration file. However, as an option, the value of a configuration option may be set to the value of an environment variable using the !ENV tag. For example, to set the value of the site_name option to the value of the variable SITE_NAME the YAML file may contain the following: site_name: !ENV SITE_NAME If the environment variable is not defined, then the configuration setting would be assigned a null (or None in Python) value. A default value can be defined as the last value in a list. Like this: site_name: !ENV [SITE_NAME, 'My default site name'] Multiple fallback variables can be used as well. Note that the last value is not an environment variable, but must be a value to use as a default if none of the specified environment variables are defined. site_name: !ENV [SITE_NAME, OTHER_NAME, 'My default site name'] Simple types defined within an environment variable such as string, bool, integer, float, datestamp and null are parsed as if they were defined directly in the YAML file, which means that the value will be converted to the appropriate type. However, complex types such as lists and key/value pairs cannot be defined within a single environment variable. For more details, see the pyyaml_env_tag project.","title":"Environment variables"},{"location":"user-guide/configuration/#paths-relative-to-the-current-file-or-site","text":"New in version 1.5 Some Markdown extensions can benefit from knowing the path of the Markdown file that's currently being processed, or just the root path of the current site. For that, the special tag !relative can be used in most contexts within the config file, though the only known usecases are within markdown_extensions . Examples of the possible values are: - !relative # Relative to the directory of the current Markdown file - !relative $docs_dir # Path of the docs_dir - !relative $config_dir # Path of the directory that contains the main mkdocs.yml - !relative $config_dir/some/child/dir # Some subdirectory of the root config directory (Here, $docs_dir and $config_dir are currently the only special prefixes that are recognized.) Example: markdown_extensions: - pymdownx.snippets: base_path: !relative # Relative to the current Markdown file This allows the pymdownx.snippets extension to include files relative to the current Markdown file, which without this tag it would have no way of knowing. Note Even for the default case, any extension's base path is technically the current working directory although the assumption is that it's the directory of mkdocs.yml . So even if you don't want the paths to be relative, to improve the default behavior, always prefer to use this idiom: markdown_extensions: - pymdownx.snippets: base_path: !relative $config_dir # Relative to the root directory with mkdocs.yml","title":"Paths relative to the current file or site"},{"location":"user-guide/configuration/#configuration-inheritance","text":"Generally, a single file would hold the entire configuration for a site. However, some organizations may maintain multiple sites which all share a common configuration across them. Rather than maintaining separate configurations for each, the common configuration options can be defined in a parent configuration file which each site's primary configuration file inherits. To define the parent for a configuration file, set the INHERIT (all caps) key to the path of the parent file. The path must be relative to the location of the primary file. For configuration options to be merged with a parent configuration, those options must be defined as key/value pairs. Specifically, the markdown_extensions and plugins options must use the alternative syntax which does not use list items (lines which start with - ). For example, suppose the common (parent) configuration is defined in base.yml : theme: name: mkdocs locale: en highlightjs: true markdown_extensions: toc: permalink: true admonition: {} Then, for the \"foo\" site, the primary configuration file would be defined at foo/mkdocs.yml : INHERIT: ../base.yml site_name: Foo Project site_url: https://example.com/foo When running mkdocs build , the file at foo/mkdocs.yml would be passed in as the configuration file. MkDocs will then parse that file, retrieve and parse the parent file base.yml and deep merge the two. This would result in MkDocs receiving the following merged configuration: site_name: Foo Project site_url: https://example.com/foo theme: name: mkdocs locale: en highlightjs: true markdown_extensions: toc: permalink: true admonition: {} Deep merging allows you to add and/or override various values in your primary configuration file. For example, suppose for one site you wanted to add support for definition lists, use a different symbol for permalinks, and define a different separator. In that site's primary configuration file you could do: INHERIT: ../base.yml site_name: Bar Project site_url: https://example.com/bar markdown_extensions: def_list: {} toc: permalink: \uf0c1 separator: \"_\" In that case, the above configuration would be deep merged with base.yml and result in the following configuration: site_name: Bar Project site_url: https://example.com/bar theme: name: mkdocs locale: en highlightjs: true markdown_extensions: def_list: {} toc: permalink: \uf0c1 separator: \"_\" admonition: {} Notice that the admonition extension was retained from the parent configuration, the def_list extension was added, the value of toc.permalink was replaced, and the value of toc.separator was added. You can replace or merge the value of any key. However, any non-key is always replaced. Therefore, you cannot append items to a list. You must redefine the entire list. As the nav configuration is made up of nested lists, this means that you cannot merge navigation items. Of course, you can replace the entire nav configuration with a new one. However, it is generally expected that the entire navigation would be defined in the primary configuration file for a project. Warning As a reminder, all path based configuration options must be relative to the primary configuration file and MkDocs does not alter the paths when merging. Therefore, defining paths in a parent file which is inherited by multiple different sites may not work as expected. It is generally best to define path based options in the primary configuration file only. The inheritance can also be used as a quick way to override keys on the command line - by using stdin as the config file. For example: echo '{INHERIT: mkdocs.yml, site_name: \"Renamed site\"}' | mkdocs build -f -","title":"Configuration Inheritance"},{"location":"user-guide/customizing-your-theme/","text":"Customizing Your Theme \uf0c1 Altering a theme to suit your needs. If you would like to make a few tweaks to an existing theme, there is no need to create your own theme from scratch. For minor tweaks which only require some CSS and/or JavaScript, you can use the docs_dir . However, for more complex customizations, including overriding templates, you will need to use the theme custom_dir setting. Using the docs_dir \uf0c1 The extra_css and extra_javascript configuration options can be used to make tweaks and customizations to existing themes. To use these, you simply need to include either CSS or JavaScript files within your documentation directory . For example, to change the color of the headers in your documentation, create a file called (for example) style.css and place it next to the documentation Markdown. In that file add the following CSS. h1 { color: red; } Then you need to add it to mkdocs.yml : extra_css: - style.css After making these changes, they should be visible when you run mkdocs serve - if you already had this running, you should see that the CSS changes were automatically picked up and the documentation will be updated. Note Any extra CSS or JavaScript files will be added to the generated HTML document after the page content. If you desire to include a JavaScript library, you may have better success including the library by using the theme custom_dir . Using the theme custom_dir \uf0c1 The theme.custom_dir configuration option can be used to point to a directory of files which override the files in a parent theme. The parent theme would be the theme defined in the theme.name configuration option. Any file in the custom_dir with the same name as a file in the parent theme will replace the file of the same name in the parent theme. Any additional files in the custom_dir will be added to the parent theme. The contents of the custom_dir should mirror the directory structure of the parent theme. You may include templates, JavaScript files, CSS files, images, fonts, or any other media included in a theme. Note For this to work, the theme.name setting must be set to a known installed theme. If the name setting is instead set to null (or not defined), then there is no theme to override and the contents of the custom_dir must be a complete, standalone theme. See the Theme Developer Guide for more information. For example, the mkdocs theme ( browse source ), contains the following directory structure (in part): - css\\ - fonts\\ - img\\ - favicon.ico - grid.png - js\\ - 404.html - base.html - content.html - nav-sub.html - nav.html - toc.html To override any of the files contained in that theme, create a new directory next to your docs_dir : mkdir custom_theme And then point your mkdocs.yml configuration file at the new directory: theme: name: mkdocs custom_dir: custom_theme/ To override the 404 error page (\"file not found\"), add a new template file named 404.html to the custom_theme directory. For information on what can be included in a template, review the Theme Developer Guide . To override the favicon, you can add a new icon file at custom_theme/img/favicon.ico . To include a JavaScript library, copy the library to the custom_theme/js/ directory. Your directory structure should now look like this: - docs/ - index.html - custom_theme/ - img/ - favicon.ico - js/ - somelib.js - 404.html - config.yml Note Any files included in the parent theme (defined in name ) but not included in the custom_dir will still be utilized. The custom_dir will only override/replace files in the parent theme. If you want to remove files, or build a theme from scratch, then you should review the Theme Developer Guide . Overriding Template Blocks \uf0c1 The built-in themes implement many of their parts inside template blocks which can be individually overridden in the main.html template. Simply create a main.html template file in your custom_dir and define replacement blocks within that file. Just make sure that the main.html extends base.html . For example, to alter the title of the MkDocs theme, your replacement main.html template would contain the following: {% extends \"base.html\" %} {% block htmltitle %} <title>Custom title goes here</title> {% endblock %} In the above example, the htmltitle block defined in your custom main.html file will be used in place of the default htmltitle block defined in the parent theme. You may re-define as many blocks as you desire, as long as those blocks are defined in the parent. For example, you could replace the Google Analytics script with one for a different service or replace the search feature with your own. You will need to consult the parent theme you are using to determine what blocks are available to override. The MkDocs and ReadTheDocs themes provide the following blocks: site_meta : Contains meta tags in the document head. htmltitle : Contains the page title in the document head. styles : Contains the link tags for stylesheets. libs : Contains the JavaScript libraries (jQuery, etc) included in the page header. scripts : Contains JavaScript scripts which should execute after a page loads. analytics : Contains the analytics script. extrahead : An empty block in the <head> to insert custom tags/scripts/etc. site_name : Contains the site name in the navigation bar. site_nav : Contains the site navigation in the navigation bar. search_button : Contains the search box in the navigation bar. next_prev : Contains the next and previous buttons in the navigation bar. repo : Contains the repository link in the navigation bar. content : Contains the page content and table of contents for the page. footer : Contains the page footer. You may need to view the source template files to ensure your modifications will work with the structure of the site. See Template Variables for a list of variables you can use within your custom blocks. For a more complete explanation of blocks, consult the Jinja documentation . Combining the custom_dir and Template Blocks \uf0c1 Adding a JavaScript library to the custom_dir will make it available, but won't include it in the pages generated by MkDocs. Therefore, a link needs to be added to the library from the HTML. Starting the with directory structure above (truncated): - docs/ - custom_theme/ - js/ - somelib.js - config.yml A link to the custom_theme/js/somelib.js file needs to be added to the template. As somelib.js is a JavaScript library, it would logically go in the libs block. However, a new libs block that only includes the new script will replace the block defined in the parent template and any links to libraries in the parent template will be removed. To avoid breaking the template, a super block can be used with a call to super from within the block: {% extends \"base.html\" %} {% block libs %} {{ super() }} <script src=\"{{ base_url }}/js/somelib.js\"></script> {% endblock %} Note that the base_url template variable was used to ensure that the link is always relative to the current page. Now the generated pages will include links to the template provided libraries as well as the library included in the custom_dir . The same would be required for any additional CSS files included in the custom_dir .","title":"Customizing Your Theme"},{"location":"user-guide/customizing-your-theme/#customizing-your-theme","text":"Altering a theme to suit your needs. If you would like to make a few tweaks to an existing theme, there is no need to create your own theme from scratch. For minor tweaks which only require some CSS and/or JavaScript, you can use the docs_dir . However, for more complex customizations, including overriding templates, you will need to use the theme custom_dir setting.","title":"Customizing Your Theme"},{"location":"user-guide/customizing-your-theme/#using-the-docs_dir","text":"The extra_css and extra_javascript configuration options can be used to make tweaks and customizations to existing themes. To use these, you simply need to include either CSS or JavaScript files within your documentation directory . For example, to change the color of the headers in your documentation, create a file called (for example) style.css and place it next to the documentation Markdown. In that file add the following CSS. h1 { color: red; } Then you need to add it to mkdocs.yml : extra_css: - style.css After making these changes, they should be visible when you run mkdocs serve - if you already had this running, you should see that the CSS changes were automatically picked up and the documentation will be updated. Note Any extra CSS or JavaScript files will be added to the generated HTML document after the page content. If you desire to include a JavaScript library, you may have better success including the library by using the theme custom_dir .","title":"Using the docs_dir"},{"location":"user-guide/customizing-your-theme/#using-the-theme-custom_dir","text":"The theme.custom_dir configuration option can be used to point to a directory of files which override the files in a parent theme. The parent theme would be the theme defined in the theme.name configuration option. Any file in the custom_dir with the same name as a file in the parent theme will replace the file of the same name in the parent theme. Any additional files in the custom_dir will be added to the parent theme. The contents of the custom_dir should mirror the directory structure of the parent theme. You may include templates, JavaScript files, CSS files, images, fonts, or any other media included in a theme. Note For this to work, the theme.name setting must be set to a known installed theme. If the name setting is instead set to null (or not defined), then there is no theme to override and the contents of the custom_dir must be a complete, standalone theme. See the Theme Developer Guide for more information. For example, the mkdocs theme ( browse source ), contains the following directory structure (in part): - css\\ - fonts\\ - img\\ - favicon.ico - grid.png - js\\ - 404.html - base.html - content.html - nav-sub.html - nav.html - toc.html To override any of the files contained in that theme, create a new directory next to your docs_dir : mkdir custom_theme And then point your mkdocs.yml configuration file at the new directory: theme: name: mkdocs custom_dir: custom_theme/ To override the 404 error page (\"file not found\"), add a new template file named 404.html to the custom_theme directory. For information on what can be included in a template, review the Theme Developer Guide . To override the favicon, you can add a new icon file at custom_theme/img/favicon.ico . To include a JavaScript library, copy the library to the custom_theme/js/ directory. Your directory structure should now look like this: - docs/ - index.html - custom_theme/ - img/ - favicon.ico - js/ - somelib.js - 404.html - config.yml Note Any files included in the parent theme (defined in name ) but not included in the custom_dir will still be utilized. The custom_dir will only override/replace files in the parent theme. If you want to remove files, or build a theme from scratch, then you should review the Theme Developer Guide .","title":"Using the theme custom_dir"},{"location":"user-guide/customizing-your-theme/#overriding-template-blocks","text":"The built-in themes implement many of their parts inside template blocks which can be individually overridden in the main.html template. Simply create a main.html template file in your custom_dir and define replacement blocks within that file. Just make sure that the main.html extends base.html . For example, to alter the title of the MkDocs theme, your replacement main.html template would contain the following: {% extends \"base.html\" %} {% block htmltitle %} <title>Custom title goes here</title> {% endblock %} In the above example, the htmltitle block defined in your custom main.html file will be used in place of the default htmltitle block defined in the parent theme. You may re-define as many blocks as you desire, as long as those blocks are defined in the parent. For example, you could replace the Google Analytics script with one for a different service or replace the search feature with your own. You will need to consult the parent theme you are using to determine what blocks are available to override. The MkDocs and ReadTheDocs themes provide the following blocks: site_meta : Contains meta tags in the document head. htmltitle : Contains the page title in the document head. styles : Contains the link tags for stylesheets. libs : Contains the JavaScript libraries (jQuery, etc) included in the page header. scripts : Contains JavaScript scripts which should execute after a page loads. analytics : Contains the analytics script. extrahead : An empty block in the <head> to insert custom tags/scripts/etc. site_name : Contains the site name in the navigation bar. site_nav : Contains the site navigation in the navigation bar. search_button : Contains the search box in the navigation bar. next_prev : Contains the next and previous buttons in the navigation bar. repo : Contains the repository link in the navigation bar. content : Contains the page content and table of contents for the page. footer : Contains the page footer. You may need to view the source template files to ensure your modifications will work with the structure of the site. See Template Variables for a list of variables you can use within your custom blocks. For a more complete explanation of blocks, consult the Jinja documentation .","title":"Overriding Template Blocks"},{"location":"user-guide/customizing-your-theme/#combining-the-custom_dir-and-template-blocks","text":"Adding a JavaScript library to the custom_dir will make it available, but won't include it in the pages generated by MkDocs. Therefore, a link needs to be added to the library from the HTML. Starting the with directory structure above (truncated): - docs/ - custom_theme/ - js/ - somelib.js - config.yml A link to the custom_theme/js/somelib.js file needs to be added to the template. As somelib.js is a JavaScript library, it would logically go in the libs block. However, a new libs block that only includes the new script will replace the block defined in the parent template and any links to libraries in the parent template will be removed. To avoid breaking the template, a super block can be used with a call to super from within the block: {% extends \"base.html\" %} {% block libs %} {{ super() }} <script src=\"{{ base_url }}/js/somelib.js\"></script> {% endblock %} Note that the base_url template variable was used to ensure that the link is always relative to the current page. Now the generated pages will include links to the template provided libraries as well as the library included in the custom_dir . The same would be required for any additional CSS files included in the custom_dir .","title":"Combining the custom_dir and Template Blocks"},{"location":"user-guide/deploying-your-docs/","text":"Deploying your docs \uf0c1 A basic guide to deploying your docs to various hosting providers GitHub Pages \uf0c1 If you host the source code for a project on GitHub , you can easily use GitHub Pages to host the documentation for your project. There are two basic types of GitHub Pages sites : Project Pages sites, and User and Organization Pages sites. They are nearly identical but have some important differences, which require a different work flow when deploying. Project Pages \uf0c1 Project Pages sites are simpler as the site files get deployed to a branch within the project repository ( gh-pages by default). After you checkout the primary working branch (usually master ) of the git repository where you maintain the source documentation for your project, run the following command: mkdocs gh-deploy That's it! Behind the scenes, MkDocs will build your docs and use the ghp-import tool to commit them to the gh-pages branch and push the gh-pages branch to GitHub. Use mkdocs gh-deploy --help to get a full list of options available for the gh-deploy command. Be aware that you will not be able to review the built site before it is pushed to GitHub. Therefore, you may want to verify any changes you make to the docs beforehand by using the build or serve commands and reviewing the built files locally. Warning You should never edit files in your pages repository by hand if you're using the gh-deploy command because you will lose your work the next time you run the command. Warning If there are untracked files or uncommitted work in the local repository where mkdocs gh-deploy is run, these will be included in the pages that are deployed. Organization and User Pages \uf0c1 User and Organization Pages sites are not tied to a specific project, and the site files are deployed to the master branch in a dedicated repository named with the GitHub account name. Therefore, you need working copies of two repositories on our local system. For example, consider the following file structure: my-project/ mkdocs.yml docs/ orgname.github.io/ After making and verifying updates to your project you need to change directories to the orgname.github.io repository and call the mkdocs gh-deploy command from there: cd ../orgname.github.io/ mkdocs gh-deploy --config-file ../my-project/mkdocs.yml --remote-branch master Note that you need to explicitly point to the mkdocs.yml configuration file as it is no longer in the current working directory. You also need to inform the deploy script to commit to the master branch. You may override the default with the remote_branch configuration setting, but if you forget to change directories before running the deploy script, it will commit to the master branch of your project, which you probably don't want. Custom Domains \uf0c1 GitHub Pages includes support for using a Custom Domain for your site. In addition to the steps documented by GitHub, you need to take one additional step so that MkDocs will work with your custom domain. You need to add a CNAME file to the root of your docs_dir . The file must contain a single bare domain or subdomain on a single line (see MkDocs' own CNAME file as an example). You may create the file manually, or use GitHub's web interface to set up the custom domain (under Settings / Custom Domain). If you use the web interface, GitHub will create the CNAME file for you and save it to the root of your \"pages\" branch. So that the file does not get removed the next time you deploy, you need to copy the file to your docs_dir . With the file properly included in your docs_dir , MkDocs will include the file in your built site and push it to your \"pages\" branch each time you run the gh-deploy command. If you are having problems getting a custom domain to work, see GitHub's documentation on Troubleshooting custom domains . Read the Docs \uf0c1 Read the Docs offers free documentation hosting. You can import your docs using the Git version control system. Read the Docs supports MkDocs out-of-the-box. Follow the instructions on their site to arrange the files in your repository properly, create an account and point it at your publicly hosted repository. If properly configured, your documentation will update each time you push commits to your public repository. Other Providers \uf0c1 Any hosting provider which can serve static files can be used to serve documentation generated by MkDocs. While it would be impossible to document how to upload the docs to every hosting provider out there, the following guidelines should provide some general assistance. When you build your site (using the mkdocs build command), all of the files are written to the directory assigned to the site_dir configuration option (defaults to \"site\" ) in your mkdocs.yaml config file. Generally, you will simply need to copy the contents of that directory to the root directory of your hosting provider's server. Depending on your hosting provider's setup, you may need to use a graphical or command line ftp , ssh or scp client to transfer the files. For example, a typical set of commands from the command line might look something like this: mkdocs build scp -r ./site user@host:/path/to/server/root Of course, you will need to replace user with the username you have with your hosting provider and host with the appropriate domain name. Additionally, you will need to adjust the /path/to/server/root to match the configuration of your hosts' file system. See your host's documentation for specifics. You will likely want to search their documentation for \"ftp\" or \"uploading site\". Local Files \uf0c1 Rather than hosting your documentation on a server, you may instead distribute the files directly, which can then be viewed in a browser using the file:// scheme. Note that, due to the security settings of all modern browsers, some things will not work the same and some features may not work at all. In fact, a few settings will need to be customized in very specific ways. site_url : The site_url must be set to an empty string, which instructs MkDocs to build your site so that it will work with the file:// scheme. site_url: \"\" use_directory_urls : Set use_directory_urls to false . Otherwise, internal links between pages will not work properly. use_directory_urls: false search : You will need to either disable the search plugin, or use a third-party search plugin which is specifically designed to work with the file:// scheme. To disable all plugins, set the plugins setting to an empty list. plugins: [] If you have other plugins enabled, simply ensure that search is not included in the list. When writing your documentation, it is imperative that all internal links use relative URLs as documented . Remember, each reader of your documentation will be using a different device and the files will likely be in a different location on that device. If you expect your documentation to be viewed off-line, you may also need to be careful about which themes you choose. Many themes make use of CDNs for various support files, which require a live Internet connection. You will need to choose a theme which includes all support files directly in the theme. When you build your site (using the mkdocs build command), all of the files are written to the directory assigned to the site_dir configuration option (defaults to \"site\" ) in your mkdocs.yaml config file. Generally, you will simply need to copy the contents of that directory and distribute it to your readers. Alternatively, you may choose to use a third party tool to convert the HTML files to some other documentation format. 404 Pages \uf0c1 When MkDocs builds the documentation it will include a 404.html file in the build directory . This file will be automatically used when deploying to GitHub but only on a custom domain. Other web servers may be configured to use it but the feature won't always be available. See the documentation for your server of choice for more information.","title":"Deploying Your Docs"},{"location":"user-guide/deploying-your-docs/#deploying-your-docs","text":"A basic guide to deploying your docs to various hosting providers","title":"Deploying your docs"},{"location":"user-guide/deploying-your-docs/#github-pages","text":"If you host the source code for a project on GitHub , you can easily use GitHub Pages to host the documentation for your project. There are two basic types of GitHub Pages sites : Project Pages sites, and User and Organization Pages sites. They are nearly identical but have some important differences, which require a different work flow when deploying.","title":"GitHub Pages"},{"location":"user-guide/deploying-your-docs/#project-pages","text":"Project Pages sites are simpler as the site files get deployed to a branch within the project repository ( gh-pages by default). After you checkout the primary working branch (usually master ) of the git repository where you maintain the source documentation for your project, run the following command: mkdocs gh-deploy That's it! Behind the scenes, MkDocs will build your docs and use the ghp-import tool to commit them to the gh-pages branch and push the gh-pages branch to GitHub. Use mkdocs gh-deploy --help to get a full list of options available for the gh-deploy command. Be aware that you will not be able to review the built site before it is pushed to GitHub. Therefore, you may want to verify any changes you make to the docs beforehand by using the build or serve commands and reviewing the built files locally. Warning You should never edit files in your pages repository by hand if you're using the gh-deploy command because you will lose your work the next time you run the command. Warning If there are untracked files or uncommitted work in the local repository where mkdocs gh-deploy is run, these will be included in the pages that are deployed.","title":"Project Pages"},{"location":"user-guide/deploying-your-docs/#organization-and-user-pages","text":"User and Organization Pages sites are not tied to a specific project, and the site files are deployed to the master branch in a dedicated repository named with the GitHub account name. Therefore, you need working copies of two repositories on our local system. For example, consider the following file structure: my-project/ mkdocs.yml docs/ orgname.github.io/ After making and verifying updates to your project you need to change directories to the orgname.github.io repository and call the mkdocs gh-deploy command from there: cd ../orgname.github.io/ mkdocs gh-deploy --config-file ../my-project/mkdocs.yml --remote-branch master Note that you need to explicitly point to the mkdocs.yml configuration file as it is no longer in the current working directory. You also need to inform the deploy script to commit to the master branch. You may override the default with the remote_branch configuration setting, but if you forget to change directories before running the deploy script, it will commit to the master branch of your project, which you probably don't want.","title":"Organization and User Pages"},{"location":"user-guide/deploying-your-docs/#custom-domains","text":"GitHub Pages includes support for using a Custom Domain for your site. In addition to the steps documented by GitHub, you need to take one additional step so that MkDocs will work with your custom domain. You need to add a CNAME file to the root of your docs_dir . The file must contain a single bare domain or subdomain on a single line (see MkDocs' own CNAME file as an example). You may create the file manually, or use GitHub's web interface to set up the custom domain (under Settings / Custom Domain). If you use the web interface, GitHub will create the CNAME file for you and save it to the root of your \"pages\" branch. So that the file does not get removed the next time you deploy, you need to copy the file to your docs_dir . With the file properly included in your docs_dir , MkDocs will include the file in your built site and push it to your \"pages\" branch each time you run the gh-deploy command. If you are having problems getting a custom domain to work, see GitHub's documentation on Troubleshooting custom domains .","title":"Custom Domains"},{"location":"user-guide/deploying-your-docs/#read-the-docs","text":"Read the Docs offers free documentation hosting. You can import your docs using the Git version control system. Read the Docs supports MkDocs out-of-the-box. Follow the instructions on their site to arrange the files in your repository properly, create an account and point it at your publicly hosted repository. If properly configured, your documentation will update each time you push commits to your public repository.","title":"Read the Docs"},{"location":"user-guide/deploying-your-docs/#other-providers","text":"Any hosting provider which can serve static files can be used to serve documentation generated by MkDocs. While it would be impossible to document how to upload the docs to every hosting provider out there, the following guidelines should provide some general assistance. When you build your site (using the mkdocs build command), all of the files are written to the directory assigned to the site_dir configuration option (defaults to \"site\" ) in your mkdocs.yaml config file. Generally, you will simply need to copy the contents of that directory to the root directory of your hosting provider's server. Depending on your hosting provider's setup, you may need to use a graphical or command line ftp , ssh or scp client to transfer the files. For example, a typical set of commands from the command line might look something like this: mkdocs build scp -r ./site user@host:/path/to/server/root Of course, you will need to replace user with the username you have with your hosting provider and host with the appropriate domain name. Additionally, you will need to adjust the /path/to/server/root to match the configuration of your hosts' file system. See your host's documentation for specifics. You will likely want to search their documentation for \"ftp\" or \"uploading site\".","title":"Other Providers"},{"location":"user-guide/deploying-your-docs/#local-files","text":"Rather than hosting your documentation on a server, you may instead distribute the files directly, which can then be viewed in a browser using the file:// scheme. Note that, due to the security settings of all modern browsers, some things will not work the same and some features may not work at all. In fact, a few settings will need to be customized in very specific ways. site_url : The site_url must be set to an empty string, which instructs MkDocs to build your site so that it will work with the file:// scheme. site_url: \"\" use_directory_urls : Set use_directory_urls to false . Otherwise, internal links between pages will not work properly. use_directory_urls: false search : You will need to either disable the search plugin, or use a third-party search plugin which is specifically designed to work with the file:// scheme. To disable all plugins, set the plugins setting to an empty list. plugins: [] If you have other plugins enabled, simply ensure that search is not included in the list. When writing your documentation, it is imperative that all internal links use relative URLs as documented . Remember, each reader of your documentation will be using a different device and the files will likely be in a different location on that device. If you expect your documentation to be viewed off-line, you may also need to be careful about which themes you choose. Many themes make use of CDNs for various support files, which require a live Internet connection. You will need to choose a theme which includes all support files directly in the theme. When you build your site (using the mkdocs build command), all of the files are written to the directory assigned to the site_dir configuration option (defaults to \"site\" ) in your mkdocs.yaml config file. Generally, you will simply need to copy the contents of that directory and distribute it to your readers. Alternatively, you may choose to use a third party tool to convert the HTML files to some other documentation format.","title":"Local Files"},{"location":"user-guide/deploying-your-docs/#404-pages","text":"When MkDocs builds the documentation it will include a 404.html file in the build directory . This file will be automatically used when deploying to GitHub but only on a custom domain. Other web servers may be configured to use it but the feature won't always be available. See the documentation for your server of choice for more information.","title":"404 Pages"},{"location":"user-guide/installation/","text":"MkDocs Installation \uf0c1 A detailed guide. Requirements \uf0c1 MkDocs requires a recent version of Python and the Python package manager, pip , to be installed on your system. You can check if you already have these installed from the command line: $ python --version Python 3.8.2 $ pip --version pip 20.0.2 from /usr/local/lib/python3.8/site-packages/pip (python 3.8) If you already have those packages installed, you may skip down to Installing MkDocs . Installing Python \uf0c1 Install Python using your package manager of choice, or by downloading an installer appropriate for your system from python.org and running it. Note If you are installing Python on Windows, be sure to check the box to have Python added to your PATH if the installer offers such an option (it's normally off by default). Installing pip \uf0c1 If you're using a recent version of Python, the Python package manager, pip , is most likely installed by default. However, you may need to upgrade pip to the lasted version: pip install --upgrade pip If you need to install pip for the first time, download get-pip.py . Then run the following command to install it: python get-pip.py Installing MkDocs \uf0c1 Install the mkdocs package using pip: pip install mkdocs You should now have the mkdocs command installed on your system. Run mkdocs --version to check that everything worked okay. $ mkdocs --version mkdocs, version 1.2.0 from /usr/local/lib/python3.8/site-packages/mkdocs (Python 3.8) Note If you would like manpages installed for MkDocs, the click-man tool can generate and install them for you. Simply run the following two commands: pip install click-man click-man --target path/to/man/pages mkdocs See the click-man documentation for an explanation of why manpages are not automatically generated and installed by pip. Note If you are using Windows, some of the above commands may not work out-of-the-box. A quick solution may be to preface every Python command with python -m like this: python -m pip install mkdocs python -m mkdocs For a more permanent solution, you may need to edit your PATH environment variable to include the Scripts directory of your Python installation. Recent versions of Python include a script to do this for you. Navigate to your Python installation directory (for example C:\\Python38\\ ), open the Tools , then Scripts folder, and run the win_add2path.py file by double clicking on it. Alternatively, you can download the script and run it ( python win_add2path.py ).","title":"Installation"},{"location":"user-guide/installation/#mkdocs-installation","text":"A detailed guide.","title":"MkDocs Installation"},{"location":"user-guide/installation/#requirements","text":"MkDocs requires a recent version of Python and the Python package manager, pip , to be installed on your system. You can check if you already have these installed from the command line: $ python --version Python 3.8.2 $ pip --version pip 20.0.2 from /usr/local/lib/python3.8/site-packages/pip (python 3.8) If you already have those packages installed, you may skip down to Installing MkDocs .","title":"Requirements"},{"location":"user-guide/installation/#installing-python","text":"Install Python using your package manager of choice, or by downloading an installer appropriate for your system from python.org and running it. Note If you are installing Python on Windows, be sure to check the box to have Python added to your PATH if the installer offers such an option (it's normally off by default).","title":"Installing Python"},{"location":"user-guide/installation/#installing-pip","text":"If you're using a recent version of Python, the Python package manager, pip , is most likely installed by default. However, you may need to upgrade pip to the lasted version: pip install --upgrade pip If you need to install pip for the first time, download get-pip.py . Then run the following command to install it: python get-pip.py","title":"Installing pip"},{"location":"user-guide/installation/#installing-mkdocs","text":"Install the mkdocs package using pip: pip install mkdocs You should now have the mkdocs command installed on your system. Run mkdocs --version to check that everything worked okay. $ mkdocs --version mkdocs, version 1.2.0 from /usr/local/lib/python3.8/site-packages/mkdocs (Python 3.8) Note If you would like manpages installed for MkDocs, the click-man tool can generate and install them for you. Simply run the following two commands: pip install click-man click-man --target path/to/man/pages mkdocs See the click-man documentation for an explanation of why manpages are not automatically generated and installed by pip. Note If you are using Windows, some of the above commands may not work out-of-the-box. A quick solution may be to preface every Python command with python -m like this: python -m pip install mkdocs python -m mkdocs For a more permanent solution, you may need to edit your PATH environment variable to include the Scripts directory of your Python installation. Recent versions of Python include a script to do this for you. Navigate to your Python installation directory (for example C:\\Python38\\ ), open the Tools , then Scripts folder, and run the win_add2path.py file by double clicking on it. Alternatively, you can download the script and run it ( python win_add2path.py ).","title":"Installing MkDocs"},{"location":"user-guide/localizing-your-theme/","text":"Localizing Your Theme \uf0c1 Display your theme in your preferred language. Note Theme localization only translates the text elements of the theme itself (such as \"next\" and \"previous\" links), not the actual content of your documentation. If you wish to create multilingual documentation, you need to combine theme localization as described here with a third-party internationalization/localization plugin. Installation \uf0c1 For theme localization to work, you must use a theme which supports it and enable i18n (internationalization) support by installing mkdocs[i18n] : pip install 'mkdocs[i18n]' Supported locales \uf0c1 In most cases a locale is designated by the ISO-639-1 (2-letter) abbreviation for your language. However, a locale may also include a territory (or region or county) code as well. The language and territory must be separated by an underscore. For example, some possible locales for English might include en , en_AU , en_GB , and en_US . For a list of locales supported by the theme you are using, see that theme's documentation. mkdocs readthedocs Warning If you configure a language locale which is not yet supported by the theme that you are using, MkDocs will fall back to the theme's default locale. Usage \uf0c1 To specify the locale that MkDocs should use, set the locale parameter of the theme configuration option to the appropriate code. For example, to build the mkdocs theme in French you would use the following in your mkdocs.yml configuration file: theme: name: mkdocs locale: fr Contributing theme translations \uf0c1 If a theme has not yet been translated into your language, feel free to contribute a translation using the Translation Guide .","title":"Localizing Your Theme"},{"location":"user-guide/localizing-your-theme/#localizing-your-theme","text":"Display your theme in your preferred language. Note Theme localization only translates the text elements of the theme itself (such as \"next\" and \"previous\" links), not the actual content of your documentation. If you wish to create multilingual documentation, you need to combine theme localization as described here with a third-party internationalization/localization plugin.","title":"Localizing Your Theme"},{"location":"user-guide/localizing-your-theme/#installation","text":"For theme localization to work, you must use a theme which supports it and enable i18n (internationalization) support by installing mkdocs[i18n] : pip install 'mkdocs[i18n]'","title":"Installation"},{"location":"user-guide/localizing-your-theme/#supported-locales","text":"In most cases a locale is designated by the ISO-639-1 (2-letter) abbreviation for your language. However, a locale may also include a territory (or region or county) code as well. The language and territory must be separated by an underscore. For example, some possible locales for English might include en , en_AU , en_GB , and en_US . For a list of locales supported by the theme you are using, see that theme's documentation. mkdocs readthedocs Warning If you configure a language locale which is not yet supported by the theme that you are using, MkDocs will fall back to the theme's default locale.","title":"Supported locales"},{"location":"user-guide/localizing-your-theme/#usage","text":"To specify the locale that MkDocs should use, set the locale parameter of the theme configuration option to the appropriate code. For example, to build the mkdocs theme in French you would use the following in your mkdocs.yml configuration file: theme: name: mkdocs locale: fr","title":"Usage"},{"location":"user-guide/localizing-your-theme/#contributing-theme-translations","text":"If a theme has not yet been translated into your language, feel free to contribute a translation using the Translation Guide .","title":"Contributing theme translations"},{"location":"user-guide/writing-your-docs/","text":"Writing your docs \uf0c1 How to layout and write your Markdown source files. File layout \uf0c1 Your documentation source should be written as regular Markdown files (see Writing with Markdown below), and placed in the documentation directory . By default, this directory will be named docs and will exist at the top level of your project, alongside the mkdocs.yml configuration file. The simplest project you can create will look something like this: mkdocs.yml docs/ index.md By convention your project homepage should be named index.md (see Index pages below for details). Any of the following file extensions may be used for your Markdown source files: markdown , mdown , mkdn , mkd , md . All Markdown files included in your documentation directory will be rendered in the built site regardless of any settings. Note Files and directories with names which begin with a dot (for example: .foo.md or .bar/baz.md ) are ignored by MkDocs. This can be overridden with the exclude_docs config . You can also create multi-page documentation, by creating several Markdown files: mkdocs.yml docs/ index.md about.md license.md The file layout you use determines the URLs that are used for the generated pages. Given the above layout, pages would be generated for the following URLs: / /about/ /license/ You can also include your Markdown files in nested directories if that better suits your documentation layout. docs/ index.md user-guide/getting-started.md user-guide/configuration-options.md license.md Source files inside nested directories will cause pages to be generated with nested URLs, like so: / /user-guide/getting-started/ /user-guide/configuration-options/ /license/ Any files which are not identified as Markdown files (by their file extension) within the documentation directory are copied by MkDocs to the built site unaltered. See how to link to images and media below for details. Index pages \uf0c1 When a directory is requested, by default, most web servers will return an index file (usually named index.html ) contained within that directory if one exists. For that reason, the homepage in all of the examples above has been named index.md , which MkDocs will render to index.html when building the site. Many repository hosting sites provide special treatment for README files by displaying the contents of the README file when browsing the contents of a directory. Therefore, MkDocs will allow you to name your index pages as README.md instead of index.md . In that way, when users are browsing your source code, the repository host can display the index page of that directory as it is a README file. However, when MkDocs renders your site, the file will be renamed to index.html so that the server will serve it as a proper index file. If both an index.md file and a README.md file are found in the same directory, then the index.md file is used and the README.md file is ignored. Configure Pages and Navigation \uf0c1 The nav configuration setting in your mkdocs.yml file defines which pages are included in the global site navigation menu as well as the structure of that menu. If not provided, the navigation will be automatically created by discovering all the Markdown files in the documentation directory . An automatically created navigation configuration will always be sorted alphanumerically by file name (except that index files will always be listed first within a sub-section). You will need to manually define your navigation configuration if you would like your navigation menu sorted differently. A minimal navigation configuration could look like this: nav: - index.md - about.md All paths in the navigation configuration must be relative to the docs_dir configuration option. If that option is set to the default value, docs , the source files for the above configuration would be located at docs/index.md and docs/about.md . The above example will result in two navigation items being created at the top level and with their titles inferred from the contents of the Markdown file or, if no title is defined within the file, of the file name. To override the title in the nav setting add a title right before the filename. nav: - Home: index.md - About: about.md Note that if a title is defined for a page in the navigation, that title will be used throughout the site for that page and will override any title defined within the page itself. Navigation sub-sections can be created by listing related pages together under a section title. For example: nav: - Home: index.md - User Guide: - Writing your docs: writing-your-docs.md - Styling your docs: styling-your-docs.md - About: - License: license.md - Release Notes: release-notes.md With the above configuration we have three top level items: \"Home\", \"User Guide\" and \"About.\" \"Home\" is a link to the homepage for the site. Under the \"User Guide\" section two pages are listed: \"Writing your docs\" and \"Styling your docs.\" Under the \"About\" section two more pages are listed: \"License\" and \"Release Notes.\" Note that a section cannot have a page assigned to it. Sections are only containers for child pages and sub-sections. You may nest sections as deeply as you like. However, be careful that you don't make it too difficult for your users to navigate through the site navigation by over-complicating the nesting. While sections may mirror your directory structure, they do not have to. Any pages not listed in your navigation configuration will still be rendered and included with the built site, however, they will not be linked from the global navigation and will not be included in the previous and next links. Such pages will be \"hidden\" unless linked to directly. Writing with Markdown \uf0c1 MkDocs pages must be authored in Markdown , a lightweight markup language which results in easy-to-read, easy-to-write plain text documents that can be converted to valid HTML documents in a predictable manner. MkDocs uses the Python-Markdown library to render Markdown documents to HTML. Python-Markdown is almost completely compliant with the reference implementation , although there are a few very minor differences . In addition to the base Markdown syntax which is common across all Markdown implementations, MkDocs includes support for extending the Markdown syntax with Python-Markdown extensions . See the MkDocs' markdown_extensions configuration setting for details on how to enable extensions. MkDocs includes some extensions by default, which are highlighted below. Internal links \uf0c1 MkDocs allows you to interlink your documentation by using regular Markdown links . However, there are a few additional benefits to formatting those links specifically for MkDocs as outlined below. Linking to pages \uf0c1 When linking between pages in the documentation you can simply use the regular Markdown linking syntax, including the relative path to the Markdown document you wish to link to. Please see the [project license](license.md) for further details. When the MkDocs build runs, these Markdown links will automatically be transformed into an HTML hyperlink to the appropriate HTML page. Warning Using absolute paths with links is not officially supported. Relative paths are adjusted by MkDocs to ensure they are always relative to the page. Absolute paths are not modified at all. This means that your links using absolute paths might work fine in your local environment but they might break once you deploy them to your production server. If the target documentation file is in another directory you'll need to make sure to include any relative directory path in the link. Please see the [project license](../about/license.md) for further details. The toc extension is used by MkDocs to generate an ID for every header in your Markdown documents. You can use that ID to link to a section within a target document by using an anchor link. The generated HTML will correctly transform the path portion of the link, and leave the anchor portion intact. Please see the [project license](about.md#license) for further details. Note that IDs are created from the text of a header. All text is converted to lowercase and any disallowed characters, including white-space, are converted to dashes. Consecutive dashes are then reduced to a single dash. There are a few configuration settings provided by the toc extension which you can set in your mkdocs.yml configuration file to alter the default behavior: permalink Generate permanent links at the end of each header. Default: False . When set to True the paragraph symbol (\u00b6 or &para; ) is used as the link text. When set to a string, the provided string is used as the link text. For example, to use the hash symbol ( # ) instead, do: markdown_extensions: - toc: permalink: \"#\" baselevel Base level for headers. Default: 1 . This setting allows the header levels to be automatically adjusted to fit within the hierarchy of your HTML templates. For example, if the Markdown text for a page should not contain any headers higher than level 2 ( <h2> ), do: markdown_extensions: - toc: baselevel: 2 Then any headers in your document would be increased by 1. For example, the header # Header would be rendered as a level 2 header ( <h2> ) in the HTML output. separator Word separator. Default: - . Character which replaces white-space in generated IDs. If you prefer underscores, then do: markdown_extensions: - toc: separator: \"_\" Note that if you would like to define multiple of the above settings, you must do so under a single toc entry in the markdown_extensions configuration option. markdown_extensions: - toc: permalink: \"#\" baselevel: 2 separator: \"_\" Linking to images and media \uf0c1 As well as the Markdown source files, you can also include other file types in your documentation, which will be copied across when generating your documentation site. These might include images and other media. For example, if your project documentation needed to include a GitHub Pages CNAME file and a PNG formatted screenshot image then your file layout might look as follows: mkdocs.yml docs/ CNAME index.md about.md license.md img/ screenshot.png To include images in your documentation source files, simply use any of the regular Markdown image syntaxes: Cupcake indexer is a snazzy new project for indexing small cakes. ![Screenshot](img/screenshot.png) *Above: Cupcake indexer in progress* Your image will now be embedded when you build the documentation, and should also be previewed if you're working on the documentation with a Markdown editor. Linking from raw HTML \uf0c1 Markdown allows document authors to fall back to raw HTML when the Markdown syntax does not meets the author's needs. MkDocs does not limit Markdown in this regard. However, as all raw HTML is ignored by the Markdown parser, MkDocs is not able to validate or convert links contained in raw HTML. When including internal links within raw HTML, you will need to manually format the link appropriately for the rendered document. Meta-Data \uf0c1 MkDocs includes support for both YAML and MultiMarkdown style meta-data (often called front-matter). Meta-data consists of a series of keywords and values defined at the beginning of a Markdown document, which are stripped from the document prior to it being processing by Python-Markdown. The key/value pairs are passed by MkDocs to the page template. Therefore, if a theme includes support, the values of any keys can be displayed on the page or used to control the page rendering. See your theme's documentation for information about which keys may be supported, if any. In addition to displaying information in a template, MkDocs includes support for a few predefined meta-data keys which can alter the behavior of MkDocs for that specific page. The following keys are supported: template The template to use with the current page. By default, MkDocs uses the main.html template of a theme to render Markdown pages. You can use the template meta-data key to define a different template file for that specific page. The template file must be available on the path(s) defined in the theme's environment. title The \"title\" to use for the document. MkDocs will attempt to determine the title of a document in the following ways, in order: A title defined in the nav configuration setting for a document. A title defined in the title meta-data key of a document. A level 1 Markdown header on the first line of the document body. ( Setext-style headers are supported only since MkDocs 1.5 .) The filename of a document. Upon finding a title for a page, MkDoc does not continue checking any additional sources in the above list. YAML Style Meta-Data \uf0c1 YAML style meta-data consists of YAML key/value pairs wrapped in YAML style delimiters to mark the start and/or end of the meta-data. The first line of a document must be --- . The meta-data ends at the first line containing an end deliminator (either --- or ... ). The content between the delimiters is parsed as YAML . --- title: My Document summary: A brief description of my document. authors: - Waylan Limberg - Tom Christie date: 2018-07-10 some_url: https://example.com --- This is the first paragraph of the document. YAML is able to detect data types. Therefore, in the above example, the values of title , summary and some_url are strings, the value of authors is a list of strings and the value of date is a datetime.date object. Note that the YAML keys are case sensitive and MkDocs expects keys to be all lowercase. The top level of the YAML must be a collection of key/value pairs, which results in a Python dict being returned. If any other type is returned or the YAML parser encounters an error, then MkDocs does not recognize the section as meta-data, the page's meta attribute will be empty, and the section is not removed from the document. MultiMarkdown Style Meta-Data \uf0c1 MultiMarkdown style meta-data uses a format first introduced by the MultiMarkdown project. The data consists of a series of keywords and values defined at the beginning of a Markdown document, like this: Title: My Document Summary: A brief description of my document. Authors: Waylan Limberg Tom Christie Date: January 23, 2018 blank-value: some_url: https://example.com This is the first paragraph of the document. The keywords are case-insensitive and may consist of letters, numbers, underscores and dashes and must end with a colon. The values consist of anything following the colon on the line and may even be blank. If a line is indented by 4 or more spaces, that line is assumed to be an additional line of the value for the previous keyword. A keyword may have as many lines as desired. All lines are joined into a single string. The first blank line ends all meta-data for the document. Therefore, the first line of a document must not be blank. Note MkDocs does not support YAML style delimiters ( --- or ... ) for MultiMarkdown style meta-data. In fact, MkDocs relies on the the presence or absence of the delimiters to determine whether YAML style meta-data or MultiMarkdown style meta-data is being used. If the delimiters are detected, but the content between the delimiters is not valid YAML meta-data, MkDocs does not attempt to parse the content as MultiMarkdown style meta-data. Tables \uf0c1 The tables extension adds a basic table syntax to Markdown which is popular across multiple implementations. The syntax is rather simple and is generally only useful for simple tabular data. A simple table looks like this: First Header | Second Header | Third Header ------------ | ------------- | ------------ Content Cell | Content Cell | Content Cell Content Cell | Content Cell | Content Cell If you wish, you can add a leading and tailing pipe to each line of the table: | First Header | Second Header | Third Header | | ------------ | ------------- | ------------ | | Content Cell | Content Cell | Content Cell | | Content Cell | Content Cell | Content Cell | Specify alignment for each column by adding colons to separator lines: First Header | Second Header | Third Header :----------- |:-------------:| -----------: Left | Center | Right Left | Center | Right Note that table cells cannot contain any block level elements and cannot contain multiple lines of text. They can, however, include inline Markdown as defined in Markdown's syntax rules. Additionally, a table must be surrounded by blank lines. There must be a blank line before and after the table. Fenced code blocks \uf0c1 The fenced code blocks extension adds an alternate method of defining code blocks without indentation. The first line should contain 3 or more backtick ( ` ) characters, and the last line should contain the same number of backtick characters ( ` ): ``` Fenced code blocks are like Standard Markdown\u2019s regular code blocks, except that they\u2019re not indented and instead rely on start and end fence lines to delimit the code block. ``` With this approach, the language can optionally be specified on the first line after the backticks which informs any syntax highlighters of the language used: ```python def fn(): pass ``` Note that fenced code blocks can not be indented. Therefore, they cannot be nested inside list items, blockquotes, etc.","title":"Writing Your Docs"},{"location":"user-guide/writing-your-docs/#writing-your-docs","text":"How to layout and write your Markdown source files.","title":"Writing your docs"},{"location":"user-guide/writing-your-docs/#file-layout","text":"Your documentation source should be written as regular Markdown files (see Writing with Markdown below), and placed in the documentation directory . By default, this directory will be named docs and will exist at the top level of your project, alongside the mkdocs.yml configuration file. The simplest project you can create will look something like this: mkdocs.yml docs/ index.md By convention your project homepage should be named index.md (see Index pages below for details). Any of the following file extensions may be used for your Markdown source files: markdown , mdown , mkdn , mkd , md . All Markdown files included in your documentation directory will be rendered in the built site regardless of any settings. Note Files and directories with names which begin with a dot (for example: .foo.md or .bar/baz.md ) are ignored by MkDocs. This can be overridden with the exclude_docs config . You can also create multi-page documentation, by creating several Markdown files: mkdocs.yml docs/ index.md about.md license.md The file layout you use determines the URLs that are used for the generated pages. Given the above layout, pages would be generated for the following URLs: / /about/ /license/ You can also include your Markdown files in nested directories if that better suits your documentation layout. docs/ index.md user-guide/getting-started.md user-guide/configuration-options.md license.md Source files inside nested directories will cause pages to be generated with nested URLs, like so: / /user-guide/getting-started/ /user-guide/configuration-options/ /license/ Any files which are not identified as Markdown files (by their file extension) within the documentation directory are copied by MkDocs to the built site unaltered. See how to link to images and media below for details.","title":"File layout"},{"location":"user-guide/writing-your-docs/#index-pages","text":"When a directory is requested, by default, most web servers will return an index file (usually named index.html ) contained within that directory if one exists. For that reason, the homepage in all of the examples above has been named index.md , which MkDocs will render to index.html when building the site. Many repository hosting sites provide special treatment for README files by displaying the contents of the README file when browsing the contents of a directory. Therefore, MkDocs will allow you to name your index pages as README.md instead of index.md . In that way, when users are browsing your source code, the repository host can display the index page of that directory as it is a README file. However, when MkDocs renders your site, the file will be renamed to index.html so that the server will serve it as a proper index file. If both an index.md file and a README.md file are found in the same directory, then the index.md file is used and the README.md file is ignored.","title":"Index pages"},{"location":"user-guide/writing-your-docs/#configure-pages-and-navigation","text":"The nav configuration setting in your mkdocs.yml file defines which pages are included in the global site navigation menu as well as the structure of that menu. If not provided, the navigation will be automatically created by discovering all the Markdown files in the documentation directory . An automatically created navigation configuration will always be sorted alphanumerically by file name (except that index files will always be listed first within a sub-section). You will need to manually define your navigation configuration if you would like your navigation menu sorted differently. A minimal navigation configuration could look like this: nav: - index.md - about.md All paths in the navigation configuration must be relative to the docs_dir configuration option. If that option is set to the default value, docs , the source files for the above configuration would be located at docs/index.md and docs/about.md . The above example will result in two navigation items being created at the top level and with their titles inferred from the contents of the Markdown file or, if no title is defined within the file, of the file name. To override the title in the nav setting add a title right before the filename. nav: - Home: index.md - About: about.md Note that if a title is defined for a page in the navigation, that title will be used throughout the site for that page and will override any title defined within the page itself. Navigation sub-sections can be created by listing related pages together under a section title. For example: nav: - Home: index.md - User Guide: - Writing your docs: writing-your-docs.md - Styling your docs: styling-your-docs.md - About: - License: license.md - Release Notes: release-notes.md With the above configuration we have three top level items: \"Home\", \"User Guide\" and \"About.\" \"Home\" is a link to the homepage for the site. Under the \"User Guide\" section two pages are listed: \"Writing your docs\" and \"Styling your docs.\" Under the \"About\" section two more pages are listed: \"License\" and \"Release Notes.\" Note that a section cannot have a page assigned to it. Sections are only containers for child pages and sub-sections. You may nest sections as deeply as you like. However, be careful that you don't make it too difficult for your users to navigate through the site navigation by over-complicating the nesting. While sections may mirror your directory structure, they do not have to. Any pages not listed in your navigation configuration will still be rendered and included with the built site, however, they will not be linked from the global navigation and will not be included in the previous and next links. Such pages will be \"hidden\" unless linked to directly.","title":"Configure Pages and Navigation"},{"location":"user-guide/writing-your-docs/#writing-with-markdown","text":"MkDocs pages must be authored in Markdown , a lightweight markup language which results in easy-to-read, easy-to-write plain text documents that can be converted to valid HTML documents in a predictable manner. MkDocs uses the Python-Markdown library to render Markdown documents to HTML. Python-Markdown is almost completely compliant with the reference implementation , although there are a few very minor differences . In addition to the base Markdown syntax which is common across all Markdown implementations, MkDocs includes support for extending the Markdown syntax with Python-Markdown extensions . See the MkDocs' markdown_extensions configuration setting for details on how to enable extensions. MkDocs includes some extensions by default, which are highlighted below.","title":"Writing with Markdown"},{"location":"user-guide/writing-your-docs/#internal-links","text":"MkDocs allows you to interlink your documentation by using regular Markdown links . However, there are a few additional benefits to formatting those links specifically for MkDocs as outlined below.","title":"Internal links"},{"location":"user-guide/writing-your-docs/#linking-to-pages","text":"When linking between pages in the documentation you can simply use the regular Markdown linking syntax, including the relative path to the Markdown document you wish to link to. Please see the [project license](license.md) for further details. When the MkDocs build runs, these Markdown links will automatically be transformed into an HTML hyperlink to the appropriate HTML page. Warning Using absolute paths with links is not officially supported. Relative paths are adjusted by MkDocs to ensure they are always relative to the page. Absolute paths are not modified at all. This means that your links using absolute paths might work fine in your local environment but they might break once you deploy them to your production server. If the target documentation file is in another directory you'll need to make sure to include any relative directory path in the link. Please see the [project license](../about/license.md) for further details. The toc extension is used by MkDocs to generate an ID for every header in your Markdown documents. You can use that ID to link to a section within a target document by using an anchor link. The generated HTML will correctly transform the path portion of the link, and leave the anchor portion intact. Please see the [project license](about.md#license) for further details. Note that IDs are created from the text of a header. All text is converted to lowercase and any disallowed characters, including white-space, are converted to dashes. Consecutive dashes are then reduced to a single dash. There are a few configuration settings provided by the toc extension which you can set in your mkdocs.yml configuration file to alter the default behavior: permalink Generate permanent links at the end of each header. Default: False . When set to True the paragraph symbol (\u00b6 or &para; ) is used as the link text. When set to a string, the provided string is used as the link text. For example, to use the hash symbol ( # ) instead, do: markdown_extensions: - toc: permalink: \"#\" baselevel Base level for headers. Default: 1 . This setting allows the header levels to be automatically adjusted to fit within the hierarchy of your HTML templates. For example, if the Markdown text for a page should not contain any headers higher than level 2 ( <h2> ), do: markdown_extensions: - toc: baselevel: 2 Then any headers in your document would be increased by 1. For example, the header # Header would be rendered as a level 2 header ( <h2> ) in the HTML output. separator Word separator. Default: - . Character which replaces white-space in generated IDs. If you prefer underscores, then do: markdown_extensions: - toc: separator: \"_\" Note that if you would like to define multiple of the above settings, you must do so under a single toc entry in the markdown_extensions configuration option. markdown_extensions: - toc: permalink: \"#\" baselevel: 2 separator: \"_\"","title":"Linking to pages"},{"location":"user-guide/writing-your-docs/#linking-to-images-and-media","text":"As well as the Markdown source files, you can also include other file types in your documentation, which will be copied across when generating your documentation site. These might include images and other media. For example, if your project documentation needed to include a GitHub Pages CNAME file and a PNG formatted screenshot image then your file layout might look as follows: mkdocs.yml docs/ CNAME index.md about.md license.md img/ screenshot.png To include images in your documentation source files, simply use any of the regular Markdown image syntaxes: Cupcake indexer is a snazzy new project for indexing small cakes. ![Screenshot](img/screenshot.png) *Above: Cupcake indexer in progress* Your image will now be embedded when you build the documentation, and should also be previewed if you're working on the documentation with a Markdown editor.","title":"Linking to images and media"},{"location":"user-guide/writing-your-docs/#linking-from-raw-html","text":"Markdown allows document authors to fall back to raw HTML when the Markdown syntax does not meets the author's needs. MkDocs does not limit Markdown in this regard. However, as all raw HTML is ignored by the Markdown parser, MkDocs is not able to validate or convert links contained in raw HTML. When including internal links within raw HTML, you will need to manually format the link appropriately for the rendered document.","title":"Linking from raw HTML"},{"location":"user-guide/writing-your-docs/#meta-data","text":"MkDocs includes support for both YAML and MultiMarkdown style meta-data (often called front-matter). Meta-data consists of a series of keywords and values defined at the beginning of a Markdown document, which are stripped from the document prior to it being processing by Python-Markdown. The key/value pairs are passed by MkDocs to the page template. Therefore, if a theme includes support, the values of any keys can be displayed on the page or used to control the page rendering. See your theme's documentation for information about which keys may be supported, if any. In addition to displaying information in a template, MkDocs includes support for a few predefined meta-data keys which can alter the behavior of MkDocs for that specific page. The following keys are supported: template The template to use with the current page. By default, MkDocs uses the main.html template of a theme to render Markdown pages. You can use the template meta-data key to define a different template file for that specific page. The template file must be available on the path(s) defined in the theme's environment. title The \"title\" to use for the document. MkDocs will attempt to determine the title of a document in the following ways, in order: A title defined in the nav configuration setting for a document. A title defined in the title meta-data key of a document. A level 1 Markdown header on the first line of the document body. ( Setext-style headers are supported only since MkDocs 1.5 .) The filename of a document. Upon finding a title for a page, MkDoc does not continue checking any additional sources in the above list.","title":"Meta-Data"},{"location":"user-guide/writing-your-docs/#yaml-style-meta-data","text":"YAML style meta-data consists of YAML key/value pairs wrapped in YAML style delimiters to mark the start and/or end of the meta-data. The first line of a document must be --- . The meta-data ends at the first line containing an end deliminator (either --- or ... ). The content between the delimiters is parsed as YAML . --- title: My Document summary: A brief description of my document. authors: - Waylan Limberg - Tom Christie date: 2018-07-10 some_url: https://example.com --- This is the first paragraph of the document. YAML is able to detect data types. Therefore, in the above example, the values of title , summary and some_url are strings, the value of authors is a list of strings and the value of date is a datetime.date object. Note that the YAML keys are case sensitive and MkDocs expects keys to be all lowercase. The top level of the YAML must be a collection of key/value pairs, which results in a Python dict being returned. If any other type is returned or the YAML parser encounters an error, then MkDocs does not recognize the section as meta-data, the page's meta attribute will be empty, and the section is not removed from the document.","title":"YAML Style Meta-Data"},{"location":"user-guide/writing-your-docs/#multimarkdown-style-meta-data","text":"MultiMarkdown style meta-data uses a format first introduced by the MultiMarkdown project. The data consists of a series of keywords and values defined at the beginning of a Markdown document, like this: Title: My Document Summary: A brief description of my document. Authors: Waylan Limberg Tom Christie Date: January 23, 2018 blank-value: some_url: https://example.com This is the first paragraph of the document. The keywords are case-insensitive and may consist of letters, numbers, underscores and dashes and must end with a colon. The values consist of anything following the colon on the line and may even be blank. If a line is indented by 4 or more spaces, that line is assumed to be an additional line of the value for the previous keyword. A keyword may have as many lines as desired. All lines are joined into a single string. The first blank line ends all meta-data for the document. Therefore, the first line of a document must not be blank. Note MkDocs does not support YAML style delimiters ( --- or ... ) for MultiMarkdown style meta-data. In fact, MkDocs relies on the the presence or absence of the delimiters to determine whether YAML style meta-data or MultiMarkdown style meta-data is being used. If the delimiters are detected, but the content between the delimiters is not valid YAML meta-data, MkDocs does not attempt to parse the content as MultiMarkdown style meta-data.","title":"MultiMarkdown Style Meta-Data"},{"location":"user-guide/writing-your-docs/#tables","text":"The tables extension adds a basic table syntax to Markdown which is popular across multiple implementations. The syntax is rather simple and is generally only useful for simple tabular data. A simple table looks like this: First Header | Second Header | Third Header ------------ | ------------- | ------------ Content Cell | Content Cell | Content Cell Content Cell | Content Cell | Content Cell If you wish, you can add a leading and tailing pipe to each line of the table: | First Header | Second Header | Third Header | | ------------ | ------------- | ------------ | | Content Cell | Content Cell | Content Cell | | Content Cell | Content Cell | Content Cell | Specify alignment for each column by adding colons to separator lines: First Header | Second Header | Third Header :----------- |:-------------:| -----------: Left | Center | Right Left | Center | Right Note that table cells cannot contain any block level elements and cannot contain multiple lines of text. They can, however, include inline Markdown as defined in Markdown's syntax rules. Additionally, a table must be surrounded by blank lines. There must be a blank line before and after the table.","title":"Tables"},{"location":"user-guide/writing-your-docs/#fenced-code-blocks","text":"The fenced code blocks extension adds an alternate method of defining code blocks without indentation. The first line should contain 3 or more backtick ( ` ) characters, and the last line should contain the same number of backtick characters ( ` ): ``` Fenced code blocks are like Standard Markdown\u2019s regular code blocks, except that they\u2019re not indented and instead rely on start and end fence lines to delimit the code block. ``` With this approach, the language can optionally be specified on the first line after the backticks which informs any syntax highlighters of the language used: ```python def fn(): pass ``` Note that fenced code blocks can not be indented. Therefore, they cannot be nested inside list items, blockquotes, etc.","title":"Fenced code blocks"}]}